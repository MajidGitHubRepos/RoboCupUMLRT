<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_FX4asIgqEeiP-_qqZZR9Jg" name="model">
    <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_FX4asYgqEeiP-_qqZZR9Jg" source="http://www.eclipse.org/papyrus-rt/language/1.0.0">
      <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_FX4asogqEeiP-_qqZZR9Jg" key="language" value="umlrt-cpp"/>
    </eAnnotations>
    <packagedElement xmi:type="uml:Class" xmi:id="_HR_-AIgqEeiP-_qqZZR9Jg" name="Top" isActive="true">
      <ownedAttribute xmi:type="uml:Property" xmi:id="_WIGPkIgqEeiP-_qqZZR9Jg" name="player1" visibility="protected" type="_J_oo8IgqEeiP-_qqZZR9Jg" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_nYqSgJanEemCgN1WwdiMbQ" name="referee" visibility="protected" type="_VuOiEJXsEemnlJvKCgeTXw" isOrdered="true" aggregation="composite"/>
      <ownedConnector xmi:type="uml:Connector" xmi:id="_1W2rsJanEemCgN1WwdiMbQ" name="RTConnector1">
        <end xmi:type="uml:ConnectorEnd" xmi:id="_1W6WEJanEemCgN1WwdiMbQ" partWithPort="_WIGPkIgqEeiP-_qqZZR9Jg" role="_ve72EJanEemCgN1WwdiMbQ"/>
        <end xmi:type="uml:ConnectorEnd" xmi:id="_1W69IJanEemCgN1WwdiMbQ" partWithPort="_nYqSgJanEemCgN1WwdiMbQ" role="_iSOGwJXvEemnlJvKCgeTXw"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_IQj4AIgqEeiP-_qqZZR9Jg" name="Observer" classifierBehavior="_aLDAQIgtEeiP-_qqZZR9Jg" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_YHmXQIgsEeiP-_qqZZR9Jg" name="observationPort" visibility="public" type="_dCmjkIgqEeiP-_qqZZR9Jg" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="false" isService="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_TnTmcIgtEeiP-_qqZZR9Jg" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_UULTgIgtEeiP-_qqZZR9Jg" name="timer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_w861kIgtEeiP-_qqZZR9Jg" name="cmd" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_GYZqQIgvEeiP-_qqZZR9Jg" name="signalName" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        <defaultValue xmi:type="uml:LiteralString" xmi:id="_JYSfwJqEEemI69k4e-oa_g">
          <value xsi:nil="true"/>
        </defaultValue>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_EJI60JRkEem-h8JsU1axzg" name="tcp" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_tEiNsa1CEeeZPMea3Z4z9w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_hVmKkJasEemCgN1WwdiMbQ" name="refereePort" visibility="public" type="_ibMj8JXsEemnlJvKCgeTXw" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true" isService="true"/>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_Ke6_oJnfEemHu_dwIWKvwA" name="timerId" isStatic="true">
        <type xmi:type="uml:Class" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_8CDz0JnmEemHu_dwIWKvwA" name="__playerX">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralReal" xmi:id="_8CDz0ZnmEemHu_dwIWKvwA"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_8CEa4JnmEemHu_dwIWKvwA" name="__playerZ" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralReal" xmi:id="_8CEa4ZnmEemHu_dwIWKvwA"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_8CFB8JnmEemHu_dwIWKvwA" name="__ballX">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_8CFB8ZnmEemHu_dwIWKvwA" name="__ballZ">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_8CFpAJnmEemHu_dwIWKvwA" name="ballAchiveable">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        <qualifier xmi:type="uml:Property" xmi:id="_8CFpAZnmEemHu_dwIWKvwA" name="ballAchiveable">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_8CFpApnmEemHu_dwIWKvwA"/>
        </qualifier>
        <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_8CFpA5nmEemHu_dwIWKvwA"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_aLDAQIgtEeiP-_qqZZR9Jg" name="ObserverStateMachine" isReentrant="false">
        <region xmi:type="uml:Region" xmi:id="_aLOmcIgtEeiP-_qqZZR9Jg" name="Region">
          <transition xmi:type="uml:Transition" xmi:id="_aLZlkIgtEeiP-_qqZZR9Jg" name="Initial" source="_aLRCsIgtEeiP-_qqZZR9Jg" target="_OTqwwJa3EemCgN1WwdiMbQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_JPynMJa3EemCgN1WwdiMbQ" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>tcp.connect(&quot;127.0.0.1&quot;,9003);
</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_VAJI8IjuEeiP-_qqZZR9Jg" name="" kind="external" source="_9t6p8JnsEemHu_dwIWKvwA" target="_MXIrwIjuEeiP-_qqZZR9Jg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_TAAEQJqtEemI69k4e-oa_g" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>tcp.send(&quot;player2,getCompass()&quot;);
 std::cout&lt;&lt;&quot;[SEND]: player2,getCompass() \n&quot;;</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_1UuuUJazEemCgN1WwdiMbQ" event="_bjhMUJauEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_WfQLQIjuEeiP-_qqZZR9Jg" name="" kind="external" source="_9t6p8JnsEemHu_dwIWKvwA" target="_Rrb28IjuEeiP-_qqZZR9Jg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ZgShcJqtEemI69k4e-oa_g" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>tcp.send(&quot;ball,GPS()&quot;);
 std::cout&lt;&lt;&quot;[SEND]: ball,GPS() \n&quot;;</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_3hedQJa0EemCgN1WwdiMbQ" event="_Zk1SEJauEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_aB1hMIjuEeiP-_qqZZR9Jg" name="" kind="external" source="_9t6p8JnsEemHu_dwIWKvwA" target="_O4Io4IjuEeiP-_qqZZR9Jg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_WPGdgJqtEemI69k4e-oa_g" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>tcp.send(&quot;player2,GPS()&quot;);
 std::cout&lt;&lt;&quot;[SEND]: player2,GPS() \n&quot;;</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_U8kewJa0EemCgN1WwdiMbQ" event="_X9lAYJauEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_g4iTQIjuEeiP-_qqZZR9Jg" name="" kind="external" source="_MXIrwIjuEeiP-_qqZZR9Jg" target="_9t6p8JnsEemHu_dwIWKvwA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lvaZsJn9EemHu_dwIWKvwA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body> std::cout&lt;&lt;&quot;[RECEIVED]: &quot;&lt;&lt; payload &lt;&lt;&quot;\n&quot;;

std::string payloadStr (payload);
int pos1 = payloadStr.find(&quot;,&quot;);
std::string PlayerNameStr = payloadStr.substr(0, pos1);

int size = payloadStr.size();

int pos2 = payloadStr.find(&quot;,&quot;,pos1+1);
std::string compassStr = payloadStr.substr(pos1+1, size);


float compass = std::atof(compassStr.c_str());
observationPort.playerCompass(compass).send(); 

 std::cout&lt;&lt;&quot;[OBSERVER][compass]: &quot;&lt;&lt; compass &lt;&lt;&quot;\n&quot;;</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_-D4PwJazEemCgN1WwdiMbQ" port="_EJI60JRkEem-h8JsU1axzg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_zwyoUK1YEee74Ow6RXIGBA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_nH9C4IjuEeiP-_qqZZR9Jg" name="" kind="external" source="_Rrb28IjuEeiP-_qqZZR9Jg" target="_9t6p8JnsEemHu_dwIWKvwA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_CBnbMJa1EemCgN1WwdiMbQ" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>std::cout&lt;&lt;&quot;[RECEIVED]: &quot;&lt;&lt; payload &lt;&lt;&quot;\n&quot;;

std::string payloadStr (payload);
int pos1 = payloadStr.find(&quot;,&quot;);
std::string PlayerNameStr = payloadStr.substr(0, pos1);

int pos2 = payloadStr.find(&quot;,&quot;,pos1+1);
std::string xStr = payloadStr.substr(pos1+1, pos2);

int size = payloadStr.size();

std::string zStr = payloadStr.substr(pos2+1, size);




float ballX = std::stof(xStr);
float ballZ = std::stof(zStr);

std::cout&lt;&lt;&quot;[RECEIVED][ballX]: &quot;&lt;&lt; ballX &lt;&lt;&quot;\n&quot;;
std::cout&lt;&lt;&quot;[RECEIVED][ballZ]: &quot;&lt;&lt; ballZ &lt;&lt;&quot;\n&quot;;

observationPort.ballPos(ballX,ballZ).send();
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_6g-UQJa0EemCgN1WwdiMbQ" port="_EJI60JRkEem-h8JsU1axzg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_zwyoUK1YEee74Ow6RXIGBA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_qNXUoIjuEeiP-_qqZZR9Jg" name="" kind="external" source="_O4Io4IjuEeiP-_qqZZR9Jg" target="_9t6p8JnsEemHu_dwIWKvwA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qH7CMJa0EemCgN1WwdiMbQ" name="Effect" isReentrant="false">
              <language>C++</language>
              <body> std::cout&lt;&lt;&quot;[RECEIVED]: &quot;&lt;&lt; payload &lt;&lt;&quot;\n&quot;;

std::string payloadStr (payload);
int pos1 = payloadStr.find(&quot;,&quot;);
std::string PlayerNameStr = payloadStr.substr(0, pos1);
int pos2 = payloadStr.find(&quot;,&quot;,pos1+1);
std::string xStr = payloadStr.substr(pos1+1, pos2);

int size = payloadStr.size();

std::string zStr = payloadStr.substr(pos2+1, size);




float playerX = std::stof(xStr);
float playerZ = std::stof(zStr);

 std::cout&lt;&lt;&quot;[RECEIVED][playerX]: &quot;&lt;&lt; playerX &lt;&lt;&quot;\n&quot;;
 std::cout&lt;&lt;&quot;[RECEIVED][playerZ]: &quot;&lt;&lt; playerZ &lt;&lt;&quot;\n&quot;;


observationPort.playerPos(playerX,playerZ).send();
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_kZWV0Ja0EemCgN1WwdiMbQ" port="_EJI60JRkEem-h8JsU1axzg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_zwyoUK1YEee74Ow6RXIGBA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_SB1roJa3EemCgN1WwdiMbQ" name="" kind="external" source="_OTqwwJa3EemCgN1WwdiMbQ" target="_9t6p8JnsEemHu_dwIWKvwA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_gw_AoJa3EemCgN1WwdiMbQ" name="Effect" isReentrant="false">
              <language>C++</language>
              <body> std::cout&lt;&lt;&quot;[TCP CONNECTION HAS BEEN SUCCESSFULLY ESTABLISHED !] \n\n\n&quot;;</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_WxBXkJa3EemCgN1WwdiMbQ" port="_EJI60JRkEem-h8JsU1axzg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_s9iNgMT3Eei7WtNtKyCSvw"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_jbplMJa5EemCgN1WwdiMbQ" name="" kind="external" source="_9t6p8JnsEemHu_dwIWKvwA" target="_XagukJa5EemCgN1WwdiMbQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_cRKtoJqtEemI69k4e-oa_g" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>char* cmdCHAR = strcpy(new char[strlen(cmd) + 1], cmd);
tcp.send(cmdCHAR);
 std::cout&lt;&lt;&quot;[SEND][cmd]: &quot;&lt;&lt; cmd &lt;&lt;&quot;\n&quot;;

timerId =timer.informIn(UMLRTTimespec(0, 100000000));</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_10vcYJa5EemCgN1WwdiMbQ" event="_NwKNUJayEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_s0p78Ja5EemCgN1WwdiMbQ" name="" kind="external" source="_XagukJa5EemCgN1WwdiMbQ" target="_9t6p8JnsEemHu_dwIWKvwA">
            <trigger xmi:type="uml:Trigger" xmi:id="_K10pgJa6EemCgN1WwdiMbQ" port="_UULTgIgtEeiP-_qqZZR9Jg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_1QRRkJdiEemu8v-9gGlQEg" name="deferMSG1" kind="external" source="_XagukJa5EemCgN1WwdiMbQ" target="_XagukJa5EemCgN1WwdiMbQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_5mfq8JdiEemu8v-9gGlQEg" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>msg->defer();</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_gjabQJnDEemHu_dwIWKvwA" event="_Co9r8JXtEemnlJvKCgeTXw" port="_hVmKkJasEemCgN1WwdiMbQ"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_cSWwwJn6EemHu_dwIWKvwA" event="_Zk1SEJauEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_cSbCMJn6EemHu_dwIWKvwA" event="_bjhMUJauEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_aGVlIJn6EemHu_dwIWKvwA" event="_X9lAYJauEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_5G9kkJn6EemHu_dwIWKvwA" port="_EJI60JRkEem-h8JsU1axzg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_zwyoUK1YEee74Ow6RXIGBA"/>
            </trigger>
            <trigger xmi:type="uml:Trigger" xmi:id="_G1JKYJqAEemI69k4e-oa_g" event="_NwKNUJayEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_Y5PDUJq_EemI69k4e-oa_g" event="_8wjAoJaoEemCgN1WwdiMbQ" port="_hVmKkJasEemCgN1WwdiMbQ"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_XLoSAJq_EemI69k4e-oa_g" event="_2hxQoJXsEemnlJvKCgeTXw" port="_hVmKkJasEemCgN1WwdiMbQ"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_CC1M4Jt7EemI69k4e-oa_g" event="_wjoTUJqDEemI69k4e-oa_g" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_YbebQJeIEemu8v-9gGlQEg" name="" kind="external" source="_VJfGEJeIEemu8v-9gGlQEg" target="_9t6p8JnsEemHu_dwIWKvwA">
            <trigger xmi:type="uml:Trigger" xmi:id="_CrIe8JeJEemu8v-9gGlQEg" port="_UULTgIgtEeiP-_qqZZR9Jg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_bxy20JeIEemu8v-9gGlQEg" name="" kind="external" source="_9t6p8JnsEemHu_dwIWKvwA" target="_VJfGEJeIEemu8v-9gGlQEg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_g3A3YJqtEemI69k4e-oa_g" name="Effect" isReentrant="false">
              <language>C++</language>
              <body> std::cout&lt;&lt;&quot;[BALL POSSESION] \n&quot;;
observationPort.goScoring().send();
timerId =timer.informIn(UMLRTTimespec(0, 1000));</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_eZ0B8JeIEemu8v-9gGlQEg" event="_8wjAoJaoEemCgN1WwdiMbQ" port="_hVmKkJasEemCgN1WwdiMbQ"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_FX94oJeJEemu8v-9gGlQEg" name="deferMSG2" kind="external" source="_VJfGEJeIEemu8v-9gGlQEg" target="_VJfGEJeIEemu8v-9gGlQEg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KznpAJeJEemu8v-9gGlQEg" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>msg->defer();</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_iIHvQJnDEemHu_dwIWKvwA" event="_Co9r8JXtEemnlJvKCgeTXw" port="_hVmKkJasEemCgN1WwdiMbQ"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_hAWO4JnDEemHu_dwIWKvwA" event="_2hxQoJXsEemnlJvKCgeTXw" port="_hVmKkJasEemCgN1WwdiMbQ"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_I79wYJnlEemHu_dwIWKvwA" event="_NwKNUJayEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_ZfoxgJn6EemHu_dwIWKvwA" event="_Zk1SEJauEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_ZftC8Jn6EemHu_dwIWKvwA" event="_bjhMUJauEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_ZfxUYJn6EemHu_dwIWKvwA" event="_NwKNUJayEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_XVBUEJn6EemHu_dwIWKvwA" event="_X9lAYJauEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_7kdhwJn6EemHu_dwIWKvwA" port="_EJI60JRkEem-h8JsU1axzg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_zwyoUK1YEee74Ow6RXIGBA"/>
            </trigger>
            <trigger xmi:type="uml:Trigger" xmi:id="_-9yukJt6EemI69k4e-oa_g" event="_wjoTUJqDEemI69k4e-oa_g" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_Eg0VYJnSEemHu_dwIWKvwA" name="deferMSG3" kind="external" source="_MXIrwIjuEeiP-_qqZZR9Jg" target="_MXIrwIjuEeiP-_qqZZR9Jg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ZGO6MJnSEemHu_dwIWKvwA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>msg->defer();</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_XB5D4JnSEemHu_dwIWKvwA" event="_Co9r8JXtEemnlJvKCgeTXw" port="_hVmKkJasEemCgN1WwdiMbQ"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_XB-jcJnSEemHu_dwIWKvwA" event="_8wjAoJaoEemCgN1WwdiMbQ" port="_hVmKkJasEemCgN1WwdiMbQ"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_WJTPAJnSEemHu_dwIWKvwA" event="_2hxQoJXsEemnlJvKCgeTXw" port="_hVmKkJasEemCgN1WwdiMbQ"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_70jiAJtUEemI69k4e-oa_g" event="_Zk1SEJauEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_70vIMJtUEemI69k4e-oa_g" event="_NwKNUJayEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_705gQJtUEemI69k4e-oa_g" event="_wjoTUJqDEemI69k4e-oa_g" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_3jZO0JtUEemI69k4e-oa_g" event="_X9lAYJauEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_G24N0JnSEemHu_dwIWKvwA" name="deferMSG4" kind="external" source="_O4Io4IjuEeiP-_qqZZR9Jg" target="_O4Io4IjuEeiP-_qqZZR9Jg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Zoi9EJnSEemHu_dwIWKvwA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>msg->defer();</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_VUkmcJnSEemHu_dwIWKvwA" event="_Co9r8JXtEemnlJvKCgeTXw" port="_hVmKkJasEemCgN1WwdiMbQ"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_VUwzsJnSEemHu_dwIWKvwA" event="_8wjAoJaoEemCgN1WwdiMbQ" port="_hVmKkJasEemCgN1WwdiMbQ"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_UeqSIJnSEemHu_dwIWKvwA" event="_2hxQoJXsEemnlJvKCgeTXw" port="_hVmKkJasEemCgN1WwdiMbQ"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_-pa2UJtUEemI69k4e-oa_g" event="_bjhMUJauEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_-pqt8JtUEemI69k4e-oa_g" event="_NwKNUJayEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_-pz34JtUEemI69k4e-oa_g" event="_wjoTUJqDEemI69k4e-oa_g" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_8mwbAJtUEemI69k4e-oa_g" event="_Zk1SEJauEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_KGRiAJnSEemHu_dwIWKvwA" name="deferMSG6" kind="external" source="_Rrb28IjuEeiP-_qqZZR9Jg" target="_Rrb28IjuEeiP-_qqZZR9Jg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Z9sGoJnSEemHu_dwIWKvwA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>msg->defer();</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_QTf5QJnSEemHu_dwIWKvwA" event="_Co9r8JXtEemnlJvKCgeTXw" port="_hVmKkJasEemCgN1WwdiMbQ"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_QTlY0JnSEemHu_dwIWKvwA" event="_8wjAoJaoEemCgN1WwdiMbQ" port="_hVmKkJasEemCgN1WwdiMbQ"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_PXBp8JnSEemHu_dwIWKvwA" event="_2hxQoJXsEemnlJvKCgeTXw" port="_hVmKkJasEemCgN1WwdiMbQ"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_BG0F0JtVEemI69k4e-oa_g" event="_bjhMUJauEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_BG6McJtVEemI69k4e-oa_g" event="_NwKNUJayEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_BG-d4JtVEemI69k4e-oa_g" event="_wjoTUJqDEemI69k4e-oa_g" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="__rPfsJtUEemI69k4e-oa_g" event="_X9lAYJauEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_sFCFgJndEemHu_dwIWKvwA" name="" kind="external" source="_opZFEJndEemHu_dwIWKvwA" target="_9t6p8JnsEemHu_dwIWKvwA">
            <trigger xmi:type="uml:Trigger" xmi:id="_-wNyQJndEemHu_dwIWKvwA" port="_UULTgIgtEeiP-_qqZZR9Jg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_sywHIJndEemHu_dwIWKvwA" name="" kind="external" source="_9t6p8JnsEemHu_dwIWKvwA" target="_opZFEJndEemHu_dwIWKvwA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_j5hmIJqtEemI69k4e-oa_g" name="Effect" isReentrant="false">
              <language>C++</language>
              <body> std::cout&lt;&lt;&quot;[BALL TIMEOUT] \n&quot;;
observationPort.goTracking().send();
timerId =timer.informIn(UMLRTTimespec(0, 1000));</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_vBMUoJndEemHu_dwIWKvwA" event="_2hxQoJXsEemnlJvKCgeTXw" port="_hVmKkJasEemCgN1WwdiMbQ"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_zo2YEJnkEemHu_dwIWKvwA" name="deferMSG7" kind="external" source="_opZFEJndEemHu_dwIWKvwA" target="_opZFEJndEemHu_dwIWKvwA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_4hyc8JnkEemHu_dwIWKvwA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>msg->defer();</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_-VQQYJnkEemHu_dwIWKvwA" event="_Co9r8JXtEemnlJvKCgeTXw" port="_hVmKkJasEemCgN1WwdiMbQ"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_-VikQJnkEemHu_dwIWKvwA" event="_8wjAoJaoEemCgN1WwdiMbQ" port="_hVmKkJasEemCgN1WwdiMbQ"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_LiZAEJnlEemHu_dwIWKvwA" event="_NwKNUJayEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_f__gIJn6EemHu_dwIWKvwA" event="_Zk1SEJauEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_gARM8Jn6EemHu_dwIWKvwA" event="_bjhMUJauEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_gAblAJn6EemHu_dwIWKvwA" event="_NwKNUJayEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_eA8ZgJn6EemHu_dwIWKvwA" event="_X9lAYJauEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_9QnhkJn6EemHu_dwIWKvwA" port="_EJI60JRkEem-h8JsU1axzg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_zwyoUK1YEee74Ow6RXIGBA"/>
            </trigger>
            <trigger xmi:type="uml:Trigger" xmi:id="_DbCLMJtVEemI69k4e-oa_g" event="_wjoTUJqDEemI69k4e-oa_g" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_p0gv8JqDEemI69k4e-oa_g" name="" kind="external" source="_9t6p8JnsEemHu_dwIWKvwA" target="_mVH38JqDEemI69k4e-oa_g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_MHUl4JtVEemI69k4e-oa_g" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>std::cout&lt;&lt;&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[OBSERVER][ASK FOR SIGNAL]: &quot;&lt;&lt; signalName &lt;&lt;&quot;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n&quot;;
std::string payloadStr (signalName);

std::size_t found = payloadStr.find(&quot;scoring&quot;);
    if (found!=std::string::npos){
    	observationPort.goScoring().send();
    	std::cout&lt;&lt;&quot;-------------> [OBSERVER][SEND goScoring to controller] \n&quot;;
    }

found = payloadStr.find(&quot;random&quot;);
    if (found!=std::string::npos){
    	observationPort.goRandom().send();
    	std::cout&lt;&lt;&quot;-------------> [OBSERVER][SEND goRandom to controller] \n&quot;;
    }

found = payloadStr.find(&quot;tracking&quot;);
    if (found!=std::string::npos){
    	observationPort.goTracking().send();
    	std::cout&lt;&lt;&quot;-------------> [OBSERVER][SEND goTracking to controller] \n&quot;;
    }

found = payloadStr.find(&quot;grabbing&quot;);
    if (found!=std::string::npos){
    	observationPort.goGrabbing().send();
    	std::cout&lt;&lt;&quot;-------------> [OBSERVER][SEND goGrabbing to controller] \n&quot;;
    }
  

timerId =timer.informIn(UMLRTTimespec(0, 1000));</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_LhV28JqEEemI69k4e-oa_g" event="_wjoTUJqDEemI69k4e-oa_g" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_qISyIJqEEemI69k4e-oa_g" name="" kind="external" source="_mVH38JqDEemI69k4e-oa_g" target="_9t6p8JnsEemHu_dwIWKvwA">
            <trigger xmi:type="uml:Trigger" xmi:id="_rAaF4JqEEemI69k4e-oa_g" port="_UULTgIgtEeiP-_qqZZR9Jg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_Bae54Jq_EemI69k4e-oa_g" name="deferMSG5" kind="external" source="_mVH38JqDEemI69k4e-oa_g" target="_mVH38JqDEemI69k4e-oa_g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KykqoJq_EemI69k4e-oa_g" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>msg->defer();</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_IlkAgJq_EemI69k4e-oa_g" event="_Co9r8JXtEemnlJvKCgeTXw" port="_hVmKkJasEemCgN1WwdiMbQ"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_IltxgJq_EemI69k4e-oa_g" event="_8wjAoJaoEemCgN1WwdiMbQ" port="_hVmKkJasEemCgN1WwdiMbQ"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_G0nAQJq_EemI69k4e-oa_g" event="_2hxQoJXsEemnlJvKCgeTXw" port="_hVmKkJasEemCgN1WwdiMbQ"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_I2vl8JtVEemI69k4e-oa_g" event="_Zk1SEJauEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_I20ecJtVEemI69k4e-oa_g" event="_bjhMUJauEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_I24v4JtVEemI69k4e-oa_g" event="_NwKNUJayEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
            <trigger xmi:type="uml:Trigger" xmi:id="_HZasUJtVEemI69k4e-oa_g" event="_X9lAYJauEemCgN1WwdiMbQ" port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_aLRCsIgtEeiP-_qqZZR9Jg" kind="initial"/>
          <subvertex xmi:type="uml:State" xmi:id="_MXIrwIjuEeiP-_qqZZR9Jg" name="GET_COMPASS"/>
          <subvertex xmi:type="uml:State" xmi:id="_O4Io4IjuEeiP-_qqZZR9Jg" name="GET_PLAYER_POS"/>
          <subvertex xmi:type="uml:State" xmi:id="_Rrb28IjuEeiP-_qqZZR9Jg" name="GET_BALL_POS"/>
          <subvertex xmi:type="uml:State" xmi:id="_OTqwwJa3EemCgN1WwdiMbQ" name="CONNECTING"/>
          <subvertex xmi:type="uml:State" xmi:id="_XagukJa5EemCgN1WwdiMbQ" name="SEND_CMD"/>
          <subvertex xmi:type="uml:State" xmi:id="_VJfGEJeIEemu8v-9gGlQEg" name="BALL_POSSESION"/>
          <subvertex xmi:type="uml:State" xmi:id="_opZFEJndEemHu_dwIWKvwA" name="BALL_TIMEOUT"/>
          <subvertex xmi:type="uml:State" xmi:id="_9t6p8JnsEemHu_dwIWKvwA" name="WAITING">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_QA-KkJntEemHu_dwIWKvwA" name="Entry" isReentrant="false">
              <language>C++</language>
              <body> std::cout&lt;&lt;&quot;[OBSERVER in WAITING] \n&quot;;


 if (timerId.isValid())
    	timer.cancelTimer(timerId);

refereePort.recallAll();
observationPort.recallAll();</body>
            </entry>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_mVH38JqDEemI69k4e-oa_g" name="ASK_MSG"/>
        </region>
      </ownedBehavior>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_J_oo8IgqEeiP-_qqZZR9Jg" name="Player" classifierBehavior="_uUhkEIg6EeiP-_qqZZR9Jg" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_oLctAIg6EeiP-_qqZZR9Jg" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_pwcy8IidEeiP-_qqZZR9Jg" name="playerController" visibility="protected" type="_qAMfIIidEeiP-_qqZZR9Jg" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_wO4noIjtEeiP-_qqZZR9Jg" name="observer" visibility="protected" type="_IQj4AIgqEeiP-_qqZZR9Jg" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_Qi1zAIj1EeiP-_qqZZR9Jg" name="timer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ve72EJanEemCgN1WwdiMbQ" name="refereePort" visibility="public" type="_ibMj8JXsEemnlJvKCgeTXw" isOrdered="true" aggregation="composite" isBehavior="false" isConjugated="true" isService="true"/>
      <ownedConnector xmi:type="uml:Connector" xmi:id="_1cxXYJawEemCgN1WwdiMbQ" name="RTConnector4">
        <end xmi:type="uml:ConnectorEnd" xmi:id="_1c2P4JawEemCgN1WwdiMbQ" partWithPort="_wO4noIjtEeiP-_qqZZR9Jg" role="_YHmXQIgsEeiP-_qqZZR9Jg"/>
        <end xmi:type="uml:ConnectorEnd" xmi:id="_1c228JawEemCgN1WwdiMbQ" partWithPort="_pwcy8IidEeiP-_qqZZR9Jg" role="_vAt58JawEemCgN1WwdiMbQ"/>
      </ownedConnector>
      <ownedConnector xmi:type="uml:Connector" xmi:id="_F5eRwJdeEemu8v-9gGlQEg" name="RTConnector5">
        <end xmi:type="uml:ConnectorEnd" xmi:id="_F5ijMJdeEemu8v-9gGlQEg" role="_ve72EJanEemCgN1WwdiMbQ"/>
        <end xmi:type="uml:ConnectorEnd" xmi:id="_F5jKQJdeEemu8v-9gGlQEg" partWithPort="_wO4noIjtEeiP-_qqZZR9Jg" role="_hVmKkJasEemCgN1WwdiMbQ"/>
      </ownedConnector>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_uUhkEIg6EeiP-_qqZZR9Jg" name="PlayerStateMachine" isReentrant="false">
        <region xmi:type="uml:Region" xmi:id="_uUoRwIg6EeiP-_qqZZR9Jg" name="Region"/>
      </ownedBehavior>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_qAMfIIidEeiP-_qqZZR9Jg" name="PlayerController" classifierBehavior="_M-OIQIieEeiP-_qqZZR9Jg" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_xFvwEIieEeiP-_qqZZR9Jg" name="timer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_y3Op4IigEeiP-_qqZZR9Jg" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_BdWqAJRkEem-h8JsU1axzg" name="tcp" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_tEiNsa1CEeeZPMea3Z4z9w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_vAt58JawEemCgN1WwdiMbQ" name="observationPort" visibility="public" type="_dCmjkIgqEeiP-_qqZZR9Jg" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true" isService="true"/>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_e1JQ8Ja1EemCgN1WwdiMbQ" name="compass" isStatic="true">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_e1J4AJa1EemCgN1WwdiMbQ" name="playerX">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralReal" xmi:id="_e1J4AZa1EemCgN1WwdiMbQ"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_e1KfEJa1EemCgN1WwdiMbQ" name="playerZ" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralReal" xmi:id="_e1KfEZa1EemCgN1WwdiMbQ"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_e1LGIJa1EemCgN1WwdiMbQ" name="ballX">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_e1LtMJa1EemCgN1WwdiMbQ" name="ballZ">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_hPV-EJdbEemu8v-9gGlQEg" name="approaching_threshold" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_hPV-EZdbEemu8v-9gGlQEg" value="8"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_hPXMMJdbEemu8v-9gGlQEg" name="moveForward">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralReal" xmi:id="_hPXMMZdbEemu8v-9gGlQEg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_hPXzQJdbEemu8v-9gGlQEg" name="moveForwardPower">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralReal" xmi:id="_hPXzQZdbEemu8v-9gGlQEg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_hPYaUJdbEemu8v-9gGlQEg" name="moveRight">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralReal" xmi:id="_hPYaUZdbEemu8v-9gGlQEg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_hPZBYJdbEemu8v-9gGlQEg" name="moveRightPower">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralReal" xmi:id="_hPZBYZdbEemu8v-9gGlQEg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_7xSO4JdfEemu8v-9gGlQEg" name="__compass" isStatic="true">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_7xTdAJdfEemu8v-9gGlQEg" name="__playerX">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralReal" xmi:id="_7xTdAZdfEemu8v-9gGlQEg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_7xUEEJdfEemu8v-9gGlQEg" name="__playerZ" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralReal" xmi:id="_7xUEEZdfEemu8v-9gGlQEg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_7xUrIJdfEemu8v-9gGlQEg" name="__ballX">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_7xVSMJdfEemu8v-9gGlQEg" name="__ballZ">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_Ggv44Jd5Eemu8v-9gGlQEg" name="ballAchiveable">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        <qualifier xmi:type="uml:Property" xmi:id="_eckTcJnXEemHu_dwIWKvwA" name="ballAchiveable">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_eckTcZnXEemHu_dwIWKvwA"/>
        </qualifier>
        <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_MGuC4Jd5Eemu8v-9gGlQEg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_mQQAcJeNEemu8v-9gGlQEg" name="angle">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_ncDFMJeNEemu8v-9gGlQEg" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ncNdQJeNEemu8v-9gGlQEg" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_6t63IJeQEemu8v-9gGlQEg" name="compassAdjusted">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_6t63IZeQEemu8v-9gGlQEg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_qiir4JgYEemlgp8TkwLmkA" name="spinPower">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralReal" xmi:id="_qiir4ZgYEemlgp8TkwLmkA"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_iTBv8JgcEemlgp8TkwLmkA" name="__prvRotation" isStatic="true">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_05FkwJgfEemlgp8TkwLmkA" name="orientation" isStatic="true">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_4gskoJgfEemlgp8TkwLmkA" value="0"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_k2BQIJgnEemlgp8TkwLmkA" name="__prvAngle" isStatic="true">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_oMs4EJgnEemlgp8TkwLmkA" value="0"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_mqc60JgqEemlgp8TkwLmkA" name="__prvSpinPower" isStatic="true">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_P0GmoJhVEemlgp8TkwLmkA" name="rotation" isStatic="true">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_P0GmoZhVEemlgp8TkwLmkA" value="0"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_YOcG8JhbEemlgp8TkwLmkA" name="spinTime">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralReal" xmi:id="_YOcG8ZhbEemlgp8TkwLmkA" value="5.0E8"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_5lF3sJhdEemlgp8TkwLmkA" name="timerId" isStatic="true">
        <type xmi:type="uml:Class" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6qkTMGXmEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_L0LZsJjfEemlgp8TkwLmkA" name="goalX">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralReal" xmi:id="_L0LZsZjfEemlgp8TkwLmkA" value="-45.99"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_L0NO4JjfEemlgp8TkwLmkA" name="goalZ" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralReal" xmi:id="_L0NO4ZjfEemlgp8TkwLmkA"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_e-q68JnXEemHu_dwIWKvwA" name="goalAchiveable">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_e-q68ZnXEemHu_dwIWKvwA"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_yGqNkJnZEemHu_dwIWKvwA" name="__prvPlayerX">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralReal" xmi:id="_yGqNkZnZEemHu_dwIWKvwA"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_yGq0oJnZEemHu_dwIWKvwA" name="__prvPlayerZ" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralReal" xmi:id="_yGq0oZnZEemHu_dwIWKvwA"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_GgZzAJqMEemI69k4e-oa_g" name="gotBall">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        <defaultValue xmi:type="uml:LiteralReal" xmi:id="_GgZzAZqMEemI69k4e-oa_g"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_i-7dkJqWEemI69k4e-oa_g" name="__prvCompass" isStatic="true">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_L03vsJtwEemI69k4e-oa_g" name="ball_player_distance">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralReal" xmi:id="_L03vsZtwEemI69k4e-oa_g"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_N4hQ8JwJEemI69k4e-oa_g" name="goal_player_distance">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralReal" xmi:id="_N4hQ8ZwJEemI69k4e-oa_g"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_M-OIQIieEeiP-_qqZZR9Jg" name="ControllerStateMachine" isReentrant="false">
        <region xmi:type="uml:Region" xmi:id="_M-U18IieEeiP-_qqZZR9Jg" name="Region">
          <transition xmi:type="uml:Transition" xmi:id="_M-ZucYieEeiP-_qqZZR9Jg" name="Initial" source="_M-WEEIieEeiP-_qqZZR9Jg" target="_KPtFsJavEemCgN1WwdiMbQ"/>
          <transition xmi:type="uml:Transition" xmi:id="_dCvY0JatEemCgN1WwdiMbQ" name="" kind="external" source="_V3TRUJdnEemu8v-9gGlQEg" target="_YgnkgJeJEemu8v-9gGlQEg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_cLW9kJhdEemlgp8TkwLmkA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body> if (timerId.isValid())
    	timer.cancelTimer(timerId);

std::cout&lt;&lt;&quot;\n\n\n>>>>>>>>>>>>>>>> FROM [GRABBING] TO [SCORING] \n\n\n&quot;;
gotBall = true;</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_VGzOAJnDEemHu_dwIWKvwA" event="_XWw3gIjtEeiP-_qqZZR9Jg" port="_vAt58JawEemCgN1WwdiMbQ"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_XzG4sJdREemu8v-9gGlQEg" name="" kind="external" source="_RBQxcJdREemu8v-9gGlQEg" target="_V3QOAJdnEemu8v-9gGlQEg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fqZ3UJhdEemlgp8TkwLmkA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body> if (timerId.isValid())
    	timer.cancelTimer(timerId);

std::cout&lt;&lt;&quot;\n\n\n>>>>>>>>>>>>>>>> FROM [TRACKING] TO [GRABBING] \n\n\n&quot;;</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_w9TzAJtREemI69k4e-oa_g" event="_VylH8IjtEeiP-_qqZZR9Jg" port="_vAt58JawEemCgN1WwdiMbQ"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_5tGKwJd5Eemu8v-9gGlQEg" name="outOfRange1" kind="external" source="_sz3rAJd4Eemu8v-9gGlQEg" target="_5tDHcJd5Eemu8v-9gGlQEg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_d0rr0JhdEemlgp8TkwLmkA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body> if (timerId.isValid())
    	timer.cancelTimer(timerId);

std::cout&lt;&lt;&quot;\n\n\n>>>>>>>>>>>>>>>> FROM [GRABBING] TO [TRACKING] \n\n\n&quot;;

gotBall = false;</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_7lQ7MJnHEemHu_dwIWKvwA" name="" kind="external" source="_6TOrkJnHEemHu_dwIWKvwA" target="_KP3dwJavEemCgN1WwdiMbQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_6t44MJnQEemHu_dwIWKvwA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body> if (timerId.isValid())
    	timer.cancelTimer(timerId);


std::cout&lt;&lt;&quot;\n\n\n>>>>>>>>>>>>>>>> FROM [SCORING] TO [TRACKING] \n\n\n&quot;;

gotBall = false;</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_FU9RoJneEemHu_dwIWKvwA" event="_hkGG4IgsEeiP-_qqZZR9Jg" port="_vAt58JawEemCgN1WwdiMbQ"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_A5Xd0JnjEemHu_dwIWKvwA" name="goScoring" kind="external" source="_A5R-QJnjEemHu_dwIWKvwA" target="_A5VooJnjEemHu_dwIWKvwA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_HTvgQJnjEemHu_dwIWKvwA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body> if (timerId.isValid())
    	timer.cancelTimer(timerId);

std::cout&lt;&lt;&quot;\n\n\n>>>>>>>>>>>>>>>> FROM [TRACKING] TO [SCORING] \n\n\n&quot;;

gotBall = true;</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_DG2CAJnjEemHu_dwIWKvwA" event="_XWw3gIjtEeiP-_qqZZR9Jg" port="_vAt58JawEemCgN1WwdiMbQ"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_gEUPMJnpEemHu_dwIWKvwA" name="outOfRange2" kind="external" source="_eOk1kJnpEemHu_dwIWKvwA" target="_gESaAJnpEemHu_dwIWKvwA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_inPh4JqMEemI69k4e-oa_g" name="Effect" isReentrant="false">
              <language>C++</language>
              <body> if (timerId.isValid())
    	timer.cancelTimer(timerId);
gotBall = false;</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_sP5G4Jp7EemI69k4e-oa_g" name="" kind="external" source="_sPYwkJp7EemI69k4e-oa_g" target="_sP01cJp7EemI69k4e-oa_g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_lIf9sJqMEemI69k4e-oa_g" name="Effect" isReentrant="false">
              <language>C++</language>
              <body> if (timerId.isValid())
    	timer.cancelTimer(timerId);

gotBall = false;</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_C-0V4Jp8EemI69k4e-oa_g" event="_hkGG4IgsEeiP-_qqZZR9Jg" port="_vAt58JawEemCgN1WwdiMbQ"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_mir1AJqSEemI69k4e-oa_g" name="" kind="external" source="_mioxsJqSEemI69k4e-oa_g" target="_x7C0YJqSEemI69k4e-oa_g">
            <trigger xmi:type="uml:Trigger" xmi:id="_Ujnx8JqTEemI69k4e-oa_g" event="_S8yo8JqREemI69k4e-oa_g" port="_vAt58JawEemCgN1WwdiMbQ"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_60qgcJqSEemI69k4e-oa_g" name="" kind="external" source="_5DvVYJqSEemI69k4e-oa_g" target="_x7C0YJqSEemI69k4e-oa_g">
            <trigger xmi:type="uml:Trigger" xmi:id="_V--VoJqTEemI69k4e-oa_g" event="_S8yo8JqREemI69k4e-oa_g" port="_vAt58JawEemCgN1WwdiMbQ"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_99G4EJqSEemI69k4e-oa_g" name="" kind="external" source="_9CS1oJqSEemI69k4e-oa_g" target="_x7C0YJqSEemI69k4e-oa_g">
            <trigger xmi:type="uml:Trigger" xmi:id="_XdgJIJqTEemI69k4e-oa_g" event="_S8yo8JqREemI69k4e-oa_g" port="_vAt58JawEemCgN1WwdiMbQ"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="__8lcgJqSEemI69k4e-oa_g" kind="external" source="_x7C0YJqSEemI69k4e-oa_g" target="_3pTNIJqREemI69k4e-oa_g"/>
          <transition xmi:type="uml:Transition" xmi:id="_CdaagJqTEemI69k4e-oa_g" kind="external" source="_4IFa4JqREemI69k4e-oa_g" target="_exnTIJqXEemI69k4e-oa_g"/>
          <transition xmi:type="uml:Transition" xmi:id="_gi31YJqXEemI69k4e-oa_g" name="" kind="external" source="_gi2AMJqXEemI69k4e-oa_g" target="_exnTIJqXEemI69k4e-oa_g">
            <trigger xmi:type="uml:Trigger" xmi:id="_kUnBoJqXEemI69k4e-oa_g" event="_hkGG4IgsEeiP-_qqZZR9Jg" port="_vAt58JawEemCgN1WwdiMbQ"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_iDQDAJqXEemI69k4e-oa_g" kind="external" source="_exnTIJqXEemI69k4e-oa_g" target="_CdYlUJqTEemI69k4e-oa_g"/>
          <transition xmi:type="uml:Transition" xmi:id="_LbWtMZtUEemI69k4e-oa_g" name="" kind="external" source="_LbTC0JtUEemI69k4e-oa_g" target="_LbU4AJtUEemI69k4e-oa_g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Et-QYJtuEemI69k4e-oa_g" name="Effect" isReentrant="false">
              <language>C++</language>
              <body> if (timerId.isValid())
    	timer.cancelTimer(timerId);</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_QCgegJtUEemI69k4e-oa_g" event="_hkGG4IgsEeiP-_qqZZR9Jg" port="_vAt58JawEemCgN1WwdiMbQ"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_3wbYoJwtEemcmdsy3pl2Ng" name="" kind="external" source="_3wTc0JwtEemcmdsy3pl2Ng" target="_ZQlV0JatEemCgN1WwdiMbQ">
            <trigger xmi:type="uml:Trigger" xmi:id="__WkqoJwtEemcmdsy3pl2Ng" event="_XWw3gIjtEeiP-_qqZZR9Jg" port="_vAt58JawEemCgN1WwdiMbQ"/>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_M-WEEIieEeiP-_qqZZR9Jg" kind="initial"/>
          <subvertex xmi:type="uml:State" xmi:id="_M-YgUIieEeiP-_qqZZR9Jg" name="TRACKING">
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_KPtFsJavEemCgN1WwdiMbQ" name="from_init" kind="entryPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_KP3dwJavEemCgN1WwdiMbQ" name="goTracking_entryPoint2" kind="entryPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_RBQxcJdREemu8v-9gGlQEg" name="goGrabbing_exitPoint" kind="exitPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_5tDHcJd5Eemu8v-9gGlQEg" name="outOfRange_entryPoint1" kind="entryPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_A5R-QJnjEemHu_dwIWKvwA" name="goScoring_exitPoint" kind="exitPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_gESaAJnpEemHu_dwIWKvwA" name="outOfRange_entryPoint2" kind="entryPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_sP01cJp7EemI69k4e-oa_g" name="goTracking_entryPoint" kind="entryPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_9CS1oJqSEemI69k4e-oa_g" kind="exitPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_CdYlUJqTEemI69k4e-oa_g" kind="entryPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_LbTC0JtUEemI69k4e-oa_g" kind="exitPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_LbU4AJtUEemI69k4e-oa_g" kind="entryPoint"/>
            <region xmi:type="uml:Region" xmi:id="_KPki0JavEemCgN1WwdiMbQ" name="Region1">
              <transition xmi:type="uml:Transition" xmi:id="_KRCF8JawEemCgN1WwdiMbQ" kind="local" source="_KPtFsJavEemCgN1WwdiMbQ" target="_Nj4y0JwLEemI69k4e-oa_g"/>
              <transition xmi:type="uml:Transition" xmi:id="_QJXLQJawEemCgN1WwdiMbQ" name="" kind="external" source="_CZ9pkJtyEemI69k4e-oa_g" target="_sSjwsJdXEemu8v-9gGlQEg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_AL1d8Ja4EemCgN1WwdiMbQ" name="Effect" isReentrant="false">
                  <language>C++</language>
                  <body> std::cout&lt;&lt;&quot;[controller][compass]: &quot;&lt;&lt;compass &lt;&lt; &quot;\n&quot;;
__compass = compass;</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_FRGLwJaxEemCgN1WwdiMbQ" event="_2fMIkJauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_CVhyQJdQEemu8v-9gGlQEg" name="" kind="external" source="_wy3z0JdPEemu8v-9gGlQEg" target="_tPNrYJwnEemcmdsy3pl2Ng">
                <trigger xmi:type="uml:Trigger" xmi:id="_kVvjwJdaEemu8v-9gGlQEg" port="_xFvwEIieEeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_4GsKQJdQEemu8v-9gGlQEg" name="" kind="external" source="_sSnbEJdXEemu8v-9gGlQEg" target="_wy3z0JdPEemu8v-9gGlQEg"/>
              <transition xmi:type="uml:Transition" xmi:id="_GBSCkJdhEemu8v-9gGlQEg" kind="external" source="_Bd3KcJdQEemu8v-9gGlQEg" target="_JoaAoJnaEemHu_dwIWKvwA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_cJsVEJnbEemHu_dwIWKvwA" name="Effect" isReentrant="false">
                  <language>C++</language>
                  <body>
int __playerXINT = __playerX;
int __playerZINT = __playerZ;
int __prvPlayerXINT = __prvPlayerX;
int __prvPlayerZINT = __prvPlayerZ;
//__prvCompass = __compass;
orientation = 0;
__prvRotation = 360;
spinTime = 500000000;


std::cout&lt;&lt;&quot;[Range][abs(abs(__playerXINT) - abs(__prvPlayerXINT))]&quot;&lt;&lt; abs(abs(__playerXINT) - abs(__prvPlayerXINT)) &lt;&lt;&quot;\n&quot;;
std::cout&lt;&lt;&quot;[Range][abs(abs(__prvPlayerZINT) - abs(__ballZINT)]&quot;&lt;&lt; abs(abs(__playerZINT) - abs(__prvPlayerZINT)) &lt;&lt;&quot;\n&quot;;

if ( (abs(abs(__playerXINT) - abs(__prvPlayerXINT)) &lt; 1) &amp;&amp; (abs(abs(__playerZINT) - abs(__prvPlayerZINT)) &lt; 1))  
	ballAchiveable = false;
else 
	ballAchiveable = true;</body>
                </effect>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_HN0HIJdhEemu8v-9gGlQEg" name="" kind="external" source="_BcSNYJdhEemu8v-9gGlQEg" target="_5eMBIJwQEemI69k4e-oa_g">
                <trigger xmi:type="uml:Trigger" xmi:id="_OEKT4JdhEemu8v-9gGlQEg" port="_xFvwEIieEeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_d2NzMJdoEemu8v-9gGlQEg" kind="local" source="_KP3dwJavEemCgN1WwdiMbQ" target="_Nj4y0JwLEemI69k4e-oa_g"/>
              <transition xmi:type="uml:Transition" xmi:id="_BSTooJd6Eemu8v-9gGlQEg" kind="local" source="_5tDHcJd5Eemu8v-9gGlQEg" target="_Nj4y0JwLEemI69k4e-oa_g"/>
              <transition xmi:type="uml:Transition" xmi:id="_N9M2oJnaEemHu_dwIWKvwA" kind="external" source="_s0svQJnaEemHu_dwIWKvwA" target="_BcSNYJdhEemu8v-9gGlQEg"/>
              <transition xmi:type="uml:Transition" xmi:id="_b2VwsJnaEemHu_dwIWKvwA" guard="_inZYUJnbEemHu_dwIWKvwA" kind="external" source="_JoaAoJnaEemHu_dwIWKvwA" target="_BcSNYJdhEemu8v-9gGlQEg">
                <ownedRule xmi:type="uml:Constraint" xmi:id="_inZYUJnbEemHu_dwIWKvwA">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_inZ_YJnbEemHu_dwIWKvwA">
                    <language>C++</language>
                    <body>return ballAchiveable;</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_e6QNoJnaEemHu_dwIWKvwA" guard="_h3ciEJnbEemHu_dwIWKvwA" kind="external" source="_JoaAoJnaEemHu_dwIWKvwA" target="_s0pE4JnaEemHu_dwIWKvwA">
                <ownedRule xmi:type="uml:Constraint" xmi:id="_h3ciEJnbEemHu_dwIWKvwA">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_h3ciEZnbEemHu_dwIWKvwA">
                    <language>C++</language>
                    <body>return !ballAchiveable;</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_jq8-sJnpEemHu_dwIWKvwA" kind="local" source="_gESaAJnpEemHu_dwIWKvwA" target="_Nj4y0JwLEemI69k4e-oa_g"/>
              <transition xmi:type="uml:Transition" xmi:id="_Y4YDIJp8EemI69k4e-oa_g" kind="local" source="_sP01cJp7EemI69k4e-oa_g" target="_Nj4y0JwLEemI69k4e-oa_g"/>
              <transition xmi:type="uml:Transition" xmi:id="_OwMawJqTEemI69k4e-oa_g" kind="local" source="_CdYlUJqTEemI69k4e-oa_g" target="_Nj4y0JwLEemI69k4e-oa_g"/>
              <transition xmi:type="uml:Transition" xmi:id="_E5UW0JtEEemI69k4e-oa_g" kind="external" source="_6iVU4JtDEemI69k4e-oa_g" target="_5eVLEJwQEemI69k4e-oa_g"/>
              <transition xmi:type="uml:Transition" xmi:id="_UINIkJtUEemI69k4e-oa_g" kind="local" source="_LbU4AJtUEemI69k4e-oa_g" target="_Nj4y0JwLEemI69k4e-oa_g"/>
              <transition xmi:type="uml:Transition" xmi:id="_OorpMJtyEemI69k4e-oa_g" name="" kind="external" source="_5eh_YJwQEemI69k4e-oa_g" target="_CZ9pkJtyEemI69k4e-oa_g"/>
              <transition xmi:type="uml:Transition" xmi:id="_6_89kJwKEemI69k4e-oa_g" name="" kind="external" source="_pcAW8JwQEemI69k4e-oa_g" target="_pcAW8JwQEemI69k4e-oa_g">
                <trigger xmi:type="uml:Trigger" xmi:id="_A-v3QJwLEemI69k4e-oa_g" event="_puRa0JauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
                <trigger xmi:type="uml:Trigger" xmi:id="_A-62YJwLEemI69k4e-oa_g" event="_2fMIkJauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
                <trigger xmi:type="uml:Trigger" xmi:id="_-kW4cJwKEemI69k4e-oa_g" event="_g3LeUJauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_dNxRwJwLEemI69k4e-oa_g" kind="external" source="_Nj4y0JwLEemI69k4e-oa_g" target="_pcAW8JwQEemI69k4e-oa_g"/>
              <transition xmi:type="uml:Transition" xmi:id="_ul5o8JwQEemI69k4e-oa_g" name="" kind="external" source="_pcAW8JwQEemI69k4e-oa_g" target="_5edG4JwQEemI69k4e-oa_g">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_khT1MJwpEemcmdsy3pl2Ng" name="Effect" isReentrant="false">
                  <language>C++</language>
                  <body> std::cout&lt;&lt;&quot;[timeout tr took !] \n&quot;;</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_C1hHcJwSEemI69k4e-oa_g" port="_xFvwEIieEeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_zWYd8JwnEemcmdsy3pl2Ng" name="" kind="external" source="_tPNrYJwnEemcmdsy3pl2Ng" target="_Bd3KcJdQEemu8v-9gGlQEg">
                <trigger xmi:type="uml:Trigger" xmi:id="_0XjAAJwnEemcmdsy3pl2Ng" port="_xFvwEIieEeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_tBEy4JavEemCgN1WwdiMbQ" name="BALL_PLAYER_POS">
                <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_5eMBIJwQEemI69k4e-oa_g" name="from_STOP" kind="entryPoint"/>
                <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_5eVLEJwQEemI69k4e-oa_g" name="from_CALC_SPIN" kind="entryPoint"/>
                <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_5edG4JwQEemI69k4e-oa_g" name="from_wating" kind="entryPoint"/>
                <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_5eh_YJwQEemI69k4e-oa_g" name="to_compass" kind="exitPoint"/>
                <region xmi:type="uml:Region" xmi:id="_5eDeQJwQEemI69k4e-oa_g" name="Region1">
                  <transition xmi:type="uml:Transition" xmi:id="_-DFIoJwQEemI69k4e-oa_g" name="" kind="external" source="_6fqFMJwQEemI69k4e-oa_g" target="_8KaW0JwQEemI69k4e-oa_g">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_kiZuQJwREemI69k4e-oa_g" name="Effect" isReentrant="false">
                      <language>C++</language>
                      <body> std::cout&lt;&lt;&quot;[BALL_PLAYER_POS][UPDATE_PLAYER_POS][playerPos]: &quot;&lt;&lt;playerX &lt;&lt;&quot;,&quot;&lt;&lt;playerZ&lt;&lt; &quot;\n&quot;;

__prvPlayerX = __playerX;
__prvPlayerZ = __playerZ;

__playerX = playerX;
__playerZ = playerZ;



</body>
                    </effect>
                    <trigger xmi:type="uml:Trigger" xmi:id="_hdxqMJwSEemI69k4e-oa_g" event="_g3LeUJauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
                  </transition>
                  <transition xmi:type="uml:Transition" xmi:id="_Ksp4QJwREemI69k4e-oa_g" kind="local" source="_5edG4JwQEemI69k4e-oa_g" target="_UoyksJwmEemcmdsy3pl2Ng"/>
                  <transition xmi:type="uml:Transition" xmi:id="_L6YPoJwREemI69k4e-oa_g" name="" kind="external" source="_8KaW0JwQEemI69k4e-oa_g" target="_pmhj4JwbEemI69k4e-oa_g">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_eR6noJwREemI69k4e-oa_g" name="Effect" isReentrant="false">
                      <language>C++</language>
                      <body> std::cout&lt;&lt;&quot;[BALL_PLAYER_POS][UPDATE_BALL_POS][ballPos]: &quot;&lt;&lt;ballX &lt;&lt;&quot;,&quot;&lt;&lt;ballZ&lt;&lt; &quot;\n&quot;;
__ballX = ballX;
__ballZ = ballZ;



</body>
                    </effect>
                    <trigger xmi:type="uml:Trigger" xmi:id="_na0s4JwREemI69k4e-oa_g" event="_puRa0JauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
                  </transition>
                  <transition xmi:type="uml:Transition" xmi:id="_ObxOUJwREemI69k4e-oa_g" kind="local" source="_5eVLEJwQEemI69k4e-oa_g" target="_UoyksJwmEemcmdsy3pl2Ng"/>
                  <transition xmi:type="uml:Transition" xmi:id="_9_EV4JwREemI69k4e-oa_g" kind="local" source="_5eMBIJwQEemI69k4e-oa_g" target="_UoyksJwmEemcmdsy3pl2Ng"/>
                  <transition xmi:type="uml:Transition" xmi:id="_4C4fwJwbEemI69k4e-oa_g" name="" kind="external" source="_pmhj4JwbEemI69k4e-oa_g" target="_5eh_YJwQEemI69k4e-oa_g">
                    <trigger xmi:type="uml:Trigger" xmi:id="_419igJwbEemI69k4e-oa_g" port="_xFvwEIieEeiP-_qqZZR9Jg">
                      <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                    </trigger>
                  </transition>
                  <transition xmi:type="uml:Transition" xmi:id="_aWd5MJwmEemcmdsy3pl2Ng" name="" kind="external" source="_UoyksJwmEemcmdsy3pl2Ng" target="_6fqFMJwQEemI69k4e-oa_g">
                    <trigger xmi:type="uml:Trigger" xmi:id="_iPfq8JwmEemcmdsy3pl2Ng" port="_xFvwEIieEeiP-_qqZZR9Jg">
                      <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                    </trigger>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_6fqFMJwQEemI69k4e-oa_g" name="PLAYER_POS">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_S5nSoJwREemI69k4e-oa_g" name="Entry" isReentrant="false">
                      <language>C++</language>
                      <body> std::cout&lt;&lt;&quot;[BALL_PLAYER_POS][UPDATE_PLAYER_POS]: getPlayerPos() \n&quot;;
observationPort.getPlayerPos().send();</body>
                    </entry>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_8KaW0JwQEemI69k4e-oa_g" name="BALL_POS">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_XdoQYJwREemI69k4e-oa_g" name="Entry" isReentrant="false">
                      <language>C++</language>
                      <body> std::cout&lt;&lt;&quot;[BALL_PLAYER_POS][UPDATE_BALL_POS]: getBallPos() \n&quot;;
observationPort.getBallPos().send();</body>
                    </entry>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_pmhj4JwbEemI69k4e-oa_g" name="WAITING_FOR_SIGNAL">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_xSa4kJwbEemI69k4e-oa_g" name="Entry" isReentrant="false">
                      <language>C++</language>
                      <body> std::cout&lt;&lt;&quot;[WAITING FOR SIGNAL] \n&quot;;

ball_player_distance = sqrt(pow(__playerX - __ballX, 2) +  pow(__playerZ - __ballZ, 2) * 1.0);
std::cout&lt;&lt;&quot;[TRACKING]:[ball_player_distance]: &quot;&lt;&lt; ball_player_distance &lt;&lt; &quot; , [gotBall]:&quot; &lt;&lt; gotBall&lt;&lt; &quot; \n&quot;;
if ( (ball_player_distance &lt;= 2) &amp;&amp; (__playerX != 0 || __playerZ != 0))
	observationPort.getSignal(&quot;scoring&quot;).send();
else
	timerId = timer.informIn(UMLRTTimespec(0, 1000));

</body>
                    </entry>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_UoyksJwmEemcmdsy3pl2Ng" name="SET_SUCKTION">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_gOxJUJwmEemcmdsy3pl2Ng" name="Entry" isReentrant="false">
                      <language>C++</language>
                      <body>observationPort.setCommand(&quot;player2,setSuction(-100)&quot;).send();

std::cout&lt;&lt;&quot;[SUCK CMD 2]:[player2,setSuction(-100)] \n&quot;;
timerId = timer.informIn(UMLRTTimespec(0, 500000000));</body>
                    </entry>
                  </subvertex>
                </region>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_wy3z0JdPEemu8v-9gGlQEg" name="MOVE_FB">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_9hgNIJdQEemu8v-9gGlQEg" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body>std::string cmd = &quot;player2,moveForward(&quot;+std::to_string(100)+&quot;)&quot;;

char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();

std::cout&lt;&lt;&quot;[MOVE_FB CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;
timerId = timer.informIn(UMLRTTimespec(0, 2000000000));</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_Bd3KcJdQEemu8v-9gGlQEg" kind="junction"/>
              <subvertex xmi:type="uml:State" xmi:id="_As2u0JdREemu8v-9gGlQEg" name="CALC_SPIN_TO_BALL">
                <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_sSjwsJdXEemu8v-9gGlQEg" kind="entryPoint"/>
                <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_sSnbEJdXEemu8v-9gGlQEg" kind="exitPoint"/>
                <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_6iVU4JtDEemI69k4e-oa_g" kind="exitPoint"/>
                <region xmi:type="uml:Region" xmi:id="_sScb8JdXEemu8v-9gGlQEg" name="Region1">
                  <transition xmi:type="uml:Transition" xmi:id="_zULZUJdXEemu8v-9gGlQEg" kind="local" source="_sSjwsJdXEemu8v-9gGlQEg" target="_bofIUJtCEemI69k4e-oa_g"/>
                  <transition xmi:type="uml:Transition" xmi:id="_UHHzMJtDEemI69k4e-oa_g" name="" kind="external" source="_bofIUJtCEemI69k4e-oa_g" target="_KFdhAJtDEemI69k4e-oa_g">
                    <trigger xmi:type="uml:Trigger" xmi:id="_u7xhcJtDEemI69k4e-oa_g" port="_xFvwEIieEeiP-_qqZZR9Jg">
                      <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                    </trigger>
                  </transition>
                  <transition xmi:type="uml:Transition" xmi:id="_zElw8JtDEemI69k4e-oa_g" name="" kind="external" source="_KFdhAJtDEemI69k4e-oa_g" target="_3XHWEJtDEemI69k4e-oa_g">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_BuMoMJtQEemI69k4e-oa_g" name="Effect" isReentrant="false">
                      <language>C++</language>
                      <body>
if (spinPower == 0)
	compassAdjusted = false;
else
	compassAdjusted = true;</body>
                    </effect>
                    <trigger xmi:type="uml:Trigger" xmi:id="_-sm88JtDEemI69k4e-oa_g" port="_xFvwEIieEeiP-_qqZZR9Jg">
                      <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                    </trigger>
                  </transition>
                  <transition xmi:type="uml:Transition" xmi:id="_79WhYJtDEemI69k4e-oa_g" guard="_JIfPgJtQEemI69k4e-oa_g" kind="external" source="_3XHWEJtDEemI69k4e-oa_g" target="_6iVU4JtDEemI69k4e-oa_g">
                    <ownedRule xmi:type="uml:Constraint" xmi:id="_JIfPgJtQEemI69k4e-oa_g">
                      <specification xmi:type="uml:OpaqueExpression" xmi:id="_JIf2kJtQEemI69k4e-oa_g">
                        <language>C++</language>
                        <body>return compassAdjusted;</body>
                      </specification>
                    </ownedRule>
                  </transition>
                  <transition xmi:type="uml:Transition" xmi:id="_uI2LsJtvEemI69k4e-oa_g" name="" guard="_CUrDMJwdEemI69k4e-oa_g" kind="external" source="_3XHWEJtDEemI69k4e-oa_g" target="_sSnbEJdXEemu8v-9gGlQEg">
                    <ownedRule xmi:type="uml:Constraint" xmi:id="_CUrDMJwdEemI69k4e-oa_g">
                      <specification xmi:type="uml:OpaqueExpression" xmi:id="_CUrDMZwdEemI69k4e-oa_g">
                        <language>C++</language>
                        <body>return !compassAdjusted;</body>
                      </specification>
                    </ownedRule>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_bofIUJtCEemI69k4e-oa_g" name="CALC_ROTATION">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_4H1d0JtCEemI69k4e-oa_g" name="Entry" isReentrant="false">
                      <language>C++</language>
                      <body>std::cout&lt;&lt;&quot;[CALC_SPIN_TO_BALL][CALC_ROTATE]&quot;&lt;&lt;&quot;\n&quot;;

int __playerXINT = __playerX;
int __playerZINT = __playerZ;
int __ballXINT = __ballX;
int __ballZINT = __ballZ;


angle = atan2(__playerZ - __ballZ, __playerX - __ballX);
int angleINT = angle * 180 / 3.14;

//Rotation angle

if (angleINT &lt; 0 &amp;&amp; __compass > 180){
	if (__compass - 180 > abs (angleINT)){spinPower = -40; rotation = (__compass -180) - abs(angleINT);}
	else if (__compass - 180 &lt;= abs (angleINT)){spinPower = 40; rotation = abs(angleINT) - (__compass -180);}
}else if (angleINT &lt; 0 &amp;&amp; __compass &lt;= 180){
	spinPower = 40; rotation = abs(angleINT) + 180 - __compass;
}else if (angleINT > 0 &amp;&amp; __compass > 180){
	spinPower = -40; rotation = __compass - (180 - abs(angleINT));
}else if (angleINT > 0 &amp;&amp; __compass &lt; 180){
	if (180 - angleINT >  __compass){spinPower = 40; rotation = 180 - abs(angleINT) - __compass; }
	else if (180 - angleINT &lt;  __compass){spinPower = -40; rotation = __compass - (180 - abs(angleINT));}
}



std::cout&lt;&lt;&quot;[CALC_MOVMENT_TO_BALL][CALC_ROTATE] -------------> [angle]:&quot;&lt;&lt; angle * 180 / 3.14&lt;&lt;&quot;\n&quot;;
std::cout&lt;&lt;&quot;[CALC_MOVMENT_TO_BALL][CALC_ROTATE] -------------> [angleINT]:&quot;&lt;&lt; angleINT&lt;&lt;&quot;\n&quot;;
std::cout&lt;&lt;&quot;[CALC_MOVMENT_TO_BALL][CALC_ROTATE] -------------> [compass]:&quot;&lt;&lt; __compass &lt;&lt;&quot;\n&quot;;
std::cout&lt;&lt;&quot;[CALC_MOVMENT_TO_BALL][CALC_ROTATE] -------------> [__prvRotation]:&quot;&lt;&lt; __prvRotation &lt;&lt;&quot;\n&quot;;
std::cout&lt;&lt;&quot;[CALC_MOVMENT_TO_BALL][CALC_ROTATE] -------------> [rotation]:&quot;&lt;&lt; rotation &lt;&lt;&quot;\n&quot;;
std::cout&lt;&lt;&quot;[CALC_MOVMENT_TO_BALL][CALC_ROTATE] -------------> [spinPower]:&quot;&lt;&lt; spinPower &lt;&lt;&quot;\n&quot;;


if ( __prvRotation &lt; rotation) {spinPower = __prvSpinPower*-1; spinTime = 200000000;}
if (abs(rotation) &lt;5 ) {spinPower = 0;}

__prvRotation = rotation;
__prvSpinPower = spinPower;

std::string cmd = &quot;player2,spin(&quot;+std::to_string(spinPower)+&quot;)&quot;;
char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();
std::cout&lt;&lt;&quot;[MOVE_RL CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;


timer.informIn(UMLRTTimespec(0, spinTime));</body>
                    </entry>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_KFdhAJtDEemI69k4e-oa_g" name="STOP">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Qo-4YJtDEemI69k4e-oa_g" name="Entry" isReentrant="false">
                      <language>C++</language>
                      <body>std::cout&lt;&lt;&quot;[CALC_SPIN_TO_BALL][STOP] \n&quot;;

std::string cmd = &quot;player2,stop()&quot;;
char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();

std::cout&lt;&lt;&quot;[STOP CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;
timerId = timer.informIn(UMLRTTimespec(0, 500000000));</body>
                    </entry>
                  </subvertex>
                  <subvertex xmi:type="uml:Pseudostate" xmi:id="_3XHWEJtDEemI69k4e-oa_g" kind="choice"/>
                </region>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_BcSNYJdhEemu8v-9gGlQEg" name="STOP">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Ltv2IJdhEemu8v-9gGlQEg" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body>std::string cmd = &quot;player2,stop()&quot;;
char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();

std::cout&lt;&lt;&quot;[STOP CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;
timer.informIn(UMLRTTimespec(0, 500000000));


__prvPlayerX = __playerX;
__prvPlayerZ = __playerZ;</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_JoaAoJnaEemHu_dwIWKvwA" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_Mi2_kJnaEemHu_dwIWKvwA" name="SPIN">
                <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_s0pE4JnaEemHu_dwIWKvwA" kind="entryPoint"/>
                <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_s0svQJnaEemHu_dwIWKvwA" kind="exitPoint"/>
                <region xmi:type="uml:Region" xmi:id="_s0iXMJnaEemHu_dwIWKvwA" name="Region1">
                  <transition xmi:type="uml:Transition" xmi:id="_yiq-sJnaEemHu_dwIWKvwA" kind="local" source="_s0pE4JnaEemHu_dwIWKvwA" target="_t4-PsJnaEemHu_dwIWKvwA"/>
                  <transition xmi:type="uml:Transition" xmi:id="_zU_McJnaEemHu_dwIWKvwA" name="" kind="external" source="_t4-PsJnaEemHu_dwIWKvwA" target="_vcxkwJnaEemHu_dwIWKvwA">
                    <trigger xmi:type="uml:Trigger" xmi:id="_7pYrkJnaEemHu_dwIWKvwA" port="_xFvwEIieEeiP-_qqZZR9Jg">
                      <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                    </trigger>
                  </transition>
                  <transition xmi:type="uml:Transition" xmi:id="_18h2cJnaEemHu_dwIWKvwA" name="" kind="external" source="_vcxkwJnaEemHu_dwIWKvwA" target="_s0svQJnaEemHu_dwIWKvwA">
                    <trigger xmi:type="uml:Trigger" xmi:id="_80cwgJnaEemHu_dwIWKvwA" port="_xFvwEIieEeiP-_qqZZR9Jg">
                      <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                    </trigger>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_t4-PsJnaEemHu_dwIWKvwA" name="STOP">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_6nLnsJnaEemHu_dwIWKvwA" name="Entry" isReentrant="false">
                      <language>C++</language>
                      <body>std::string cmd = &quot;player2,stop()&quot;;
char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();

std::cout&lt;&lt;&quot;[STOP CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;
timerId = timer.informIn(UMLRTTimespec(0, 500000000));</body>
                    </entry>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_vcxkwJnaEemHu_dwIWKvwA" name="SPIN">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_4EjS4JnaEemHu_dwIWKvwA" name="Entry" isReentrant="false">
                      <language>C++</language>
                      <body>
std::string cmd = &quot;player2,spin(&quot;+std::to_string(40)+&quot;)&quot;;
char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();
std::cout&lt;&lt;&quot;[MOVE_RL CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;

timerId = timer.informIn(UMLRTTimespec(0, 500000000));</body>
                    </entry>
                  </subvertex>
                </region>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_CZ9pkJtyEemI69k4e-oa_g" name="GET_COMPASS">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_H0sz8JtyEemI69k4e-oa_g" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body> std::cout&lt;&lt;&quot;[controller -to observer]: getPlayerCompass() \n&quot;;
observationPort.getPlayerCompass().send();</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_Nj4y0JwLEemI69k4e-oa_g" kind="junction"/>
              <subvertex xmi:type="uml:State" xmi:id="_pcAW8JwQEemI69k4e-oa_g" name="WATING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_aVKcMJwnEemcmdsy3pl2Ng" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body> std::cout&lt;&lt;&quot;[IN WATING STATE] \n&quot;;

timerId = timer.informIn(UMLRTTimespec(0, 100000));</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_tPNrYJwnEemcmdsy3pl2Ng" name="MOVE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_wVZZMJwnEemcmdsy3pl2Ng" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body>std::string cmd = &quot;player2,moveForward(&quot;+std::to_string(100)+&quot;)&quot;;

char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();

std::cout&lt;&lt;&quot;[MOVE_FB CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;
timerId = timer.informIn(UMLRTTimespec(0, 2000000000));</body>
                </entry>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_TgbVEJatEemCgN1WwdiMbQ" name="GRABBING">
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_V3QOAJdnEemu8v-9gGlQEg" kind="entryPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_V3TRUJdnEemu8v-9gGlQEg" name="goScoring_exitPoint" kind="exitPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_sz3rAJd4Eemu8v-9gGlQEg" name="outOfRange_exitPoint" kind="exitPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_sPYwkJp7EemI69k4e-oa_g" name="goTracking_exitPoint" kind="exitPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_5DvVYJqSEemI69k4e-oa_g" kind="exitPoint"/>
            <region xmi:type="uml:Region" xmi:id="_V3NxwJdnEemu8v-9gGlQEg" name="Region1">
              <transition xmi:type="uml:Transition" xmi:id="_qEVyYJdnEemu8v-9gGlQEg" kind="local" source="_V3QOAJdnEemu8v-9gGlQEg" target="_XLutoJdnEemu8v-9gGlQEg"/>
              <transition xmi:type="uml:Transition" xmi:id="_q9n7EJd4Eemu8v-9gGlQEg" name="" kind="external" source="_XLutoJdnEemu8v-9gGlQEg" target="_gFG5YJd4Eemu8v-9gGlQEg">
                <trigger xmi:type="uml:Trigger" xmi:id="_3GDFcJd4Eemu8v-9gGlQEg" port="_xFvwEIieEeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_tcPSkJd4Eemu8v-9gGlQEg" name="NO" guard="_p0ghcJd5Eemu8v-9gGlQEg" kind="external" source="_gFG5YJd4Eemu8v-9gGlQEg" target="_sz3rAJd4Eemu8v-9gGlQEg">
                <ownedRule xmi:type="uml:Constraint" xmi:id="_p0ghcJd5Eemu8v-9gGlQEg">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_p0ghcZd5Eemu8v-9gGlQEg">
                    <language>C++</language>
                    <body>return !ballAchiveable;</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wOtkwJd5Eemu8v-9gGlQEg" name="Effect" isReentrant="false">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;&quot;NO&quot;&lt;&lt;&quot;\n&quot;;</body>
                </effect>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_wPO-oJd4Eemu8v-9gGlQEg" name="YES" guard="_qvyd8Jd5Eemu8v-9gGlQEg" kind="external" source="_gFG5YJd4Eemu8v-9gGlQEg" target="_n-cNIJd4Eemu8v-9gGlQEg">
                <ownedRule xmi:type="uml:Constraint" xmi:id="_qvyd8Jd5Eemu8v-9gGlQEg">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_qvyd8Zd5Eemu8v-9gGlQEg">
                    <language>C++</language>
                    <body>return ballAchiveable;</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_vCuSwJd5Eemu8v-9gGlQEg" name="Effect" isReentrant="false">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;&quot;YES&quot;&lt;&lt;&quot;\n&quot;;

</body>
                </effect>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_aHxLsJeNEemu8v-9gGlQEg" name="" kind="external" source="_n-cNIJd4Eemu8v-9gGlQEg" target="_3_GrAJeREemu8v-9gGlQEg">
                <trigger xmi:type="uml:Trigger" xmi:id="_nB9UwJeOEemu8v-9gGlQEg" port="_xFvwEIieEeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_a-5A8JeNEemu8v-9gGlQEg" guard="_XRKqoJeQEemu8v-9gGlQEg" kind="external" source="_Xlmw8JeNEemu8v-9gGlQEg" target="_EGH_0JeVEemu8v-9gGlQEg">
                <ownedRule xmi:type="uml:Constraint" xmi:id="_XRKqoJeQEemu8v-9gGlQEg">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_XRLRsJeQEemu8v-9gGlQEg">
                    <language>C++</language>
                    <body>return !compassAdjusted;</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="__-hgAJeOEemu8v-9gGlQEg" name="" kind="external" source="_vQxJQJeOEemu8v-9gGlQEg" target="_Xlmw8JeNEemu8v-9gGlQEg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_PoISIJePEemu8v-9gGlQEg" name="Effect" isReentrant="false">
                  <language>C++</language>
                  <body> std::cout&lt;&lt;&quot;[controller][compass]: &quot;&lt;&lt;compass &lt;&lt; &quot;\n&quot;;
//__prvCompass = __compass;
__compass = compass;

if (spinPower != 0)
	compassAdjusted = false;
else
	compassAdjusted = true;
</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_AyAycJePEemu8v-9gGlQEg" event="_2fMIkJauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_Af9jsJeQEemu8v-9gGlQEg" guard="_cxXj0JeQEemu8v-9gGlQEg" kind="external" source="_Xlmw8JeNEemu8v-9gGlQEg" target="_U3PH8JgWEemlgp8TkwLmkA">
                <ownedRule xmi:type="uml:Constraint" xmi:id="_cxXj0JeQEemu8v-9gGlQEg">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_cxXj0ZeQEemu8v-9gGlQEg">
                    <language>C++</language>
                    <body>return compassAdjusted;</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_A08DQJeSEemu8v-9gGlQEg" name="" kind="external" source="_3_GrAJeREemu8v-9gGlQEg" target="_vQxJQJeOEemu8v-9gGlQEg">
                <trigger xmi:type="uml:Trigger" xmi:id="_BishIJeSEemu8v-9gGlQEg" port="_xFvwEIieEeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_KyKaAJeVEemu8v-9gGlQEg" name="" kind="external" source="_EGH_0JeVEemu8v-9gGlQEg" target="_jabkQJgZEemlgp8TkwLmkA">
                <trigger xmi:type="uml:Trigger" xmi:id="_SvGbYJeVEemu8v-9gGlQEg" port="_xFvwEIieEeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_e7Y_YJgUEemlgp8TkwLmkA" name="" kind="external" source="_81130JeOEemu8v-9gGlQEg" target="_jyUAIJgWEemlgp8TkwLmkA">
                <trigger xmi:type="uml:Trigger" xmi:id="_iI9uoJgUEemlgp8TkwLmkA" port="_xFvwEIieEeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_cnnUAJgWEemlgp8TkwLmkA" name="" kind="external" source="_U3PH8JgWEemlgp8TkwLmkA" target="_81130JeOEemu8v-9gGlQEg">
                <trigger xmi:type="uml:Trigger" xmi:id="_dGUCMJgWEemlgp8TkwLmkA" port="_xFvwEIieEeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_6Rx20JgWEemlgp8TkwLmkA" name="" kind="external" source="_jyUAIJgWEemlgp8TkwLmkA" target="_mkvrgJgWEemlgp8TkwLmkA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_H61tgJgXEemlgp8TkwLmkA" name="Effect" isReentrant="false">
                  <language>C++</language>
                  <body> std::cout&lt;&lt;&quot;[UPDATE_PLAYER_POS][playerPos]: &quot;&lt;&lt;playerX &lt;&lt;&quot;,&quot;&lt;&lt;playerZ&lt;&lt; &quot;\n&quot;;



__playerX = playerX;
__playerZ = playerZ;
</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_AoHGwJgXEemlgp8TkwLmkA" event="_g3LeUJauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_9kHxUJgWEemlgp8TkwLmkA" name="" kind="external" source="_mkvrgJgWEemlgp8TkwLmkA" target="_8I-FIJgaEemlgp8TkwLmkA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_NpLwYJgXEemlgp8TkwLmkA" name="Effect" isReentrant="false">
                  <language>C++</language>
                  <body> std::cout&lt;&lt;&quot;[UPDATE_BALL_POS][ballPos]: &quot;&lt;&lt;ballX &lt;&lt;&quot;,&quot;&lt;&lt;ballZ&lt;&lt; &quot;\n&quot;;
__ballX = ballX;
__ballZ = ballZ;</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_DRIXcJgXEemlgp8TkwLmkA" event="_puRa0JauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_0Asy8JgZEemlgp8TkwLmkA" name="" kind="external" source="_jabkQJgZEemlgp8TkwLmkA" target="_mTYHUJgZEemlgp8TkwLmkA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_93Lv4JgZEemlgp8TkwLmkA" name="Effect" isReentrant="false">
                  <language>C++</language>
                  <body> std::cout&lt;&lt;&quot;[UPDATE_PLAYER_POS][playerPos]: &quot;&lt;&lt;playerX &lt;&lt;&quot;,&quot;&lt;&lt;playerZ&lt;&lt; &quot;\n&quot;;
__playerX = playerX;
__playerZ = playerZ;





</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_4bsXkJgZEemlgp8TkwLmkA" event="_g3LeUJauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_09YdoJgZEemlgp8TkwLmkA" name="" kind="external" source="_mTYHUJgZEemlgp8TkwLmkA" target="_gFG5YJd4Eemu8v-9gGlQEg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="__57qwJgZEemlgp8TkwLmkA" name="Effect" isReentrant="false">
                  <language>C++</language>
                  <body> std::cout&lt;&lt;&quot;[UPDATE_BALL_POS][ballPos]: &quot;&lt;&lt;ballX &lt;&lt;&quot;,&quot;&lt;&lt;ballZ&lt;&lt; &quot;\n&quot;;
__ballX = ballX;
__ballZ = ballZ;



int __playerXINT = __playerX;
int __playerZINT = __playerZ;
int __ballXINT = __ballX;
int __ballZINT = __ballZ;


std::cout&lt;&lt;&quot;[Range][abs(abs(__playerXINT) - abs(__ballXINT))]&quot;&lt;&lt; abs(abs(__playerXINT) - abs(__ballXINT)) &lt;&lt;&quot;\n&quot;;
std::cout&lt;&lt;&quot;[Range][abs(abs(__playerZINT) - abs(__ballZINT)]&quot;&lt;&lt; abs(abs(__playerZINT) - abs(__ballZINT)) &lt;&lt;&quot;\n&quot;;

if ( (abs(abs(__playerXINT) - abs(__ballXINT)) &lt; 20) &amp;&amp; (abs(abs(__playerZINT) - abs(__ballZINT)) &lt; 20))  
	ballAchiveable = true;
else 
	ballAchiveable = false;</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_66jmsJgZEemlgp8TkwLmkA" event="_puRa0JauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_CuUBcJgbEemlgp8TkwLmkA" name="" kind="external" source="_8I-FIJgaEemlgp8TkwLmkA" target="_XLutoJdnEemu8v-9gGlQEg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_RN7ssJgbEemlgp8TkwLmkA" name="Effect" isReentrant="false">
                  <language>C++</language>
                  <body> std::cout&lt;&lt;&quot;[UPDATE_COMPASS_2][compass]: &quot;&lt;&lt;compass &lt;&lt; &quot;\n&quot;;
__compass = compass;</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_DMM3UJgbEemlgp8TkwLmkA" event="_2fMIkJauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_1L24QJtrEemI69k4e-oa_g" name="" kind="external" source="_XLutoJdnEemu8v-9gGlQEg" target="_XLutoJdnEemu8v-9gGlQEg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_6mptAJtrEemI69k4e-oa_g" name="Effect" isReentrant="false">
                  <language>C++</language>
                  <body>msg->defer();</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_-G7V0JtrEemI69k4e-oa_g" event="_puRa0JauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
                <trigger xmi:type="uml:Trigger" xmi:id="_-G_AMJtrEemI69k4e-oa_g" event="_2fMIkJauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
                <trigger xmi:type="uml:Trigger" xmi:id="_7iJr8JtrEemI69k4e-oa_g" event="_g3LeUJauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_XLutoJdnEemu8v-9gGlQEg" name="IS_BALL_ACHIVEABLE">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_pLmzkJdnEemu8v-9gGlQEg" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;&quot;[Is the ball still in the range ?!]&quot;&lt;&lt;&quot;\n&quot;;

int __playerXINT = __playerX;
int __playerZINT = __playerZ;
int __ballXINT = __ballX;
int __ballZINT = __ballZ;
//__prvCompass = __compass;
orientation = 0;
__prvRotation = 360;
spinTime = 500000000;


std::cout&lt;&lt;&quot;[Range][abs(abs(__playerXINT) - abs(__ballXINT))]&quot;&lt;&lt; abs(abs(__playerXINT) - abs(__ballXINT)) &lt;&lt;&quot;\n&quot;;
std::cout&lt;&lt;&quot;[Range][abs(abs(__playerZINT) - abs(__ballZINT)]&quot;&lt;&lt; abs(abs(__playerZINT) - abs(__ballZINT)) &lt;&lt;&quot;\n&quot;;

if ( (abs(abs(__playerXINT) - abs(__ballXINT)) &lt; 20) &amp;&amp; (abs(abs(__playerZINT) - abs(__ballZINT)) &lt; 20))  
	ballAchiveable = true;
else 
	ballAchiveable = false;

/*
if ((abs(abs(__playerXINT) - abs(__ballXINT)) &lt;= 2) &amp;&amp; (abs(abs(__playerZINT) - abs(__ballZINT)) &lt;= 2))
{
	observationPort.getSignal(&quot;scoring&quot;).send();
}else{
	observationPort.setCommand(&quot;player2,setsetSuction(-100)&quot;).send();
	std::cout&lt;&lt;&quot;[SUCK CMD]:[player2,setsetSuction(-100)] \n&quot;;
}*/

timerId = timer.informIn(UMLRTTimespec(0, 1000));</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_gFG5YJd4Eemu8v-9gGlQEg" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_n-cNIJd4Eemu8v-9gGlQEg" name="CALC_SPIN">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_BQVIIJd5Eemu8v-9gGlQEg" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;&quot;[CALC SPIN]&quot;&lt;&lt;&quot;\n&quot;;

int __playerXINT = __playerX;
int __playerZINT = __playerZ;
int __ballXINT = __ballX;
int __ballZINT = __ballZ;


angle = atan2(__playerZ - __ballZ, __playerX - __ballX);
int angleINT = angle * 180 / 3.14;

//Rotation angle

if (angleINT &lt; 0 &amp;&amp; __compass > 180){
	if (__compass - 180 > abs (angleINT)){spinPower = -40; rotation = (__compass -180) - abs(angleINT);}
	else if (__compass - 180 &lt;= abs (angleINT)){spinPower = 40; rotation = abs(angleINT) - (__compass -180);}
}else if (angleINT &lt; 0 &amp;&amp; __compass &lt;= 180){
	spinPower = 40; rotation = abs(angleINT) + 180 - __compass;
}else if (angleINT > 0 &amp;&amp; __compass > 180){
	spinPower = -40; rotation = __compass - (180 - abs(angleINT));
}else if (angleINT > 0 &amp;&amp; __compass &lt; 180){
	if (180 - angleINT >  __compass){spinPower = 40; rotation = 180 - abs(angleINT) - __compass; }
	else if (180 - angleINT &lt;  __compass){spinPower = -40; rotation = __compass - (180 - abs(angleINT));}
}



std::cout&lt;&lt;&quot;-------------> [angle]:&quot;&lt;&lt; angle * 180 / 3.14&lt;&lt;&quot;\n&quot;;
std::cout&lt;&lt;&quot;-------------> [angleINT]:&quot;&lt;&lt; angleINT&lt;&lt;&quot;\n&quot;;
std::cout&lt;&lt;&quot;-------------> [compass]:&quot;&lt;&lt; __compass &lt;&lt;&quot;\n&quot;;
std::cout&lt;&lt;&quot;-------------> [__prvRotation]:&quot;&lt;&lt; __prvRotation &lt;&lt;&quot;\n&quot;;
std::cout&lt;&lt;&quot;-------------> [rotation]:&quot;&lt;&lt; rotation &lt;&lt;&quot;\n&quot;;
std::cout&lt;&lt;&quot;-------------> [spinPower]:&quot;&lt;&lt; spinPower &lt;&lt;&quot;\n&quot;;


if ( __prvRotation &lt; rotation) {spinPower = __prvSpinPower*-1; spinTime = 300000000;}
if (abs(rotation) &lt;5 ) {spinPower = 0;}

__prvRotation = rotation;
__prvSpinPower = spinPower;

std::string cmd = &quot;player2,spin(&quot;+std::to_string(spinPower)+&quot;)&quot;;
char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();
std::cout&lt;&lt;&quot;[MOVE_RL CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;


timer.informIn(UMLRTTimespec(0, spinTime));</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_Xlmw8JeNEemu8v-9gGlQEg" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_vQxJQJeOEemu8v-9gGlQEg" name="UPDATE_COMPASS">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_2XmpEJeOEemu8v-9gGlQEg" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body> std::cout&lt;&lt;&quot;[controller to observer]: getPlayerCompass() \n&quot;;
observationPort.getPlayerCompass().send();</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_81130JeOEemu8v-9gGlQEg" name="GRAB_BALL">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_cBMgkJePEemu8v-9gGlQEg" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;&quot;[GRAB BALL]&quot;&lt;&lt;&quot;\n&quot;;

std::string cmd = &quot;player2,moveForward(&quot;+std::to_string(100)+&quot;)&quot;;

char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();

std::cout&lt;&lt;&quot;[MOVE_FB CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;
timerId = timer.informIn(UMLRTTimespec(0, 800000000));</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_3_GrAJeREemu8v-9gGlQEg" name="STOP">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_5Z84YJeREemu8v-9gGlQEg" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body>std::string cmd = &quot;player2,stop()&quot;;
char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();

std::cout&lt;&lt;&quot;[STOP CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;
timerId = timer.informIn(UMLRTTimespec(0, 500000000));</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_EGH_0JeVEemu8v-9gGlQEg" name="SET_SUCKTION1">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_NEHOgJeVEemu8v-9gGlQEg" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body>observationPort.setCommand(&quot;player2,setSuction(-100)&quot;).send();

std::cout&lt;&lt;&quot;[SUCK CMD 1]:[player2,setSuction(-100)] \n&quot;;
timerId = timer.informIn(UMLRTTimespec(0, 500000000));</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_U3PH8JgWEemlgp8TkwLmkA" name="SET_SUCKTION2">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_WlHmEJgWEemlgp8TkwLmkA" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body>observationPort.setCommand(&quot;player2,setSuction(-100)&quot;).send();

std::cout&lt;&lt;&quot;[SUCK CMD 2]:[player2,setSuction(-100)] \n&quot;;
timerId = timer.informIn(UMLRTTimespec(0, 500000000));</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_jyUAIJgWEemlgp8TkwLmkA" name="UPDATE_PLAYER_POS">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_xKBBEJgWEemlgp8TkwLmkA" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body> std::cout&lt;&lt;&quot;[UPDATE_PLAYER_POS]: getPlayerPos() \n&quot;;
observationPort.getPlayerPos().send();</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_mkvrgJgWEemlgp8TkwLmkA" name="UPDATE_BALL_POS">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_0UHlkJgWEemlgp8TkwLmkA" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body>int __prvPlayerXINT = __prvPlayerX;
int __prvPlayerZINT = __prvPlayerZ;
int __playerXINT = __playerX;
int __playerZINT = __playerZ;


std::cout&lt;&lt;&quot;[Range][abs(abs(__playerXINT) - abs(__prvPlayerXINT))]&quot;&lt;&lt; abs(abs(__playerXINT) - abs(__prvPlayerXINT)) &lt;&lt;&quot;\n&quot;;
std::cout&lt;&lt;&quot;[Range][abs(abs(__playerZINT) - abs(__prvPlayerZINT)]&quot;&lt;&lt; abs(abs(__playerZINT) - abs(__prvPlayerZINT)) &lt;&lt;&quot;\n&quot;;

if ( (abs(abs(__playerXINT) - abs(__prvPlayerXINT)) &lt; 1) &amp;&amp; (abs(abs(__playerZINT) - abs(__prvPlayerZINT)) &lt; 1)){  
	observationPort.getSignal(&quot;random&quot;).send();}
else{
	__prvPlayerX = __playerX;
	__prvPlayerZ = __playerZ;
	std::cout&lt;&lt;&quot;[UPDATE_BALL_POS]: getBallPos() \n&quot;;
	observationPort.getBallPos().send();
}

</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_jabkQJgZEemlgp8TkwLmkA" name="UPDATE_PLAYER_POS_2">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_lt7Q4JgZEemlgp8TkwLmkA" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body> std::cout&lt;&lt;&quot;[UPDATE_PLAYER_POS 2]: getPlayerPos() \n&quot;;
observationPort.getPlayerPos().send();</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_mTYHUJgZEemlgp8TkwLmkA" name="UPDATE_BALL_POS_2">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_o5t3cJgZEemlgp8TkwLmkA" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;&quot;[UPDATE_BALL_POS 2]: getBallPos() \n&quot;;
observationPort.getBallPos().send();

</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_8I-FIJgaEemlgp8TkwLmkA" name="UPDATE_COMPASS_2">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Gjb44JgbEemlgp8TkwLmkA" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body> std::cout&lt;&lt;&quot;[UPDATE_COMPASS_2]: getPlayerCompass() \n&quot;;
observationPort.getPlayerCompass().send();
</body>
                </entry>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_ZQlV0JatEemCgN1WwdiMbQ" name="SCORING">
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_YgnkgJeJEemu8v-9gGlQEg" kind="entryPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_6TOrkJnHEemHu_dwIWKvwA" name="goTracking_exitPoint" kind="exitPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_A5VooJnjEemHu_dwIWKvwA" name="from_tracking" kind="entryPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_eOk1kJnpEemHu_dwIWKvwA" name="outOfRange_exitPoint" kind="exitPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_mioxsJqSEemI69k4e-oa_g" kind="exitPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_3wTc0JwtEemcmdsy3pl2Ng" kind="exitPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_3wY8YJwtEemcmdsy3pl2Ng" kind="entryPoint"/>
            <region xmi:type="uml:Region" xmi:id="_YglIQJeJEemu8v-9gGlQEg" name="Region1">
              <transition xmi:type="uml:Transition" xmi:id="_cC9C0JeJEemu8v-9gGlQEg" kind="local" source="_YgnkgJeJEemu8v-9gGlQEg" target="_6BvoQJnuEemHu_dwIWKvwA"/>
              <transition xmi:type="uml:Transition" xmi:id="_JkRsQJjiEemlgp8TkwLmkA" name="" kind="external" source="_VM97wJjkEemlgp8TkwLmkA" target="_UqlSUJjiEemlgp8TkwLmkA"/>
              <transition xmi:type="uml:Transition" xmi:id="_wDiE8JnpEemHu_dwIWKvwA" kind="external" source="_O-zfwJnpEemHu_dwIWKvwA" target="_eOk1kJnpEemHu_dwIWKvwA"/>
              <transition xmi:type="uml:Transition" xmi:id="_99qEMJnuEemHu_dwIWKvwA" kind="external" source="_6BvoQJnuEemHu_dwIWKvwA" target="_VM64cJjkEemlgp8TkwLmkA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_fj5MQJn1EemHu_dwIWKvwA" name="Effect" isReentrant="false">
                  <language>C++</language>
                  <body>__prvRotation = 360;
__prvCompass = __compass +10;</body>
                </effect>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="__efk0JnuEemHu_dwIWKvwA" kind="local" source="_A5VooJnjEemHu_dwIWKvwA" target="_6BvoQJnuEemHu_dwIWKvwA"/>
              <transition xmi:type="uml:Transition" xmi:id="_DjhzQJwuEemcmdsy3pl2Ng" kind="local" source="_3wY8YJwtEemcmdsy3pl2Ng" target="_6BvoQJnuEemHu_dwIWKvwA"/>
              <subvertex xmi:type="uml:State" xmi:id="_ZiiUgJeJEemu8v-9gGlQEg" name="ROTATION_TOWARDS_GOAL">
                <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_VM64cJjkEemlgp8TkwLmkA" kind="entryPoint"/>
                <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_VM97wJjkEemlgp8TkwLmkA" kind="exitPoint"/>
                <region xmi:type="uml:Region" xmi:id="_VM3OEJjkEemlgp8TkwLmkA" name="Region1">
                  <transition xmi:type="uml:Transition" xmi:id="_eFjtEJjkEemlgp8TkwLmkA" kind="local" source="_VM64cJjkEemlgp8TkwLmkA" target="_2EQDIJwLEemI69k4e-oa_g"/>
                  <transition xmi:type="uml:Transition" xmi:id="_ekRCUJjkEemlgp8TkwLmkA" name="" kind="external" source="_WrQesJjkEemlgp8TkwLmkA" target="_ZCQyUJjkEemlgp8TkwLmkA">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_zrJ8gJjkEemlgp8TkwLmkA" name="Effect" isReentrant="false">
                      <language>C++</language>
                      <body> std::cout&lt;&lt;&quot;[compass]: &quot;&lt;&lt;compass &lt;&lt; &quot;\n&quot;;
__compass = compass;
</body>
                    </effect>
                    <trigger xmi:type="uml:Trigger" xmi:id="_tFWGIJjkEemlgp8TkwLmkA" event="_2fMIkJauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
                  </transition>
                  <transition xmi:type="uml:Transition" xmi:id="_fHcA0JjkEemlgp8TkwLmkA" name="" kind="external" source="_ZCQyUJjkEemlgp8TkwLmkA" target="_b4A3cJjkEemlgp8TkwLmkA">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_7m3O0JjkEemlgp8TkwLmkA" name="Effect" isReentrant="false">
                      <language>C++</language>
                      <body> std::cout&lt;&lt;&quot;[UPDATE_PLAYER_POS][playerPos]: &quot;&lt;&lt;playerX &lt;&lt;&quot;,&quot;&lt;&lt;playerZ&lt;&lt; &quot;\n&quot;;
__playerX = playerX;
__playerZ = playerZ;
</body>
                    </effect>
                    <trigger xmi:type="uml:Trigger" xmi:id="_5hfdwJjkEemlgp8TkwLmkA" event="_g3LeUJauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
                  </transition>
                  <transition xmi:type="uml:Transition" xmi:id="_ja2WwJjkEemlgp8TkwLmkA" name="" kind="external" source="_b4A3cJjkEemlgp8TkwLmkA" target="_i3mpYJqdEemI69k4e-oa_g">
                    <trigger xmi:type="uml:Trigger" xmi:id="_BdUE0JjlEemlgp8TkwLmkA" port="_xFvwEIieEeiP-_qqZZR9Jg">
                      <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                    </trigger>
                  </transition>
                  <transition xmi:type="uml:Transition" xmi:id="_yDx4oJqdEemI69k4e-oa_g" name="" kind="external" source="_i3mpYJqdEemI69k4e-oa_g" target="_wIJSYJqdEemI69k4e-oa_g">
                    <trigger xmi:type="uml:Trigger" xmi:id="_G6uSUJqeEemI69k4e-oa_g" port="_xFvwEIieEeiP-_qqZZR9Jg">
                      <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                    </trigger>
                  </transition>
                  <transition xmi:type="uml:Transition" xmi:id="_zy0NUJqdEemI69k4e-oa_g" name="" kind="external" source="_wIJSYJqdEemI69k4e-oa_g" target="_zNHfQJqdEemI69k4e-oa_g">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Ciz24JqeEemI69k4e-oa_g" name="Effect" isReentrant="false">
                      <language>C++</language>
                      <body>if (spinPower == 0)
	compassAdjusted = false;
else
	compassAdjusted = true;</body>
                    </effect>
                    <trigger xmi:type="uml:Trigger" xmi:id="_IAr00JqeEemI69k4e-oa_g" port="_xFvwEIieEeiP-_qqZZR9Jg">
                      <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                    </trigger>
                  </transition>
                  <transition xmi:type="uml:Transition" xmi:id="_1YysoJqdEemI69k4e-oa_g" guard="_S5ntQJqeEemI69k4e-oa_g" kind="external" source="_zNHfQJqdEemI69k4e-oa_g" target="_WrQesJjkEemlgp8TkwLmkA">
                    <ownedRule xmi:type="uml:Constraint" xmi:id="_S5ntQJqeEemI69k4e-oa_g">
                      <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5ntQZqeEemI69k4e-oa_g">
                        <language>C++</language>
                        <body>return compassAdjusted;</body>
                      </specification>
                    </ownedRule>
                  </transition>
                  <transition xmi:type="uml:Transition" xmi:id="_QeGGAJqeEemI69k4e-oa_g" guard="_RpwA0JqeEemI69k4e-oa_g" kind="external" source="_zNHfQJqdEemI69k4e-oa_g" target="_VM97wJjkEemlgp8TkwLmkA">
                    <ownedRule xmi:type="uml:Constraint" xmi:id="_RpwA0JqeEemI69k4e-oa_g">
                      <specification xmi:type="uml:OpaqueExpression" xmi:id="_RpwA0ZqeEemI69k4e-oa_g">
                        <language>C++</language>
                        <body>return !compassAdjusted;</body>
                      </specification>
                    </ownedRule>
                  </transition>
                  <transition xmi:type="uml:Transition" xmi:id="_9YRqYJwLEemI69k4e-oa_g" name="" kind="external" source="_2EQDIJwLEemI69k4e-oa_g" target="_WrQesJjkEemlgp8TkwLmkA">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_k8dYwJwsEemcmdsy3pl2Ng" name="Effect" isReentrant="false">
                      <language>C++</language>
                      <body> std::cout&lt;&lt;&quot;[timeout tr took !] \n&quot;;</body>
                    </effect>
                    <trigger xmi:type="uml:Trigger" xmi:id="_B8Z84JwMEemI69k4e-oa_g" port="_xFvwEIieEeiP-_qqZZR9Jg">
                      <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                    </trigger>
                  </transition>
                  <transition xmi:type="uml:Transition" xmi:id="_ILTIEJwMEemI69k4e-oa_g" name="" kind="external" source="_2EQDIJwLEemI69k4e-oa_g" target="_2EQDIJwLEemI69k4e-oa_g">
                    <trigger xmi:type="uml:Trigger" xmi:id="_ODbZEJwMEemI69k4e-oa_g" event="_puRa0JauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
                    <trigger xmi:type="uml:Trigger" xmi:id="_ODqpoJwMEemI69k4e-oa_g" event="_2fMIkJauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
                    <trigger xmi:type="uml:Trigger" xmi:id="_LjJNoJwMEemI69k4e-oa_g" event="_g3LeUJauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
                  </transition>
                  <subvertex xmi:type="uml:State" xmi:id="_WrQesJjkEemlgp8TkwLmkA" name="UPDATE_COMPASS">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_n9ZU4JjkEemlgp8TkwLmkA" name="Entry" isReentrant="false">
                      <language>C++</language>
                      <body> std::cout&lt;&lt;&quot;[UPDATE_COMPASS]: getPlayerCompass() \n&quot;;
observationPort.getPlayerCompass().send();</body>
                    </entry>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_ZCQyUJjkEemlgp8TkwLmkA" name="UPDATE_PLAYER_POS">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_2cTOcJjkEemlgp8TkwLmkA" name="Entry" isReentrant="false">
                      <language>C++</language>
                      <body> std::cout&lt;&lt;&quot;[UPDATE_PLAYER_POS]: getPlayerPos() \n&quot;;

/*
int __prvCompassINT = __prvCompass;
int __compassINT = __compass;

if (abs(__prvCompassINT - __compassINT) &lt;1){
	observationPort.getSignal(&quot;random&quot;).send();
}else{
*/
observationPort.getPlayerPos().send();
__prvCompass = __compass;

//}

</body>
                    </entry>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_b4A3cJjkEemlgp8TkwLmkA" name="CALC_ROTATION">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_AKZrcJjlEemlgp8TkwLmkA" name="Entry" isReentrant="false">
                      <language>C++</language>
                      <body>std::cout&lt;&lt;&quot;[CALC_ROTATION TOWARDS THE GOAL] \n&quot;;


angle = atan2(__playerZ - goalZ, __playerX - goalX);
int angleINT = angle * 180 / 3.14;

std::cout&lt;&lt;&quot;========> [CALC_ROTATION TOWARDS THE GOAL][angleINT]: &quot;&lt;&lt; angleINT&lt;&lt; &quot;\n&quot;;

//Rotation angle

if (angleINT &lt; 0 &amp;&amp; __compass > 180){
	if (__compass - 180 > abs (angleINT)){spinPower = -50; rotation = (__compass -180) - abs(angleINT);}
	else if (__compass - 180 &lt;= abs (angleINT)){spinPower = 50; rotation = abs(angleINT) - (__compass -180);}
}else if (angleINT &lt; 0 &amp;&amp; __compass &lt;= 180){
	spinPower = 50; rotation = abs(angleINT) + 180 - __compass;
}else if (angleINT > 0 &amp;&amp; __compass > 180){
	spinPower = -50; rotation = __compass - (180 - abs(angleINT));
}else if (angleINT > 0 &amp;&amp; __compass &lt; 180){
	if (180 - angleINT >  __compass){spinPower = 50; rotation = 180 - abs(angleINT) - __compass; }
	else if (180 - angleINT &lt;  __compass){spinPower = -50; rotation = __compass - (180 - abs(angleINT));}
}

	spinTime = 500000000;
	timerId = timer.informIn(UMLRTTimespec(0, 1000));



</body>
                    </entry>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_i3mpYJqdEemI69k4e-oa_g" name="ROTATE">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_vondwJqdEemI69k4e-oa_g" name="Entry" isReentrant="false">
                      <language>C++</language>
                      <body>std::cout&lt;&lt;&quot;[CALC_ROTATION][ROTATE] \n&quot;;

spinTime = 300000000;
if (abs(rotation) &lt;7 ) {spinPower = 0;}
//else if ( abs(__prvRotation) &lt; abs(rotation)) {spinPower = __prvSpinPower*-1; spinTime = 100000000;}

std::cout&lt;&lt;__prvRotation&lt;&lt;&quot; -----------> [CALC_ROTATION TOWARDS THE GOAL][rotation]: &quot;&lt;&lt; rotation &lt;&lt; &quot; [spinPower]: &quot; &lt;&lt; spinPower&lt;&lt;&quot; \n&quot;;

__prvRotation = rotation;
if (spinPower != 0)
	__prvSpinPower = spinPower;

std::string cmd = &quot;player2,spin(&quot;+std::to_string(spinPower)+&quot;)&quot;;
char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();
std::cout&lt;&lt;&quot;[MOVE_RL CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;


timerId = timer.informIn(UMLRTTimespec(0, spinTime));</body>
                    </entry>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_wIJSYJqdEemI69k4e-oa_g" name="STOP">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_9xyX4JqdEemI69k4e-oa_g" name="Entry" isReentrant="false">
                      <language>C++</language>
                      <body>std::cout&lt;&lt;&quot;[CALC_ROTATION][STOP] \n&quot;;

std::string cmd = &quot;player2,stop()&quot;;
char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();

std::cout&lt;&lt;&quot;[STOP CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;
timerId = timer.informIn(UMLRTTimespec(0, 500000000));</body>
                    </entry>
                  </subvertex>
                  <subvertex xmi:type="uml:Pseudostate" xmi:id="_zNHfQJqdEemI69k4e-oa_g" kind="choice"/>
                  <subvertex xmi:type="uml:State" xmi:id="_2EQDIJwLEemI69k4e-oa_g" name="WAITING">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_cfO5UJwiEemI69k4e-oa_g" name="Entry" isReentrant="false">
                      <language>C++</language>
                      <body> std::cout&lt;&lt;&quot;[CALC_ROTATION][WAITING] \n&quot;;
timerId = timer.informIn(UMLRTTimespec(0, 100000));
timerId = timer.informIn(UMLRTTimespec(0, 100000));</body>
                    </entry>
                  </subvertex>
                </region>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_EZiswJjiEemlgp8TkwLmkA" name="MOVE_TO_GOAL">
                <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_UqlSUJjiEemlgp8TkwLmkA" kind="entryPoint"/>
                <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_O-zfwJnpEemHu_dwIWKvwA" name="outOfRange_exitPoint" kind="exitPoint"/>
                <region xmi:type="uml:Region" xmi:id="_UqcvcJjiEemlgp8TkwLmkA" name="Region1">
                  <transition xmi:type="uml:Transition" xmi:id="_IYCGIJjjEemlgp8TkwLmkA" kind="external" source="_UqlSUJjiEemlgp8TkwLmkA" target="_FB7tAJjjEemlgp8TkwLmkA"/>
                  <transition xmi:type="uml:Transition" xmi:id="_Hp4D8JnFEemHu_dwIWKvwA" name="" kind="external" source="_FB7tAJjjEemlgp8TkwLmkA" target="_6ASzYJnFEemHu_dwIWKvwA">
                    <trigger xmi:type="uml:Trigger" xmi:id="_V-HloJnFEemHu_dwIWKvwA" port="_xFvwEIieEeiP-_qqZZR9Jg">
                      <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                    </trigger>
                  </transition>
                  <transition xmi:type="uml:Transition" xmi:id="_CjVLcJnGEemHu_dwIWKvwA" name="" kind="external" source="_6ASzYJnFEemHu_dwIWKvwA" target="_zTCBcJnWEemHu_dwIWKvwA">
                    <effect xmi:type="uml:OpaqueBehavior" xmi:id="_D4G9UJnXEemHu_dwIWKvwA" name="Effect" isReentrant="false">
                      <language>C++</language>
                      <body>
orientation = 0;
__prvRotation = 360;
spinTime = 500000000;
</body>
                    </effect>
                    <trigger xmi:type="uml:Trigger" xmi:id="_DmlYMJnGEemHu_dwIWKvwA" port="_xFvwEIieEeiP-_qqZZR9Jg">
                      <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                    </trigger>
                  </transition>
                  <transition xmi:type="uml:Transition" xmi:id="_3WGOQJnWEemHu_dwIWKvwA" guard="_lOvx4JnXEemHu_dwIWKvwA" kind="external" source="_zTCBcJnWEemHu_dwIWKvwA" target="_JryuAJnpEemHu_dwIWKvwA">
                    <ownedRule xmi:type="uml:Constraint" xmi:id="_lOvx4JnXEemHu_dwIWKvwA">
                      <specification xmi:type="uml:OpaqueExpression" xmi:id="_lOwY8JnXEemHu_dwIWKvwA">
                        <language>C++</language>
                        <body>return !goalAchiveable;</body>
                      </specification>
                    </ownedRule>
                  </transition>
                  <transition xmi:type="uml:Transition" xmi:id="_6eI9QJnWEemHu_dwIWKvwA" guard="_kDA-kJnXEemHu_dwIWKvwA" kind="external" source="_zTCBcJnWEemHu_dwIWKvwA" target="_cOohYJqJEemI69k4e-oa_g">
                    <ownedRule xmi:type="uml:Constraint" xmi:id="_kDA-kJnXEemHu_dwIWKvwA">
                      <specification xmi:type="uml:OpaqueExpression" xmi:id="_kDA-kZnXEemHu_dwIWKvwA">
                        <language>C++</language>
                        <body>return goalAchiveable;</body>
                      </specification>
                    </ownedRule>
                  </transition>
                  <transition xmi:type="uml:Transition" xmi:id="_3VWswJnpEemHu_dwIWKvwA" kind="external" source="_3VSbUJnpEemHu_dwIWKvwA" target="_O-zfwJnpEemHu_dwIWKvwA"/>
                  <transition xmi:type="uml:Transition" xmi:id="_m2eDAJnqEemHu_dwIWKvwA" kind="external" source="_MSCiEJnqEemHu_dwIWKvwA" target="_FB7tAJjjEemlgp8TkwLmkA"/>
                  <subvertex xmi:type="uml:State" xmi:id="_FB7tAJjjEemlgp8TkwLmkA" name="MOVE_FORWARD">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Ebrd8JjmEemlgp8TkwLmkA" name="Entry" isReentrant="false">
                      <language>C++</language>
                      <body>std::cout&lt;&lt;&quot;[MOVE_TO_GOAL][MOVE_FORWARD] \n&quot;;

std::string cmd = &quot;player2,moveForward(&quot;+std::to_string(100)+&quot;)&quot;;

char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();

std::cout&lt;&lt;&quot;[MOVE_FB CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;
timerId = timer.informIn(UMLRTTimespec(0, 1500000000));</body>
                    </entry>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_Exru0JnFEemHu_dwIWKvwA" name="SHOOT">
                    <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_cOohYJqJEemI69k4e-oa_g" kind="entryPoint"/>
                    <region xmi:type="uml:Region" xmi:id="_cOewYJqJEemI69k4e-oa_g" name="Region1">
                      <transition xmi:type="uml:Transition" xmi:id="_CyV3wJqKEemI69k4e-oa_g" kind="local" source="_cOohYJqJEemI69k4e-oa_g" target="__U_AEJqJEemI69k4e-oa_g"/>
                      <transition xmi:type="uml:Transition" xmi:id="_EZVDsJqKEemI69k4e-oa_g" name="" kind="external" source="__U_AEJqJEemI69k4e-oa_g" target="_jZCSkJqJEemI69k4e-oa_g">
                        <effect xmi:type="uml:OpaqueBehavior" xmi:id="_vZD5cJqKEemI69k4e-oa_g" name="Effect" isReentrant="false">
                          <language>C++</language>
                          <body> std::cout&lt;&lt;&quot;[UPDATE_PLAYER_POS][playerPos]: &quot;&lt;&lt;playerX &lt;&lt;&quot;,&quot;&lt;&lt;playerZ&lt;&lt; &quot;\n&quot;;
__playerX = playerX;
__playerZ = playerZ;</body>
                        </effect>
                        <trigger xmi:type="uml:Trigger" xmi:id="_w-ZfkJqKEemI69k4e-oa_g" event="_g3LeUJauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
                      </transition>
                      <transition xmi:type="uml:Transition" xmi:id="_HmVyQJqKEemI69k4e-oa_g" kind="external" source="_jZCSkJqJEemI69k4e-oa_g" target="_e_VucJqJEemI69k4e-oa_g">
                        <effect xmi:type="uml:OpaqueBehavior" xmi:id="_1r8MwJqKEemI69k4e-oa_g" name="Effect" isReentrant="false">
                          <language>C++</language>
                          <body> std::cout&lt;&lt;&quot;[compass]: &quot;&lt;&lt;compass &lt;&lt; &quot;\n&quot;;
__compass = compass;</body>
                        </effect>
                        <trigger xmi:type="uml:Trigger" xmi:id="_2BHLgJqKEemI69k4e-oa_g" event="_2fMIkJauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
                      </transition>
                      <transition xmi:type="uml:Transition" xmi:id="_hOM9QJqKEemI69k4e-oa_g" name="" kind="external" source="_e_VucJqJEemI69k4e-oa_g" target="_ZTOqwJqKEemI69k4e-oa_g">
                        <trigger xmi:type="uml:Trigger" xmi:id="_BiWaEJqLEemI69k4e-oa_g" port="_xFvwEIieEeiP-_qqZZR9Jg">
                          <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                        </trigger>
                      </transition>
                      <transition xmi:type="uml:Transition" xmi:id="_h3zT4JqKEemI69k4e-oa_g" name="" kind="external" source="_ZTOqwJqKEemI69k4e-oa_g" target="_MycqwJqKEemI69k4e-oa_g">
                        <trigger xmi:type="uml:Trigger" xmi:id="_DDv7YJqLEemI69k4e-oa_g" port="_xFvwEIieEeiP-_qqZZR9Jg">
                          <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                        </trigger>
                      </transition>
                      <transition xmi:type="uml:Transition" xmi:id="_i9z5sJqKEemI69k4e-oa_g" name="" kind="external" source="_MycqwJqKEemI69k4e-oa_g" target="_IsKx4JqKEemI69k4e-oa_g">
                        <effect xmi:type="uml:OpaqueBehavior" xmi:id="_O1u7sJqLEemI69k4e-oa_g" name="Effect" isReentrant="false">
                          <language>C++</language>
                          <body>if (spinPower != 0)
	compassAdjusted = false;
else
	compassAdjusted = true;</body>
                        </effect>
                        <trigger xmi:type="uml:Trigger" xmi:id="_KQJ3sJqLEemI69k4e-oa_g" port="_xFvwEIieEeiP-_qqZZR9Jg">
                          <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                        </trigger>
                      </transition>
                      <transition xmi:type="uml:Transition" xmi:id="_jtSO0JqKEemI69k4e-oa_g" guard="_TaLXQJqLEemI69k4e-oa_g" kind="external" source="_IsKx4JqKEemI69k4e-oa_g" target="_c_2i8JqJEemI69k4e-oa_g">
                        <ownedRule xmi:type="uml:Constraint" xmi:id="_TaLXQJqLEemI69k4e-oa_g">
                          <specification xmi:type="uml:OpaqueExpression" xmi:id="_TaL-UJqLEemI69k4e-oa_g">
                            <language>C++</language>
                            <body>return compassAdjusted;</body>
                          </specification>
                        </ownedRule>
                      </transition>
                      <transition xmi:type="uml:Transition" xmi:id="_mWhh8JqKEemI69k4e-oa_g" guard="_Uj2VEJqLEemI69k4e-oa_g" kind="external" source="_IsKx4JqKEemI69k4e-oa_g" target="__U_AEJqJEemI69k4e-oa_g">
                        <ownedRule xmi:type="uml:Constraint" xmi:id="_Uj2VEJqLEemI69k4e-oa_g">
                          <specification xmi:type="uml:OpaqueExpression" xmi:id="_Uj2VEZqLEemI69k4e-oa_g">
                            <language>C++</language>
                            <body>return !compassAdjusted;</body>
                          </specification>
                        </ownedRule>
                      </transition>
                      <transition xmi:type="uml:Transition" xmi:id="_qry5EJqKEemI69k4e-oa_g" name="" kind="external" source="_c_2i8JqJEemI69k4e-oa_g" target="_MFW9oJq-EemI69k4e-oa_g">
                        <trigger xmi:type="uml:Trigger" xmi:id="_V1jFUJq-EemI69k4e-oa_g" port="_xFvwEIieEeiP-_qqZZR9Jg">
                          <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                        </trigger>
                      </transition>
                      <subvertex xmi:type="uml:State" xmi:id="_c_2i8JqJEemI69k4e-oa_g" name="SHOOT">
                        <entry xmi:type="uml:OpaqueBehavior" xmi:id="_d-GT4JqJEemI69k4e-oa_g" name="Entry" isReentrant="false">
                          <language>C++</language>
                          <body>std::cout&lt;&lt;&quot;[MOVE_TO_GOAL][SHOOT] \n&quot;;

std::string cmd = &quot;player2,setSuction(&quot;+std::to_string(30)+&quot;)&quot;;

char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();

std::cout&lt;&lt;&quot;[MOVE_FB CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;
timerId = timer.informIn(UMLRTTimespec(0, 500000000));</body>
                        </entry>
                      </subvertex>
                      <subvertex xmi:type="uml:State" xmi:id="_e_VucJqJEemI69k4e-oa_g" name="CALC_ROTATE">
                        <entry xmi:type="uml:OpaqueBehavior" xmi:id="_05G3EJqJEemI69k4e-oa_g" name="Entry" isReentrant="false">
                          <language>C++</language>
                          <body>
angle = atan2(__playerZ - goalZ, __playerX - goalX);
int angleINT = angle * 180 / 3.14;

std::cout&lt;&lt;&quot;========> [SHOOT TO THE GOAL][angleINT]: &quot;&lt;&lt; angleINT&lt;&lt; &quot;\n&quot;;

//Rotation angle

if (angleINT &lt; 0 &amp;&amp; __compass > 180){
	if (__compass - 180 > abs (angleINT)){spinPower = -50; rotation = (__compass -180) - abs(angleINT);}
	else if (__compass - 180 &lt;= abs (angleINT)){spinPower = 50; rotation = abs(angleINT) - (__compass -180);}
}else if (angleINT &lt; 0 &amp;&amp; __compass &lt;= 180){
	spinPower = 50; rotation = abs(angleINT) + 180 - __compass;
}else if (angleINT > 0 &amp;&amp; __compass > 180){
	spinPower = -50; rotation = abs(angleINT) + 180 - __compass;
}else if (angleINT > 0 &amp;&amp; __compass &lt; 180){
	if (180 - angleINT >  __compass){spinPower = 50; rotation = 180 - abs(angleINT) - __compass;  }
	else if (180 - angleINT &lt;  __compass){spinPower = -50; rotation = __compass - (180 - abs(angleINT));}
}

timerId = timer.informIn(UMLRTTimespec(0, 1000));

</body>
                        </entry>
                      </subvertex>
                      <subvertex xmi:type="uml:State" xmi:id="_jZCSkJqJEemI69k4e-oa_g" name="PLAYER_COMPASS">
                        <entry xmi:type="uml:OpaqueBehavior" xmi:id="_0DdMAJqKEemI69k4e-oa_g" name="Entry" isReentrant="false">
                          <language>C++</language>
                          <body> std::cout&lt;&lt;&quot;[SHOOT_TO_GOAL][UPDATE_COMPASS]: getPlayerCompass() \n&quot;;
observationPort.getPlayerCompass().send();</body>
                        </entry>
                      </subvertex>
                      <subvertex xmi:type="uml:State" xmi:id="__U_AEJqJEemI69k4e-oa_g" name="PLAYER_POS">
                        <entry xmi:type="uml:OpaqueBehavior" xmi:id="_tS1MwJqKEemI69k4e-oa_g" name="Entry" isReentrant="false">
                          <language>C++</language>
                          <body> std::cout&lt;&lt;&quot;[SHOOT_TO_GOAL][UPDATE_PLAYER_POS]: getPlayerPos() \n&quot;;
observationPort.getPlayerPos().send();</body>
                        </entry>
                      </subvertex>
                      <subvertex xmi:type="uml:Pseudostate" xmi:id="_IsKx4JqKEemI69k4e-oa_g" kind="choice"/>
                      <subvertex xmi:type="uml:State" xmi:id="_MycqwJqKEemI69k4e-oa_g" name="STOP">
                        <entry xmi:type="uml:OpaqueBehavior" xmi:id="_IqWXgJqLEemI69k4e-oa_g" name="Entry" isReentrant="false">
                          <language>C++</language>
                          <body>std::cout&lt;&lt;&quot;[SHOOT_TO_GOAL][STOP] \n&quot;;

std::string cmd = &quot;player2,stop()&quot;;
char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();

std::cout&lt;&lt;&quot;[STOP CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;
timerId = timer.informIn(UMLRTTimespec(0, 500000000));


</body>
                        </entry>
                      </subvertex>
                      <subvertex xmi:type="uml:State" xmi:id="_ZTOqwJqKEemI69k4e-oa_g" name="ROTATE">
                        <entry xmi:type="uml:OpaqueBehavior" xmi:id="_eNeXMJqKEemI69k4e-oa_g" name="Entry" isReentrant="false">
                          <language>C++</language>
                          <body>std::cout&lt;&lt;&quot;[SHOOT_TO_GOAL][ROTATE] \n&quot;;

spinTime = 200000000;
if (abs(rotation) &lt;7 ) {spinPower = 0;}
//else if ( abs(__prvRotation) &lt; abs(rotation)) {spinPower = __prvSpinPower*-1; spinTime = 100000000;}

std::cout&lt;&lt;__prvRotation&lt;&lt;&quot; -----------> [CALC_ROTATION TOWARDS THE GOAL][rotation]: &quot;&lt;&lt; rotation &lt;&lt; &quot; [spinPower]: &quot; &lt;&lt; spinPower&lt;&lt;&quot; \n&quot;;

__prvRotation = rotation;
if (spinPower != 0)
	__prvSpinPower = spinPower;

std::string cmd = &quot;player2,spin(&quot;+std::to_string(spinPower)+&quot;)&quot;;
char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();
std::cout&lt;&lt;&quot;[MOVE_RL CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;


timerId = timer.informIn(UMLRTTimespec(0, spinTime));</body>
                        </entry>
                      </subvertex>
                      <subvertex xmi:type="uml:State" xmi:id="_MFW9oJq-EemI69k4e-oa_g" name="WAIT_FOR_SIGNAL">
                        <entry xmi:type="uml:OpaqueBehavior" xmi:id="_xL6ZgJq-EemI69k4e-oa_g" name="Entry" isReentrant="false">
                          <language>C++</language>
                          <body>observationPort.getSignal(&quot;tracking&quot;).send();</body>
                        </entry>
                      </subvertex>
                    </region>
                  </subvertex>
                  <subvertex xmi:type="uml:State" xmi:id="_6ASzYJnFEemHu_dwIWKvwA" name="STOP">
                    <entry xmi:type="uml:OpaqueBehavior" xmi:id="_9HTAkJnFEemHu_dwIWKvwA" name="Entry" isReentrant="false">
                      <language>C++</language>
                      <body>std::cout&lt;&lt;&quot;[MOVE_TO_GOAL][STOP] \n&quot;;

std::string cmd = &quot;player2,stop()&quot;;
char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();

std::cout&lt;&lt;&quot;[STOP CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;



goal_player_distance = sqrt(pow(__playerX - goalX, 2) +  pow(__playerZ - goalZ, 2) * 1.0);
std::cout&lt;&lt;&quot;[goal_player_distance]:&quot;&lt;&lt;goal_player_distance&lt;&lt;&quot; \n&quot;;

if (goal_player_distance &lt; 15)
	goalAchiveable = true;
else
	goalAchiveable = false;


timerId = timer.informIn(UMLRTTimespec(0, 500000000));</body>
                    </entry>
                  </subvertex>
                  <subvertex xmi:type="uml:Pseudostate" xmi:id="_zTCBcJnWEemHu_dwIWKvwA" kind="choice"/>
                  <subvertex xmi:type="uml:State" xmi:id="_GKhmsJnpEemHu_dwIWKvwA" name="CHECKING">
                    <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_JryuAJnpEemHu_dwIWKvwA" kind="entryPoint"/>
                    <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_3VSbUJnpEemHu_dwIWKvwA" kind="exitPoint"/>
                    <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_MSCiEJnqEemHu_dwIWKvwA" kind="exitPoint"/>
                    <region xmi:type="uml:Region" xmi:id="_Jrw40JnpEemHu_dwIWKvwA" name="Region1">
                      <transition xmi:type="uml:Transition" xmi:id="_BO5kwJnqEemHu_dwIWKvwA" kind="local" source="_JryuAJnpEemHu_dwIWKvwA" target="_78mksJnpEemHu_dwIWKvwA"/>
                      <transition xmi:type="uml:Transition" xmi:id="_DugawJnqEemHu_dwIWKvwA" name="" kind="external" source="_78mksJnpEemHu_dwIWKvwA" target="_9yUJIJnpEemHu_dwIWKvwA">
                        <effect xmi:type="uml:OpaqueBehavior" xmi:id="_jkn3wJnqEemHu_dwIWKvwA" name="Effect" isReentrant="false">
                          <language>C++</language>
                          <body> std::cout&lt;&lt;&quot;[UPDATE_BALL_POS][ballPos]: &quot;&lt;&lt;ballX &lt;&lt;&quot;,&quot;&lt;&lt;ballZ&lt;&lt; &quot;\n&quot;;
__ballX = ballX;
__ballZ = ballZ;

</body>
                        </effect>
                        <trigger xmi:type="uml:Trigger" xmi:id="_3LLnoJnqEemHu_dwIWKvwA" event="_puRa0JauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
                      </transition>
                      <transition xmi:type="uml:Transition" xmi:id="_JnQW0JnqEemHu_dwIWKvwA" guard="_vRZA4JnqEemHu_dwIWKvwA" kind="external" source="_JGucoJnqEemHu_dwIWKvwA" target="_3VSbUJnpEemHu_dwIWKvwA">
                        <ownedRule xmi:type="uml:Constraint" xmi:id="_vRZA4JnqEemHu_dwIWKvwA">
                          <specification xmi:type="uml:OpaqueExpression" xmi:id="_vRZn8JnqEemHu_dwIWKvwA">
                            <language>C++</language>
                            <body>return !ballAchiveable;</body>
                          </specification>
                        </ownedRule>
                        <effect xmi:type="uml:OpaqueBehavior" xmi:id="_XbP1sJnrEemHu_dwIWKvwA" name="Effect" isReentrant="false">
                          <language>C++</language>
                          <body>std::cout&lt;&lt;&quot; \n\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; [MOVE_TO_GOAL] [I LOST THE BALL !] >>>>>>>>>>>>>>>>>>>> \n\n\n&quot;;</body>
                        </effect>
                      </transition>
                      <transition xmi:type="uml:Transition" xmi:id="_LYHQcJnqEemHu_dwIWKvwA" name="" kind="external" source="_9yUJIJnpEemHu_dwIWKvwA" target="_JGucoJnqEemHu_dwIWKvwA">
                        <effect xmi:type="uml:OpaqueBehavior" xmi:id="_czUjEJnqEemHu_dwIWKvwA" name="Effect" isReentrant="false">
                          <language>C++</language>
                          <body> std::cout&lt;&lt;&quot;[UPDATE_PLAYER_POS][playerPos]: &quot;&lt;&lt;playerX &lt;&lt;&quot;,&quot;&lt;&lt;playerZ&lt;&lt; &quot;\n&quot;;

__prvPlayerX = __playerX;
__prvPlayerZ = __playerZ;

__playerX = playerX;
__playerZ = playerZ;


ball_player_distance = sqrt(pow(__playerX - __ballX, 2) +  pow(__playerZ - __ballZ, 2) * 1.0);

 std::cout&lt;&lt;&quot;[UPDATE_PLAYER_POS][ball_player_distance]: &quot;&lt;&lt;ball_player_distance&lt;&lt; &quot;\n&quot;;

if (ball_player_distance &lt;= 2)
	ballAchiveable = true;
else
	ballAchiveable = false;
</body>
                        </effect>
                        <trigger xmi:type="uml:Trigger" xmi:id="_1E3bYJnqEemHu_dwIWKvwA" event="_g3LeUJauEemCgN1WwdiMbQ" port="_vAt58JawEemCgN1WwdiMbQ"/>
                      </transition>
                      <transition xmi:type="uml:Transition" xmi:id="_MSFlYJnqEemHu_dwIWKvwA" guard="_wGxwwJnqEemHu_dwIWKvwA" kind="external" source="_JGucoJnqEemHu_dwIWKvwA" target="_bwIp8Jn5EemHu_dwIWKvwA">
                        <ownedRule xmi:type="uml:Constraint" xmi:id="_wGxwwJnqEemHu_dwIWKvwA">
                          <specification xmi:type="uml:OpaqueExpression" xmi:id="_wGxwwZnqEemHu_dwIWKvwA">
                            <language>C++</language>
                            <body>return ballAchiveable;</body>
                          </specification>
                        </ownedRule>
                      </transition>
                      <transition xmi:type="uml:Transition" xmi:id="_pL8u0Jn5EemHu_dwIWKvwA" name="" kind="external" source="_bwIp8Jn5EemHu_dwIWKvwA" target="_MSCiEJnqEemHu_dwIWKvwA">
                        <trigger xmi:type="uml:Trigger" xmi:id="_Is_x8JqCEemI69k4e-oa_g" port="_xFvwEIieEeiP-_qqZZR9Jg">
                          <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                        </trigger>
                      </transition>
                      <subvertex xmi:type="uml:State" xmi:id="_78mksJnpEemHu_dwIWKvwA" name="BALL">
                        <entry xmi:type="uml:OpaqueBehavior" xmi:id="_TaNeoJnqEemHu_dwIWKvwA" name="Entry" isReentrant="false">
                          <language>C++</language>
                          <body> std::cout&lt;&lt;&quot;[UPDATE_BALL_POS]: getBallPos() \n&quot;;
observationPort.getBallPos().send();</body>
                        </entry>
                      </subvertex>
                      <subvertex xmi:type="uml:State" xmi:id="_9yUJIJnpEemHu_dwIWKvwA" name="PLAYER">
                        <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Xj_-gJnqEemHu_dwIWKvwA" name="Entry" isReentrant="false">
                          <language>C++</language>
                          <body> std::cout&lt;&lt;&quot;[UPDATE_PLAYER_POS]: getPlayerPos() \n&quot;;
observationPort.getPlayerPos().send();</body>
                        </entry>
                      </subvertex>
                      <subvertex xmi:type="uml:Pseudostate" xmi:id="_JGucoJnqEemHu_dwIWKvwA" kind="choice"/>
                      <subvertex xmi:type="uml:State" xmi:id="_bwIp8Jn5EemHu_dwIWKvwA" name="SUCK">
                        <entry xmi:type="uml:OpaqueBehavior" xmi:id="_md3X8Jn5EemHu_dwIWKvwA" name="Entry" isReentrant="false">
                          <language>C++</language>
                          <body>	observationPort.setCommand(&quot;player2,setSuction(-100)&quot;).send();
	std::cout&lt;&lt;&quot;[SUCK CMD]:[player2,setSuction(-100)] \n&quot;;
	timerId = timer.informIn(UMLRTTimespec(0, 500000000));

</body>
                        </entry>
                      </subvertex>
                    </region>
                  </subvertex>
                </region>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_6BvoQJnuEemHu_dwIWKvwA" kind="junction"/>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_ZK-pgJqREemI69k4e-oa_g" name="GOT_STUCK">
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_3pTNIJqREemI69k4e-oa_g" kind="entryPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_4IFa4JqREemI69k4e-oa_g" kind="exitPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_gi2AMJqXEemI69k4e-oa_g" kind="exitPoint"/>
            <region xmi:type="uml:Region" xmi:id="_ecIaEJqREemI69k4e-oa_g" name="Region1">
              <transition xmi:type="uml:Transition" xmi:id="_5CdYcJqREemI69k4e-oa_g" kind="local" source="_3pTNIJqREemI69k4e-oa_g" target="_fNBEcJqREemI69k4e-oa_g"/>
              <transition xmi:type="uml:Transition" xmi:id="_5psXkJqREemI69k4e-oa_g" name="" kind="external" source="_fNBEcJqREemI69k4e-oa_g" target="_5cdvsJqYEemI69k4e-oa_g">
                <trigger xmi:type="uml:Trigger" xmi:id="_agAGQJqSEemI69k4e-oa_g" port="_xFvwEIieEeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_6b3bYJqREemI69k4e-oa_g" name="" kind="external" source="_i0IVEJqREemI69k4e-oa_g" target="_5cdvsJqYEemI69k4e-oa_g">
                <trigger xmi:type="uml:Trigger" xmi:id="_cHYTwJqSEemI69k4e-oa_g" port="_xFvwEIieEeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_7Wq2wJqREemI69k4e-oa_g" name="" kind="external" source="_trVvMJqREemI69k4e-oa_g" target="_5cdvsJqYEemI69k4e-oa_g">
                <trigger xmi:type="uml:Trigger" xmi:id="_dOxZoJqSEemI69k4e-oa_g" port="_xFvwEIieEeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_8FZlAJqREemI69k4e-oa_g" name="" kind="external" source="_lp4aMJqREemI69k4e-oa_g" target="_5cdvsJqYEemI69k4e-oa_g">
                <trigger xmi:type="uml:Trigger" xmi:id="_eoT_cJqSEemI69k4e-oa_g" port="_xFvwEIieEeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_8s_JcJqREemI69k4e-oa_g" name="" kind="external" source="_x4Y-cJqREemI69k4e-oa_g" target="_5cdvsJqYEemI69k4e-oa_g">
                <trigger xmi:type="uml:Trigger" xmi:id="_geh6MJqSEemI69k4e-oa_g" port="_xFvwEIieEeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_9Sm_AJqREemI69k4e-oa_g" name="" kind="external" source="_oMikMJqREemI69k4e-oa_g" target="_4IFa4JqREemI69k4e-oa_g">
                <trigger xmi:type="uml:Trigger" xmi:id="_hl_4kJqSEemI69k4e-oa_g" port="_xFvwEIieEeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_DpUlQJqZEemI69k4e-oa_g" name="" kind="external" source="_5cdvsJqYEemI69k4e-oa_g" target="_i0IVEJqREemI69k4e-oa_g">
                <trigger xmi:type="uml:Trigger" xmi:id="_EGC9gJqZEemI69k4e-oa_g" port="_xFvwEIieEeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_Gb7PwJqZEemI69k4e-oa_g" name="" kind="external" source="_5cdvsJqYEemI69k4e-oa_g" target="_trVvMJqREemI69k4e-oa_g">
                <trigger xmi:type="uml:Trigger" xmi:id="_G1Rj4JqZEemI69k4e-oa_g" port="_xFvwEIieEeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_KCpe0JqZEemI69k4e-oa_g" name="" kind="external" source="_5cdvsJqYEemI69k4e-oa_g" target="_lp4aMJqREemI69k4e-oa_g">
                <trigger xmi:type="uml:Trigger" xmi:id="_KWZhQJqZEemI69k4e-oa_g" port="_xFvwEIieEeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_L_nh0JqZEemI69k4e-oa_g" name="" kind="external" source="_5cdvsJqYEemI69k4e-oa_g" target="_x4Y-cJqREemI69k4e-oa_g">
                <trigger xmi:type="uml:Trigger" xmi:id="_M830QJqZEemI69k4e-oa_g" port="_xFvwEIieEeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_U6pjIJqZEemI69k4e-oa_g" name="" kind="external" source="_5cdvsJqYEemI69k4e-oa_g" target="_oMikMJqREemI69k4e-oa_g">
                <trigger xmi:type="uml:Trigger" xmi:id="_VMSFsJqZEemI69k4e-oa_g" port="_xFvwEIieEeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_fNBEcJqREemI69k4e-oa_g" name="SPIN1">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_OrD4kJqSEemI69k4e-oa_g" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body>std::string cmd = &quot;player2,spin(&quot;+std::to_string(40)+&quot;)&quot;;
char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();

std::cout&lt;&lt;&quot;[SPIN CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;
timerId = timer.informIn(UMLRTTimespec(0, 10000000));</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_i0IVEJqREemI69k4e-oa_g" name="MOVE_F">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KVsa0JqSEemI69k4e-oa_g" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body>std::string cmd = &quot;player2,moveForward(&quot;+std::to_string(50)+&quot;)&quot;;
char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();

std::cout&lt;&lt;&quot;[MOVE_FB CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;
timerId = timer.informIn(UMLRTTimespec(0, 10000000));</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_lp4aMJqREemI69k4e-oa_g" name="MOVE_R">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_HmebgJqSEemI69k4e-oa_g" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body>std::string cmd = &quot;player2,moveRight(&quot;+std::to_string(50)+&quot;)&quot;;
char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();

std::cout&lt;&lt;&quot;[MOVE_RL CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;
timerId = timer.informIn(UMLRTTimespec(0, 10000000));</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_oMikMJqREemI69k4e-oa_g" name="MOVE_B">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_VbZj8JqSEemI69k4e-oa_g" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body>std::string cmd = &quot;player2,moveForward(&quot;+std::to_string(-50)+&quot;)&quot;;
char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();

std::cout&lt;&lt;&quot;[MOVE_FB CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;
timerId = timer.informIn(UMLRTTimespec(0, 10000000));</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_trVvMJqREemI69k4e-oa_g" name="SPIN2">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RfS6wJqSEemI69k4e-oa_g" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body>std::string cmd = &quot;player2,spin(&quot;+std::to_string(-50)+&quot;)&quot;;
char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();

std::cout&lt;&lt;&quot;[SPIN CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;
timerId = timer.informIn(UMLRTTimespec(0, 10000000));</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_x4Y-cJqREemI69k4e-oa_g" name="SPIN3">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_SrRlsJqSEemI69k4e-oa_g" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body>std::string cmd = &quot;player2,spin(&quot;+std::to_string(-50)+&quot;)&quot;;
char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();

std::cout&lt;&lt;&quot;[SPIN CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;
timerId = timer.informIn(UMLRTTimespec(0, 10000000));</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_5cdvsJqYEemI69k4e-oa_g" name="STOP">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_-GjgQJqYEemI69k4e-oa_g" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;&quot;[RANDOM][STOP] \n&quot;;

std::string cmd = &quot;player2,stop()&quot;;
char* cmdCHAR = strcpy(new char[cmd.length() + 1], cmd.c_str());
observationPort.setCommand(cmdCHAR).send();

std::cout&lt;&lt;&quot;[STOP CMD]:&quot;&lt;&lt;cmd&lt;&lt;&quot; \n&quot;;
timerId = timer.informIn(UMLRTTimespec(0, 10000000));</body>
                </entry>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_x7C0YJqSEemI69k4e-oa_g" kind="junction"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_exnTIJqXEemI69k4e-oa_g" kind="junction"/>
        </region>
      </ownedBehavior>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_dCrcEIgqEeiP-_qqZZR9Jg" name="ObservationProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_dCmjkIgqEeiP-_qqZZR9Jg" name="ObservationProtocol">
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_dCzX4IgqEeiP-_qqZZR9Jg" client="_dCmjkIgqEeiP-_qqZZR9Jg" supplier="_dCvtgIgqEeiP-_qqZZR9Jg" contract="_dCvtgIgqEeiP-_qqZZR9Jg"/>
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_dC76wIgqEeiP-_qqZZR9Jg" client="_dCmjkIgqEeiP-_qqZZR9Jg" supplier="_dC43cYgqEeiP-_qqZZR9Jg" contract="_dC43cYgqEeiP-_qqZZR9Jg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_dCvtgIgqEeiP-_qqZZR9Jg" name="ObservationProtocol">
        <ownedOperation xmi:type="uml:Operation" xmi:id="_X9e5wJauEemCgN1WwdiMbQ" name="getPlayerPos"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_ZkvLcJauEemCgN1WwdiMbQ" name="getBallPos"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_bjZQgJauEemCgN1WwdiMbQ" name="getPlayerCompass"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_NwDfoJayEemCgN1WwdiMbQ" name="setCommand">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_OAhkkJayEemCgN1WwdiMbQ" name="cmd">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_zgISAJdUEemu8v-9gGlQEg" name="getMovementDirection"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_wjfJYJqDEemI69k4e-oa_g" name="getSignal">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_1OmNoJqDEemI69k4e-oa_g" name="signalName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_dC1NEIgqEeiP-_qqZZR9Jg" name="ObservationProtocol~">
        <ownedOperation xmi:type="uml:Operation" xmi:id="_hjx90IgsEeiP-_qqZZR9Jg" name="goTracking"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_VyfoYIjtEeiP-_qqZZR9Jg" name="goGrabbing"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_XWrX8IjtEeiP-_qqZZR9Jg" name="goScoring"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_g3F-wJauEemCgN1WwdiMbQ" name="playerPos">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_iz30gJauEemCgN1WwdiMbQ" name="playerX">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_mEYjAJauEemCgN1WwdiMbQ" name="playerZ">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_puMiUJauEemCgN1WwdiMbQ" name="ballPos">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_q7cYkJauEemCgN1WwdiMbQ" name="ballX">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_s_pE8JauEemCgN1WwdiMbQ" name="ballZ">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_2fK6cJauEemCgN1WwdiMbQ" name="playerCompass">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_4hqWoJauEemCgN1WwdiMbQ" name="compass">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_8LyakJdUEemu8v-9gGlQEg" name="setMovementDirection">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="__jvN0JdUEemu8v-9gGlQEg" name="moveFB">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_KZTCIJdVEemu8v-9gGlQEg" name="moveRL">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_S8wMsJqREemI69k4e-oa_g" name="goRandom"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_dC4QYIgqEeiP-_qqZZR9Jg" client="_dCmjkIgqEeiP-_qqZZR9Jg" supplier="_dC1NEIgqEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_dC43cIgqEeiP-_qqZZR9Jg" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_dC43cYgqEeiP-_qqZZR9Jg" name="ObservationProtocolIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_dC8h0IgqEeiP-_qqZZR9Jg" client="_dCmjkIgqEeiP-_qqZZR9Jg" supplier="_dC43cYgqEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_hkGG4IgsEeiP-_qqZZR9Jg" operation="_hjx90IgsEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_VylH8IjtEeiP-_qqZZR9Jg" operation="_VyfoYIjtEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_XWw3gIjtEeiP-_qqZZR9Jg" operation="_XWrX8IjtEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_X9lAYJauEemCgN1WwdiMbQ" operation="_X9e5wJauEemCgN1WwdiMbQ"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Zk1SEJauEemCgN1WwdiMbQ" operation="_ZkvLcJauEemCgN1WwdiMbQ"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_bjhMUJauEemCgN1WwdiMbQ" operation="_bjZQgJauEemCgN1WwdiMbQ"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_g3LeUJauEemCgN1WwdiMbQ" operation="_g3F-wJauEemCgN1WwdiMbQ"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_puRa0JauEemCgN1WwdiMbQ" operation="_puMiUJauEemCgN1WwdiMbQ"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_2fMIkJauEemCgN1WwdiMbQ" operation="_2fK6cJauEemCgN1WwdiMbQ"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_NwKNUJayEemCgN1WwdiMbQ" operation="_NwDfoJayEemCgN1WwdiMbQ"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_zgTRIJdUEemu8v-9gGlQEg" operation="_zgISAJdUEemu8v-9gGlQEg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_8L1d4JdUEemu8v-9gGlQEg" operation="_8LyakJdUEemu8v-9gGlQEg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_wjoTUJqDEemI69k4e-oa_g" operation="_wjfJYJqDEemI69k4e-oa_g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_S8yo8JqREemI69k4e-oa_g" operation="_S8wMsJqREemI69k4e-oa_g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_U7tYsIidEeiP-_qqZZR9Jg" name="ControlProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_U7rjgIidEeiP-_qqZZR9Jg" name="ControlProtocol">
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_U7yRMIidEeiP-_qqZZR9Jg" client="_U7rjgIidEeiP-_qqZZR9Jg" supplier="_U7wcAIidEeiP-_qqZZR9Jg" contract="_U7wcAIidEeiP-_qqZZR9Jg"/>
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_U72ioIidEeiP-_qqZZR9Jg" client="_U7rjgIidEeiP-_qqZZR9Jg" supplier="_U70tcIidEeiP-_qqZZR9Jg" contract="_U70tcIidEeiP-_qqZZR9Jg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_U7wcAIidEeiP-_qqZZR9Jg" name="ControlProtocol">
        <ownedOperation xmi:type="uml:Operation" xmi:id="_dJmnMIidEeiP-_qqZZR9Jg" name="position">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_hjYq4IidEeiP-_qqZZR9Jg" name="x">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_iuUM8IidEeiP-_qqZZR9Jg" name="y">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_egNNwIidEeiP-_qqZZR9Jg" name="rotation">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_k2zjcIidEeiP-_qqZZR9Jg" name="degrees">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_tGDRoIjxEeiP-_qqZZR9Jg" name="ack"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_U7y4QIidEeiP-_qqZZR9Jg" name="ControlProtocol~">
        <ownedOperation xmi:type="uml:Operation" xmi:id="_WjhEAIidEeiP-_qqZZR9Jg" name="getGPS"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_YQY1gIidEeiP-_qqZZR9Jg" name="getCompass"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_PV1bsIilEeiP-_qqZZR9Jg" name="setPower">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_ShMkcIilEeiP-_qqZZR9Jg" name="left">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_ThIXcIilEeiP-_qqZZR9Jg" name="right">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_U70GYIidEeiP-_qqZZR9Jg" client="_U7rjgIidEeiP-_qqZZR9Jg" supplier="_U7y4QIidEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_U70GYYidEeiP-_qqZZR9Jg" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_U70tcIidEeiP-_qqZZR9Jg" name="ControlProtocolIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_U72ioYidEeiP-_qqZZR9Jg" client="_U7rjgIidEeiP-_qqZZR9Jg" supplier="_U70tcIidEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_WjhrEIidEeiP-_qqZZR9Jg" operation="_WjhEAIidEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_YQZckIidEeiP-_qqZZR9Jg" operation="_YQY1gIidEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_dJocYIidEeiP-_qqZZR9Jg" operation="_dJmnMIidEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_egOb4IidEeiP-_qqZZR9Jg" operation="_egNNwIidEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_PV2CwIilEeiP-_qqZZR9Jg" operation="_PV1bsIilEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_tGIxMIjxEeiP-_qqZZR9Jg" operation="_tGDRoIjxEeiP-_qqZZR9Jg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_VuOiEJXsEemnlJvKCgeTXw" name="Referee" classifierBehavior="_RGj98JXtEemnlJvKCgeTXw" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_14z9wJXtEemnlJvKCgeTXw" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_2nGAEJXtEemnlJvKCgeTXw" name="tcp" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_tEiNsa1CEeeZPMea3Z4z9w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_37u3wJXtEemnlJvKCgeTXw" name="timer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_iSOGwJXvEemnlJvKCgeTXw" name="refereeProtocol" visibility="public" type="_ibMj8JXsEemnlJvKCgeTXw" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="false" isService="true"/>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_RGj98JXtEemnlJvKCgeTXw" name="StateMachine" isReentrant="false">
        <region xmi:type="uml:Region" xmi:id="_RG244JXtEemnlJvKCgeTXw" name="Region">
          <transition xmi:type="uml:Transition" xmi:id="_RHGJcJXtEemnlJvKCgeTXw" name="Initial" source="_RG8YcJXtEemnlJvKCgeTXw" target="_RHBQ8JXtEemnlJvKCgeTXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_auZa4JXtEemnlJvKCgeTXw" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>tcp.connect(&quot;127.0.0.1&quot;,9007);</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_veQVIJXtEemnlJvKCgeTXw" name="" kind="external" source="_RHBQ8JXtEemnlJvKCgeTXw" target="_tWWNcJXtEemnlJvKCgeTXw">
            <trigger xmi:type="uml:Trigger" xmi:id="_84bbQJXtEemnlJvKCgeTXw" port="_2nGAEJXtEemnlJvKCgeTXw">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_s9iNgMT3Eei7WtNtKyCSvw"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_T4C8MJXvEemnlJvKCgeTXw" name="" kind="external" source="_tWWNcJXtEemnlJvKCgeTXw" target="_SU9Y0JXvEemnlJvKCgeTXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_L6WK4JnWEemHu_dwIWKvwA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>std::cout&lt;&lt;&quot;[REFEREE][RECEIVED]: &quot;&lt;&lt; payload &lt;&lt;&quot;\n&quot;;</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_Xl0PYJaoEemCgN1WwdiMbQ" port="_2nGAEJXtEemnlJvKCgeTXw">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_zwyoUK1YEee74Ow6RXIGBA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_7ZPwEJnVEemHu_dwIWKvwA" name="" kind="external" source="_SU9Y0JXvEemnlJvKCgeTXw" target="_SU9Y0JXvEemnlJvKCgeTXw">
            <trigger xmi:type="uml:Trigger" xmi:id="_-3xFYJnVEemHu_dwIWKvwA" port="_2nGAEJXtEemnlJvKCgeTXw">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_zwyoUK1YEee74Ow6RXIGBA"/>
            </trigger>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_RG8YcJXtEemnlJvKCgeTXw" kind="initial"/>
          <subvertex xmi:type="uml:State" xmi:id="_RHBQ8JXtEemnlJvKCgeTXw" name="CONNECTING"/>
          <subvertex xmi:type="uml:State" xmi:id="_tWWNcJXtEemnlJvKCgeTXw" name="IDLE"/>
          <subvertex xmi:type="uml:State" xmi:id="_SU9Y0JXvEemnlJvKCgeTXw" name="GET_MSG">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Y_T7gJXwEemnlJvKCgeTXw" name="Entry" isReentrant="false">
              <language>C++</language>
              <body>    std::cout&lt;&lt;&quot;[REFEREE][RECEIVED]: &quot;&lt;&lt; payload &lt;&lt;&quot;\n&quot;;
    std::string payloadStr (payload);
    std::size_t found = payloadStr.find(&quot;Possesion;player2&quot;);
    if (found!=std::string::npos){
    refereeProtocol.getBallPossesion().send();
    std::cout&lt;&lt;&quot;-------------> [REFEREE][SEND getBallPossesion to OBSERVER] \n&quot;;
    }
    found = payloadStr.find(&quot;TimeOut;player2&quot;);
    if (found!=std::string::npos){
    refereeProtocol.getTimeout().send();
    std::cout&lt;&lt;&quot;-------------> [REFEREE][SEND getTimeout to OBSERVER] \n&quot;;
    }
    found = payloadStr.find(&quot;scored;player2&quot;);
    if (found!=std::string::npos){
    refereeProtocol.getScored().send();
    std::cout&lt;&lt;&quot;-------------> [REFEREE][SEND getScored to OBSERVER] \n&quot;;
    }
    //timer.informIn(UMLRTTimespec(0, 100000000));
</body>
            </entry>
          </subvertex>
        </region>
      </ownedBehavior>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_ibYKIJXsEemnlJvKCgeTXw" name="RefereeProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_ibMj8JXsEemnlJvKCgeTXw" name="RefereeProtocol">
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_ibjJQJXsEemnlJvKCgeTXw" client="_ibMj8JXsEemnlJvKCgeTXw" supplier="_ibe30JXsEemnlJvKCgeTXw" contract="_ibe30JXsEemnlJvKCgeTXw"/>
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_ibzn8JXsEemnlJvKCgeTXw" client="_ibMj8JXsEemnlJvKCgeTXw" supplier="_ibuIYJXsEemnlJvKCgeTXw" contract="_ibuIYJXsEemnlJvKCgeTXw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_ibe30JXsEemnlJvKCgeTXw" name="RefereeProtocol"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_ibnasJXsEemnlJvKCgeTXw" name="RefereeProtocol~">
        <ownedOperation xmi:type="uml:Operation" xmi:id="_2htmQJXsEemnlJvKCgeTXw" name="getTimeout"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_Co4zcJXtEemnlJvKCgeTXw" name="getScored"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_8wevMJaoEemCgN1WwdiMbQ" name="getBallPossesion"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_ibsTMJXsEemnlJvKCgeTXw" client="_ibMj8JXsEemnlJvKCgeTXw" supplier="_ibnasJXsEemnlJvKCgeTXw"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_ibthUJXsEemnlJvKCgeTXw" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_ibuIYJXsEemnlJvKCgeTXw" name="RefereeProtocolIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_ib02EJXsEemnlJvKCgeTXw" client="_ibMj8JXsEemnlJvKCgeTXw" supplier="_ibuIYJXsEemnlJvKCgeTXw"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_2hxQoJXsEemnlJvKCgeTXw" operation="_2htmQJXsEemnlJvKCgeTXw"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Co9r8JXtEemnlJvKCgeTXw" operation="_Co4zcJXtEemnlJvKCgeTXw"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_8wjAoJaoEemCgN1WwdiMbQ" operation="_8wevMJaoEemCgN1WwdiMbQ"/>
    </packagedElement>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_FX4as4gqEeiP-_qqZZR9Jg">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_FX4atIgqEeiP-_qqZZR9Jg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://UML_RT_PROFILE/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_FX4atYgqEeiP-_qqZZR9Jg">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_FX4atogqEeiP-_qqZZR9Jg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_FX4at4gqEeiP-_qqZZR9Jg">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_FX4auIgqEeiP-_qqZZR9Jg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://UMLRT_CPP/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:Capsule xmi:id="_HUbm8IgqEeiP-_qqZZR9Jg" base_Class="_HR_-AIgqEeiP-_qqZZR9Jg"/>
  <UMLRealTime:Capsule xmi:id="_IQrMwIgqEeiP-_qqZZR9Jg" base_Class="_IQj4AIgqEeiP-_qqZZR9Jg"/>
  <UMLRealTime:Capsule xmi:id="_J_vWoIgqEeiP-_qqZZR9Jg" base_Class="_J_oo8IgqEeiP-_qqZZR9Jg"/>
  <UMLRealTime:CapsulePart xmi:id="_WIKhAIgqEeiP-_qqZZR9Jg" base_Property="_WIGPkIgqEeiP-_qqZZR9Jg"/>
  <UMLRealTime:ProtocolContainer xmi:id="_dCt4UIgqEeiP-_qqZZR9Jg" base_Package="_dCrcEIgqEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTMessageSet xmi:id="_dCyJwIgqEeiP-_qqZZR9Jg" base_Interface="_dCvtgIgqEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTMessageSet xmi:id="_dC3CQIgqEeiP-_qqZZR9Jg" base_Interface="_dC1NEIgqEeiP-_qqZZR9Jg" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_dC6soIgqEeiP-_qqZZR9Jg" base_Interface="_dC43cYgqEeiP-_qqZZR9Jg" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_dC9I4IgqEeiP-_qqZZR9Jg" base_Collaboration="_dCmjkIgqEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTPort xmi:id="_YHqBoIgsEeiP-_qqZZR9Jg" isPublish="false" isWired="true" base_Port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTPort xmi:id="_TnWpwIgtEeiP-_qqZZR9Jg" isPublish="false" isWired="false" base_Port="_TnTmcIgtEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTPort xmi:id="_UUOW0IgtEeiP-_qqZZR9Jg" isPublish="false" isWired="false" base_Port="_UULTgIgtEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_aLUGAIgtEeiP-_qqZZR9Jg" base_Pseudostate="_aLRCsIgtEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_aLazsIgtEeiP-_qqZZR9Jg" base_Region="_aLOmcIgtEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_aLg6UIgtEeiP-_qqZZR9Jg" base_StateMachine="_aLDAQIgtEeiP-_qqZZR9Jg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_zmc_cIg0EeiP-_qqZZR9Jg" headerPreface="#include &lt;string>&#xA;#include &lt;iostream>&#xA;#include &lt;stdlib.h>&#xA;#include &lt;stdio.h>&#xA;#include &lt;cstring>&#xA;" implementationPreface="#include &lt;sys/socket.h>&#xA;#include &lt;netinet/in.h>&#xA;#include &lt;arpa/inet.h>" base_Class="_IQj4AIgqEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTPort xmi:id="_oLfwUIg6EeiP-_qqZZR9Jg" isPublish="false" isWired="false" base_Port="_oLctAIg6EeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_uUu_cIg6EeiP-_qqZZR9Jg" base_Region="_uUoRwIg6EeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_uUyCwIg6EeiP-_qqZZR9Jg" base_StateMachine="_uUhkEIg6EeiP-_qqZZR9Jg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_cC8DQIhfEeiP-_qqZZR9Jg" headerPreface="#include &lt;string>&#xA;#include &lt;iostream>&#xA;#include &lt;stdlib.h>&#xA;#include &lt;stdio.h>&#xA;#include &lt;cstring>&#xA;#include &lt;bits/stdc++.h> &#xA;&#xA;" implementationPreface="#include &lt;sys/socket.h>&#xA;#include &lt;netinet/in.h>&#xA;#include &lt;arpa/inet.h>&#xA;#include &lt;math.h> " base_Class="_J_oo8IgqEeiP-_qqZZR9Jg"/>
  <UMLRealTime:ProtocolContainer xmi:id="_U7vN4IidEeiP-_qqZZR9Jg" base_Package="_U7tYsIidEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTMessageSet xmi:id="_U7xqIIidEeiP-_qqZZR9Jg" base_Interface="_U7wcAIidEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTMessageSet xmi:id="_U7zfUIidEeiP-_qqZZR9Jg" base_Interface="_U7y4QIidEeiP-_qqZZR9Jg" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_U717kIidEeiP-_qqZZR9Jg" base_Interface="_U70tcIidEeiP-_qqZZR9Jg" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_U73JsIidEeiP-_qqZZR9Jg" base_Collaboration="_U7rjgIidEeiP-_qqZZR9Jg"/>
  <UMLRealTime:CapsulePart xmi:id="_pwfPMIidEeiP-_qqZZR9Jg" base_Property="_pwcy8IidEeiP-_qqZZR9Jg"/>
  <UMLRealTime:Capsule xmi:id="_qAQwkIidEeiP-_qqZZR9Jg" base_Class="_qAMfIIidEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_M-X5QIieEeiP-_qqZZR9Jg" base_Pseudostate="_M-WEEIieEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTState xmi:id="_M-ZucIieEeiP-_qqZZR9Jg" base_State="_M-YgUIieEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_M-aVgIieEeiP-_qqZZR9Jg" base_Region="_M-U18IieEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_M-cKwIieEeiP-_qqZZR9Jg" base_StateMachine="_M-OIQIieEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTPort xmi:id="_xFyMUIieEeiP-_qqZZR9Jg" isPublish="false" isWired="false" base_Port="_xFvwEIieEeiP-_qqZZR9Jg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_2YZ8gIieEeiP-_qqZZR9Jg" headerPreface="#include &lt;string>&#xA;#include &lt;iostream>&#xA;#include &lt;stdlib.h>&#xA;#include &lt;stdio.h>&#xA;#include &lt;cstring>&#xA;#include &lt;math.h> &#xA;" implementationPreface="#include &lt;sys/socket.h>&#xA;#include &lt;netinet/in.h>&#xA;#include &lt;arpa/inet.h>" base_Class="_qAMfIIidEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTPort xmi:id="_y3RGIIigEeiP-_qqZZR9Jg" isPublish="false" isWired="false" base_Port="_y3Op4IigEeiP-_qqZZR9Jg"/>
  <UMLRealTime:CapsulePart xmi:id="_wO7D4IjtEeiP-_qqZZR9Jg" base_Property="_wO4noIjtEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTState xmi:id="_MXLIAIjuEeiP-_qqZZR9Jg" base_State="_MXIrwIjuEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTState xmi:id="_O4J3AIjuEeiP-_qqZZR9Jg" base_State="_O4Io4IjuEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTState xmi:id="_RrdFEIjuEeiP-_qqZZR9Jg" base_State="_Rrb28IjuEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTPort xmi:id="_Qi4PQIj1EeiP-_qqZZR9Jg" isPublish="false" isWired="false" base_Port="_Qi1zAIj1EeiP-_qqZZR9Jg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_viXhkJRXEem-h8JsU1axzg" headerPreface="#include &lt;string>&#xA;#include &lt;iostream>&#xA;#include &lt;cstdlib>&#xA;" base_Class="_HR_-AIgqEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTPort xmi:id="_BdaUYJRkEem-h8JsU1axzg" isPublish="false" isWired="false" base_Port="_BdWqAJRkEem-h8JsU1axzg"/>
  <UMLRealTime:RTPort xmi:id="_EJLXEJRkEem-h8JsU1axzg" isPublish="false" isWired="false" base_Port="_EJI60JRkEem-h8JsU1axzg"/>
  <UMLRealTime:Capsule xmi:id="_VvGEwJXsEemnlJvKCgeTXw" base_Class="_VuOiEJXsEemnlJvKCgeTXw"/>
  <UMLRealTime:ProtocolContainer xmi:id="_ibcbkJXsEemnlJvKCgeTXw" base_Package="_ibYKIJXsEemnlJvKCgeTXw"/>
  <UMLRealTime:RTMessageSet xmi:id="_ibhUEJXsEemnlJvKCgeTXw" base_Interface="_ibe30JXsEemnlJvKCgeTXw"/>
  <UMLRealTime:RTMessageSet xmi:id="_ibrFEJXsEemnlJvKCgeTXw" base_Interface="_ibnasJXsEemnlJvKCgeTXw" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_ibxLsJXsEemnlJvKCgeTXw" base_Interface="_ibuIYJXsEemnlJvKCgeTXw" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_ib2EMJXsEemnlJvKCgeTXw" base_Collaboration="_ibMj8JXsEemnlJvKCgeTXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_RG-0sJXtEemnlJvKCgeTXw" base_Pseudostate="_RG8YcJXtEemnlJvKCgeTXw"/>
  <UMLRTStateMachines:RTState xmi:id="_RHDtMJXtEemnlJvKCgeTXw" base_State="_RHBQ8JXtEemnlJvKCgeTXw"/>
  <UMLRTStateMachines:RTRegion xmi:id="_RHHXkJXtEemnlJvKCgeTXw" base_Region="_RG244JXtEemnlJvKCgeTXw"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_RHWBEJXtEemnlJvKCgeTXw" base_StateMachine="_RGj98JXtEemnlJvKCgeTXw"/>
  <UMLRTStateMachines:RTState xmi:id="_tWf-cJXtEemnlJvKCgeTXw" base_State="_tWWNcJXtEemnlJvKCgeTXw"/>
  <UMLRealTime:RTPort xmi:id="_142aAJXtEemnlJvKCgeTXw" isPublish="false" isWired="false" base_Port="_14z9wJXtEemnlJvKCgeTXw"/>
  <UMLRealTime:RTPort xmi:id="_2nJDYJXtEemnlJvKCgeTXw" isPublish="false" isWired="false" base_Port="_2nGAEJXtEemnlJvKCgeTXw"/>
  <UMLRealTime:RTPort xmi:id="_37x7EJXtEemnlJvKCgeTXw" isPublish="false" isWired="false" base_Port="_37u3wJXtEemnlJvKCgeTXw"/>
  <UMLRTStateMachines:RTState xmi:id="_SVAcIJXvEemnlJvKCgeTXw" base_State="_SU9Y0JXvEemnlJvKCgeTXw"/>
  <UMLRealTime:RTPort xmi:id="_iSTmUJXvEemnlJvKCgeTXw" isPublish="false" isWired="true" base_Port="_iSOGwJXvEemnlJvKCgeTXw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_uEqrAJX4EemnlJvKCgeTXw" headerPreface="#include &lt;string>&#xA;#include &lt;iostream>&#xA;#include &lt;stdlib.h>&#xA;#include &lt;stdio.h>&#xA;#include &lt;cstring>" base_Class="_VuOiEJXsEemnlJvKCgeTXw"/>
  <UMLRealTime:CapsulePart xmi:id="_nZbukJanEemCgN1WwdiMbQ" base_Property="_nYqSgJanEemCgN1WwdiMbQ"/>
  <UMLRealTime:RTPort xmi:id="_vfB8sJanEemCgN1WwdiMbQ" isPublish="false" isWired="true" base_Port="_ve72EJanEemCgN1WwdiMbQ"/>
  <UMLRealTime:RTConnector xmi:id="_1W7kMJanEemCgN1WwdiMbQ" base_Connector="_1W2rsJanEemCgN1WwdiMbQ"/>
  <UMLRealTime:RTPort xmi:id="_hWBBUJasEemCgN1WwdiMbQ" isPublish="false" isWired="true" base_Port="_hVmKkJasEemCgN1WwdiMbQ"/>
  <UMLRTStateMachines:RTState xmi:id="_TgdKQJatEemCgN1WwdiMbQ" base_State="_TgbVEJatEemCgN1WwdiMbQ"/>
  <UMLRTStateMachines:RTState xmi:id="_ZQnLAJatEemCgN1WwdiMbQ" base_State="_ZQlV0JatEemCgN1WwdiMbQ"/>
  <UMLRTStateMachines:RTRegion xmi:id="_KPpbUJavEemCgN1WwdiMbQ" base_Region="_KPki0JavEemCgN1WwdiMbQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KPx-MJavEemCgN1WwdiMbQ" base_Pseudostate="_KPtFsJavEemCgN1WwdiMbQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KP56AJavEemCgN1WwdiMbQ" base_Pseudostate="_KP3dwJavEemCgN1WwdiMbQ"/>
  <UMLRTStateMachines:RTState xmi:id="_tBJrYJavEemCgN1WwdiMbQ" base_State="_tBEy4JavEemCgN1WwdiMbQ"/>
  <UMLRealTime:RTPort xmi:id="_vAzZgJawEemCgN1WwdiMbQ" isPublish="false" isWired="true" base_Port="_vAt58JawEemCgN1WwdiMbQ"/>
  <UMLRealTime:RTConnector xmi:id="_1c3eAJawEemCgN1WwdiMbQ" base_Connector="_1cxXYJawEemCgN1WwdiMbQ"/>
  <UMLRTStateMachines:RTState xmi:id="_OTvCMJa3EemCgN1WwdiMbQ" base_State="_OTqwwJa3EemCgN1WwdiMbQ"/>
  <UMLRTStateMachines:RTState xmi:id="_XaijwJa5EemCgN1WwdiMbQ" base_State="_XagukJa5EemCgN1WwdiMbQ"/>
  <UMLRTStateMachines:RTState xmi:id="_wy6QEJdPEemu8v-9gGlQEg" base_State="_wy3z0JdPEemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Bd7b4JdQEemu8v-9gGlQEg" base_Pseudostate="_Bd3KcJdQEemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTState xmi:id="_As4kAJdREemu8v-9gGlQEg" base_State="_As2u0JdREemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_RBVp8JdREemu8v-9gGlQEg" base_Pseudostate="_RBQxcJdREemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_sSgGUJdXEemu8v-9gGlQEg" base_Region="_sScb8JdXEemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_sSll4JdXEemu8v-9gGlQEg" base_Pseudostate="_sSjwsJdXEemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_sSpQQJdXEemu8v-9gGlQEg" base_Pseudostate="_sSnbEJdXEemu8v-9gGlQEg"/>
  <UMLRealTime:RTConnector xmi:id="_F5jKQZdeEemu8v-9gGlQEg" base_Connector="_F5eRwJdeEemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTState xmi:id="_BcUCkJdhEemu8v-9gGlQEg" base_State="_BcSNYJdhEemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_V3O_4JdnEemu8v-9gGlQEg" base_Region="_V3NxwJdnEemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_V3RcIJdnEemu8v-9gGlQEg" base_Pseudostate="_V3QOAJdnEemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_V3UfcJdnEemu8v-9gGlQEg" base_Pseudostate="_V3TRUJdnEemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTState xmi:id="_XLxJ4JdnEemu8v-9gGlQEg" base_State="_XLutoJdnEemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_gFJVoJd4Eemu8v-9gGlQEg" base_Pseudostate="_gFG5YJd4Eemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTState xmi:id="_n-eCUJd4Eemu8v-9gGlQEg" base_State="_n-cNIJd4Eemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_sz5gMJd4Eemu8v-9gGlQEg" base_Pseudostate="_sz3rAJd4Eemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5tFjsJd5Eemu8v-9gGlQEg" base_Pseudostate="_5tDHcJd5Eemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTState xmi:id="_VJgUMJeIEemu8v-9gGlQEg" base_State="_VJfGEJeIEemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_YgmWYJeJEemu8v-9gGlQEg" base_Region="_YglIQJeJEemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_YgpZsJeJEemu8v-9gGlQEg" base_Pseudostate="_YgnkgJeJEemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTState xmi:id="_ZilX0JeJEemu8v-9gGlQEg" base_State="_ZiiUgJeJEemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_XlomIJeNEemu8v-9gGlQEg" base_Pseudostate="_Xlmw8JeNEemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTState xmi:id="_vQyXYJeOEemu8v-9gGlQEg" base_State="_vQxJQJeOEemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTState xmi:id="_813tAJeOEemu8v-9gGlQEg" base_State="_81130JeOEemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTState xmi:id="_3_IgMJeREemu8v-9gGlQEg" base_State="_3_GrAJeREemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTState xmi:id="_EGJN8JeVEemu8v-9gGlQEg" base_State="_EGH_0JeVEemu8v-9gGlQEg"/>
  <UMLRTStateMachines:RTState xmi:id="_U3TZYJgWEemlgp8TkwLmkA" base_State="_U3PH8JgWEemlgp8TkwLmkA"/>
  <UMLRTStateMachines:RTState xmi:id="_jyWcYJgWEemlgp8TkwLmkA" base_State="_jyUAIJgWEemlgp8TkwLmkA"/>
  <UMLRTStateMachines:RTState xmi:id="_mkyHwJgWEemlgp8TkwLmkA" base_State="_mkvrgJgWEemlgp8TkwLmkA"/>
  <UMLRTStateMachines:RTState xmi:id="_jadZcJgZEemlgp8TkwLmkA" base_State="_jabkQJgZEemlgp8TkwLmkA"/>
  <UMLRTStateMachines:RTState xmi:id="_mTZ8gJgZEemlgp8TkwLmkA" base_State="_mTYHUJgZEemlgp8TkwLmkA"/>
  <UMLRTStateMachines:RTState xmi:id="_8I_TQJgaEemlgp8TkwLmkA" base_State="_8I-FIJgaEemlgp8TkwLmkA"/>
  <UMLRTStateMachines:RTState xmi:id="_EZj64JjiEemlgp8TkwLmkA" base_State="_EZiswJjiEemlgp8TkwLmkA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_Uqhn8JjiEemlgp8TkwLmkA" base_Region="_UqcvcJjiEemlgp8TkwLmkA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_UqnHgJjiEemlgp8TkwLmkA" base_Pseudostate="_UqlSUJjiEemlgp8TkwLmkA"/>
  <UMLRTStateMachines:RTState xmi:id="_FB_XYJjjEemlgp8TkwLmkA" base_State="_FB7tAJjjEemlgp8TkwLmkA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_VM4cMJjkEemlgp8TkwLmkA" base_Region="_VM3OEJjkEemlgp8TkwLmkA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_VM8GkJjkEemlgp8TkwLmkA" base_Pseudostate="_VM64cJjkEemlgp8TkwLmkA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_VM_w8JjkEemlgp8TkwLmkA" base_Pseudostate="_VM97wJjkEemlgp8TkwLmkA"/>
  <UMLRTStateMachines:RTState xmi:id="_WrTiAJjkEemlgp8TkwLmkA" base_State="_WrQesJjkEemlgp8TkwLmkA"/>
  <UMLRTStateMachines:RTState xmi:id="_ZCSAcJjkEemlgp8TkwLmkA" base_State="_ZCQyUJjkEemlgp8TkwLmkA"/>
  <UMLRTStateMachines:RTState xmi:id="_b4CFkJjkEemlgp8TkwLmkA" base_State="_b4A3cJjkEemlgp8TkwLmkA"/>
  <UMLRTStateMachines:RTState xmi:id="_ExvZMJnFEemHu_dwIWKvwA" base_State="_Exru0JnFEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTState xmi:id="_6AWdwJnFEemHu_dwIWKvwA" base_State="_6ASzYJnFEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_6TQgwJnHEemHu_dwIWKvwA" base_Pseudostate="_6TOrkJnHEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_zTFEwJnWEemHu_dwIWKvwA" base_Pseudostate="_zTCBcJnWEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Job10JnaEemHu_dwIWKvwA" base_Pseudostate="_JoaAoJnaEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTState xmi:id="_Mi4NsJnaEemHu_dwIWKvwA" base_State="_Mi2_kJnaEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_s0lagJnaEemHu_dwIWKvwA" base_Region="_s0iXMJnaEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_s0q6EJnaEemHu_dwIWKvwA" base_Pseudostate="_s0pE4JnaEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_s0t9YJnaEemHu_dwIWKvwA" base_Pseudostate="_s0svQJnaEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTState xmi:id="_t5B6EJnaEemHu_dwIWKvwA" base_State="_t4-PsJnaEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTState xmi:id="_vcyy4JnaEemHu_dwIWKvwA" base_State="_vcxkwJnaEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTState xmi:id="_opa6QJndEemHu_dwIWKvwA" base_State="_opZFEJndEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_A5TzcJnjEemHu_dwIWKvwA" base_Pseudostate="_A5R-QJnjEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_A5W2wJnjEemHu_dwIWKvwA" base_Pseudostate="_A5VooJnjEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTState xmi:id="_GKjb4JnpEemHu_dwIWKvwA" base_State="_GKhmsJnpEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_Jrxf8pnpEemHu_dwIWKvwA" base_Region="_Jrw40JnpEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Jr0jMJnpEemHu_dwIWKvwA" base_Pseudostate="_JryuAJnpEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_O-1U8JnpEemHu_dwIWKvwA" base_Pseudostate="_O-zfwJnpEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_eOpHAJnpEemHu_dwIWKvwA" base_Pseudostate="_eOk1kJnpEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_gEToIJnpEemHu_dwIWKvwA" base_Pseudostate="_gESaAJnpEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_3VUQgJnpEemHu_dwIWKvwA" base_Pseudostate="_3VSbUJnpEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTState xmi:id="_78oZ4JnpEemHu_dwIWKvwA" base_State="_78mksJnpEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTState xmi:id="_9yVXQJnpEemHu_dwIWKvwA" base_State="_9yUJIJnpEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_JGyHAJnqEemHu_dwIWKvwA" base_Pseudostate="_JGucoJnqEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_MSE-UJnqEemHu_dwIWKvwA" base_Pseudostate="_MSCiEJnqEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTState xmi:id="_9t8fIJnsEemHu_dwIWKvwA" base_State="_9t6p8JnsEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_6BxdcJnuEemHu_dwIWKvwA" base_Pseudostate="_6BvoQJnuEemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTState xmi:id="_bwJ4EJn5EemHu_dwIWKvwA" base_State="_bwIp8Jn5EemHu_dwIWKvwA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_sPjIoJp7EemI69k4e-oa_g" base_Pseudostate="_sPYwkJp7EemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_sP34wJp7EemI69k4e-oa_g" base_Pseudostate="_sP01cJp7EemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_mVJtIJqDEemI69k4e-oa_g" base_State="_mVH38JqDEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_cOkP8JqJEemI69k4e-oa_g" base_Region="_cOewYJqJEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_cOqWkJqJEemI69k4e-oa_g" base_Pseudostate="_cOohYJqJEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_c_4_MJqJEemI69k4e-oa_g" base_State="_c_2i8JqJEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_e_W8kJqJEemI69k4e-oa_g" base_State="_e_VucJqJEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_jZDgsJqJEemI69k4e-oa_g" base_State="_jZCSkJqJEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="__VAOMJqJEemI69k4e-oa_g" base_State="__U_AEJqJEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_IsOcQJqKEemI69k4e-oa_g" base_Pseudostate="_IsKx4JqKEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_Myd44JqKEemI69k4e-oa_g" base_State="_MycqwJqKEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_ZTQf8JqKEemI69k4e-oa_g" base_State="_ZTOqwJqKEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_ZLBFwJqREemI69k4e-oa_g" base_State="_ZK-pgJqREemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_ecJoMJqREemI69k4e-oa_g" base_Region="_ecIaEJqREemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_fNEHwJqREemI69k4e-oa_g" base_State="_fNBEcJqREemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_i0JjMJqREemI69k4e-oa_g" base_State="_i0IVEJqREemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_lp62cJqREemI69k4e-oa_g" base_State="_lp4aMJqREemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_oMkZYJqREemI69k4e-oa_g" base_State="_oMikMJqREemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_trW9UJqREemI69k4e-oa_g" base_State="_trVvMJqREemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_x4aMkJqREemI69k4e-oa_g" base_State="_x4Y-cJqREemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_3pVCUJqREemI69k4e-oa_g" base_Pseudostate="_3pTNIJqREemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_4IHQEJqREemI69k4e-oa_g" base_Pseudostate="_4IFa4JqREemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_mirN8JqSEemI69k4e-oa_g" base_Pseudostate="_mioxsJqSEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_x7GewJqSEemI69k4e-oa_g" base_Pseudostate="_x7C0YJqSEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5DwjgJqSEemI69k4e-oa_g" base_Pseudostate="_5DvVYJqSEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_9CUq0JqSEemI69k4e-oa_g" base_Pseudostate="_9CS1oJqSEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_CdZzcJqTEemI69k4e-oa_g" base_Pseudostate="_CdYlUJqTEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_expIUJqXEemI69k4e-oa_g" base_Pseudostate="_exnTIJqXEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_gi3OUJqXEemI69k4e-oa_g" base_Pseudostate="_gi2AMJqXEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_5ce90JqYEemI69k4e-oa_g" base_State="_5cdvsJqYEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_i3pFoJqdEemI69k4e-oa_g" base_State="_i3mpYJqdEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_wIKggJqdEemI69k4e-oa_g" base_State="_wIJSYJqdEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_zNJUcJqdEemI69k4e-oa_g" base_Pseudostate="_zNHfQJqdEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_MFYy0Jq-EemI69k4e-oa_g" base_State="_MFW9oJq-EemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_bogWcJtCEemI69k4e-oa_g" base_State="_bofIUJtCEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_KFevIJtDEemI69k4e-oa_g" base_State="_KFdhAJtDEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_3XJyUJtDEemI69k4e-oa_g" base_Pseudostate="_3XHWEJtDEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_6iYYMJtDEemI69k4e-oa_g" base_Pseudostate="_6iVU4JtDEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_LbUQ8JtUEemI69k4e-oa_g" base_Pseudostate="_LbTC0JtUEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_LbWtMJtUEemI69k4e-oa_g" base_Pseudostate="_LbU4AJtUEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_CZ-3sJtyEemI69k4e-oa_g" base_State="_CZ9pkJtyEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Nj6oAJwLEemI69k4e-oa_g" base_Pseudostate="_Nj4y0JwLEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_2ERRQJwLEemI69k4e-oa_g" base_State="_2EQDIJwLEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_pcBlEJwQEemI69k4e-oa_g" base_State="_pcAW8JwQEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_5eEsYJwQEemI69k4e-oa_g" base_Region="_5eDeQJwQEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5eQSkJwQEemI69k4e-oa_g" base_Pseudostate="_5eMBIJwQEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5eaDkJwQEemI69k4e-oa_g" base_Pseudostate="_5eVLEJwQEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5egKMJwQEemI69k4e-oa_g" base_Pseudostate="_5edG4JwQEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_5ej0kJwQEemI69k4e-oa_g" base_Pseudostate="_5eh_YJwQEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_6frTUJwQEemI69k4e-oa_g" base_State="_6fqFMJwQEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_8Kbk8JwQEemI69k4e-oa_g" base_State="_8KaW0JwQEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_pmiyAJwbEemI69k4e-oa_g" base_State="_pmhj4JwbEemI69k4e-oa_g"/>
  <UMLRTStateMachines:RTState xmi:id="_Uo6ggJwmEemcmdsy3pl2Ng" base_State="_UoyksJwmEemcmdsy3pl2Ng"/>
  <UMLRTStateMachines:RTState xmi:id="_tPPgkJwnEemcmdsy3pl2Ng" base_State="_tPNrYJwnEemcmdsy3pl2Ng"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_3wXHMJwtEemcmdsy3pl2Ng" base_Pseudostate="_3wTc0JwtEemcmdsy3pl2Ng"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_3waxkJwtEemcmdsy3pl2Ng" base_Pseudostate="_3wY8YJwtEemcmdsy3pl2Ng"/>
</xmi:XMI>
