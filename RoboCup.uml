<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_FX4asIgqEeiP-_qqZZR9Jg" name="model">
    <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_FX4asYgqEeiP-_qqZZR9Jg" source="http://www.eclipse.org/papyrus-rt/language/1.0.0">
      <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_FX4asogqEeiP-_qqZZR9Jg" key="language" value="umlrt-cpp"/>
    </eAnnotations>
    <packagedElement xmi:type="uml:Class" xmi:id="_HR_-AIgqEeiP-_qqZZR9Jg" name="Top" isActive="true">
      <ownedAttribute xmi:type="uml:Property" xmi:id="_WIGPkIgqEeiP-_qqZZR9Jg" name="player1" visibility="protected" type="_J_oo8IgqEeiP-_qqZZR9Jg" isOrdered="true" aggregation="composite"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_IQj4AIgqEeiP-_qqZZR9Jg" name="OpponentObserver" classifierBehavior="_aLDAQIgtEeiP-_qqZZR9Jg" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_YHmXQIgsEeiP-_qqZZR9Jg" name="observationProtocol" visibility="public" type="_dCmjkIgqEeiP-_qqZZR9Jg" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true" isService="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_TnTmcIgtEeiP-_qqZZR9Jg" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_UULTgIgtEeiP-_qqZZR9Jg" name="timer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_w861kIgtEeiP-_qqZZR9Jg" name="sock" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_pt4mkIguEeiP-_qqZZR9Jg" name="readyMsg" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        <defaultValue xmi:type="uml:LiteralString" xmi:id="_0c_0oIguEeiP-_qqZZR9Jg" value="ready\n"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_8QowEIguEeiP-_qqZZR9Jg" name="gpsMsg" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        <defaultValue xmi:type="uml:LiteralString" xmi:id="_DWRWAIgvEeiP-_qqZZR9Jg" value="Leader,GPS()\n"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_GYZqQIgvEeiP-_qqZZR9Jg" name="distanceMsg" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        <defaultValue xmi:type="uml:LiteralString" xmi:id="_K_SV0IgvEeiP-_qqZZR9Jg" value="Leader,Distance()\n"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_RoGDkIg0EeiP-_qqZZR9Jg" name="samplerate" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_8heigBydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_WnLzwIg0EeiP-_qqZZR9Jg" value="100000000"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_EJI60JRkEem-h8JsU1axzg" name="tcp" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_tEiNsa1CEeeZPMea3Z4z9w"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_aLDAQIgtEeiP-_qqZZR9Jg" name="ObserverStateMachine" isReentrant="false">
        <region xmi:type="uml:Region" xmi:id="_aLOmcIgtEeiP-_qqZZR9Jg" name="Region">
          <transition xmi:type="uml:Transition" xmi:id="_aLZlkIgtEeiP-_qqZZR9Jg" name="Initial" source="_aLRCsIgtEeiP-_qqZZR9Jg" target="_aLWiQIgtEeiP-_qqZZR9Jg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KEJ_wIguEeiP-_qqZZR9Jg">
              <language>C++</language>
              <body>  /*  if ((sock = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0) {
    log.show(&quot;Error creating socket\n&quot;);
    exit(1);
    }
    struct sockaddr_in serv_addr;
    memset(&amp;serv_addr, '0', sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(9999);
    inet_pton(AF_INET, &quot;127.0.0.1&quot;, &amp;serv_addr.sin_addr);

	log.show(&quot;Connecting...\n&quot;);
    if (connect(sock, (struct sockaddr *)&amp;serv_addr, sizeof(serv_addr)) &lt; 0) {
    log.show(&quot;Connection Failed\n&quot;);
    exit(1);
    }
	log.show(&quot;Connected\n&quot;);

	send(sock, readyMsg, strlen(readyMsg), 0);
	char buffer[256];
	recv(sock, buffer, sizeof(buffer), 0);	*/</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_VAJI8IjuEeiP-_qqZZR9Jg" name="" kind="external" source="_aLWiQIgtEeiP-_qqZZR9Jg" target="_MXIrwIjuEeiP-_qqZZR9Jg"/>
          <transition xmi:type="uml:Transition" xmi:id="_WfQLQIjuEeiP-_qqZZR9Jg" name="" kind="external" source="_aLWiQIgtEeiP-_qqZZR9Jg" target="_Rrb28IjuEeiP-_qqZZR9Jg"/>
          <transition xmi:type="uml:Transition" xmi:id="_aB1hMIjuEeiP-_qqZZR9Jg" name="" kind="external" source="_aLWiQIgtEeiP-_qqZZR9Jg" target="_O4Io4IjuEeiP-_qqZZR9Jg"/>
          <transition xmi:type="uml:Transition" xmi:id="_g4iTQIjuEeiP-_qqZZR9Jg" name="" kind="external" source="_MXIrwIjuEeiP-_qqZZR9Jg" target="_aLWiQIgtEeiP-_qqZZR9Jg">
            <trigger xmi:type="uml:Trigger" xmi:id="_sY2UwIjuEeiP-_qqZZR9Jg" port="_UULTgIgtEeiP-_qqZZR9Jg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_nH9C4IjuEeiP-_qqZZR9Jg" name="" kind="external" source="_Rrb28IjuEeiP-_qqZZR9Jg" target="_aLWiQIgtEeiP-_qqZZR9Jg">
            <trigger xmi:type="uml:Trigger" xmi:id="_vJjh0IjuEeiP-_qqZZR9Jg" port="_UULTgIgtEeiP-_qqZZR9Jg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_qNXUoIjuEeiP-_qqZZR9Jg" name="" kind="external" source="_O4Io4IjuEeiP-_qqZZR9Jg" target="_aLWiQIgtEeiP-_qqZZR9Jg">
            <trigger xmi:type="uml:Trigger" xmi:id="_t0HY4IjuEeiP-_qqZZR9Jg" port="_UULTgIgtEeiP-_qqZZR9Jg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_aLRCsIgtEeiP-_qqZZR9Jg" kind="initial"/>
          <subvertex xmi:type="uml:State" xmi:id="_aLWiQIgtEeiP-_qqZZR9Jg" name="WAITING"/>
          <subvertex xmi:type="uml:State" xmi:id="_MXIrwIjuEeiP-_qqZZR9Jg" name="SIGNAL_READY">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_R4FWYIjvEeiP-_qqZZR9Jg" name="Entry">
              <language>C++</language>
              <body>/*	send(sock, readyMsg, strlen(readyMsg), 0);
	char buffer[256];
	recv(sock, buffer, sizeof(buffer), 0);	
	timer.informIn(UMLRTTimespec(0, 0));*/</body>
            </entry>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_O4Io4IjuEeiP-_qqZZR9Jg" name="QUERY_GPS">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_UcnvsIjvEeiP-_qqZZR9Jg" name="Entry">
              <language>C++</language>
              <body>    /*static char buffer[256];

    // get gps
    send(sock, gpsMsg, strlen(gpsMsg), 0);
	recv(sock, buffer, sizeof(buffer), 0);
  
    // skip Leader
    strtok(buffer, &quot;,&quot;);
    float x = atof(strtok(NULL, &quot;,&quot;));
    float y = atof(strtok(NULL, &quot;;&quot;));    
	observationProtocol.position(x, y).send();
	timer.informIn(UMLRTTimespec(0, 0));
*/</body>
            </entry>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_Rrb28IjuEeiP-_qqZZR9Jg" name="QUERY_DISTANCE">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Vz2oYIjvEeiP-_qqZZR9Jg" name="Entry">
              <language>C++</language>
              <body>/*    static char buffer[256];

    // get distance
    send(sock, distanceMsg, strlen(distanceMsg), 0);
    recv(sock, buffer, sizeof(buffer), 0);

    // skip Leader
    strtok(buffer, &quot;,&quot;);
    float distance = atof(strtok(NULL, &quot;;&quot;));
    
	observationProtocol.distance(distance).send();
	timer.informIn(UMLRTTimespec(0, 0));
*/</body>
            </entry>
          </subvertex>
        </region>
      </ownedBehavior>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_J_oo8IgqEeiP-_qqZZR9Jg" name="Player" classifierBehavior="_uUhkEIg6EeiP-_qqZZR9Jg" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_oLctAIg6EeiP-_qqZZR9Jg" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_IVPT8Ig7EeiP-_qqZZR9Jg" name="ballReachable" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        <qualifier xmi:type="uml:Property" xmi:id="_vTY6MJXzEemnlJvKCgeTXw" name="ballReachable" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_vTZhQJXzEemnlJvKCgeTXw"/>
        </qualifier>
        <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_5ukm4JUHEemnlJvKCgeTXw"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_KiNh0Ig7EeiP-_qqZZR9Jg" name="minDistance" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_RiXx4Ig7EeiP-_qqZZR9Jg" value="12"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_S7Bm4Ig7EeiP-_qqZZR9Jg" name="maxDistance" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_V-W1AIg7EeiP-_qqZZR9Jg" value="15"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_Jdtl0IhlEeiP-_qqZZR9Jg" name="direction">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_QQGO4IiBEeiP-_qqZZR9Jg" name="playerX">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralReal" xmi:id="_Tj5h8IiBEeiP-_qqZZR9Jg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_UzmPQIiBEeiP-_qqZZR9Jg" name="playerZ" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralReal" xmi:id="_WcgGwIiBEeiP-_qqZZR9Jg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_yfQfgIiEEeiP-_qqZZR9Jg" name="ballPossesion">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_Epq7QJX0EemnlJvKCgeTXw"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_0Zy5kIiEEeiP-_qqZZR9Jg" name="ballX">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_1R8pkIiEEeiP-_qqZZR9Jg" name="ballZ">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_pwcy8IidEeiP-_qqZZR9Jg" name="playerController" visibility="protected" type="_qAMfIIidEeiP-_qqZZR9Jg" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_yDDiUIidEeiP-_qqZZR9Jg" name="controlProtocol" visibility="protected" type="_U7rjgIidEeiP-_qqZZR9Jg" isOrdered="true" aggregation="composite" isBehavior="true" isService="false"/>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_wO4noIjtEeiP-_qqZZR9Jg" name="opponentObserver" visibility="protected" type="_IQj4AIgqEeiP-_qqZZR9Jg" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_43GaoIjtEeiP-_qqZZR9Jg" name="observationProtocol" visibility="protected" type="_dCmjkIgqEeiP-_qqZZR9Jg" isOrdered="true" aggregation="composite" isBehavior="true" isService="false"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_Qi1zAIj1EeiP-_qqZZR9Jg" name="timer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_aKR1EIj6EeiP-_qqZZR9Jg" name="targetRotation" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_mMHdgJRPEem-h8JsU1axzg" name="tcp" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_tEiNsa1CEeeZPMea3Z4z9w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_cPz_wJXsEemnlJvKCgeTXw" name="referee" visibility="protected" type="_VuOiEJXsEemnlJvKCgeTXw" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_3D17kJXvEemnlJvKCgeTXw" name="refereeProtocol" visibility="protected" type="_ibMj8JXsEemnlJvKCgeTXw" isOrdered="true" aggregation="composite" isBehavior="true" isService="false"/>
      <ownedConnector xmi:type="uml:Connector" xmi:id="_8Rj9sIidEeiP-_qqZZR9Jg" name="RTConnector1">
        <end xmi:type="uml:ConnectorEnd" xmi:id="_8Rly4IidEeiP-_qqZZR9Jg" partWithPort="_pwcy8IidEeiP-_qqZZR9Jg" role="_2ydQsIidEeiP-_qqZZR9Jg"/>
        <end xmi:type="uml:ConnectorEnd" xmi:id="_8RmZ8IidEeiP-_qqZZR9Jg" role="_yDDiUIidEeiP-_qqZZR9Jg"/>
      </ownedConnector>
      <ownedConnector xmi:type="uml:Connector" xmi:id="_Bn7-IIjuEeiP-_qqZZR9Jg" name="RTConnector2">
        <end xmi:type="uml:ConnectorEnd" xmi:id="_Bn-aYIjuEeiP-_qqZZR9Jg" partWithPort="_wO4noIjtEeiP-_qqZZR9Jg" role="_YHmXQIgsEeiP-_qqZZR9Jg"/>
        <end xmi:type="uml:ConnectorEnd" xmi:id="_Bn-aYYjuEeiP-_qqZZR9Jg" role="_43GaoIjtEeiP-_qqZZR9Jg"/>
      </ownedConnector>
      <ownedConnector xmi:type="uml:Connector" xmi:id="_76m2MJXvEemnlJvKCgeTXw" name="RTConnector3">
        <end xmi:type="uml:ConnectorEnd" xmi:id="_76sVwJXvEemnlJvKCgeTXw" partWithPort="_cPz_wJXsEemnlJvKCgeTXw" role="_iSOGwJXvEemnlJvKCgeTXw"/>
        <end xmi:type="uml:ConnectorEnd" xmi:id="_76sVwZXvEemnlJvKCgeTXw" role="_3D17kJXvEemnlJvKCgeTXw"/>
      </ownedConnector>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_uUhkEIg6EeiP-_qqZZR9Jg" name="PlayerStateMachine" isReentrant="false">
        <region xmi:type="uml:Region" xmi:id="_uUoRwIg6EeiP-_qqZZR9Jg" name="Region">
          <transition xmi:type="uml:Transition" xmi:id="_uUuYYIg6EeiP-_qqZZR9Jg" name="Initial" source="_uUqG8Ig6EeiP-_qqZZR9Jg" target="_uUsjMIg6EeiP-_qqZZR9Jg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_QCdz4JRREem-h8JsU1axzg" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>// setup tcp connection

tcp.connect(&quot;127.0.0.1&quot;,9003);
</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_iYVG8Ih-EeiP-_qqZZR9Jg" kind="external" source="_uUsjMIg6EeiP-_qqZZR9Jg" target="_AYOGgIidEeiP-_qqZZR9Jg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Gz_N8JRYEem-h8JsU1axzg" name="Effect" isReentrant="false">
              <language>C++</language>
              <body> std::cout&lt;&lt;&quot;TCP connection stablished successfully!\n\n\n&quot;;</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_qaxH4JRSEem-h8JsU1axzg" port="_mMHdgJRPEem-h8JsU1axzg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_s9iNgMT3Eei7WtNtKyCSvw"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_YJhXQJXVEemnlJvKCgeTXw" name="" kind="external" source="_YJY0YJXVEemnlJvKCgeTXw" target="_UoQP8JXVEemnlJvKCgeTXw"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_uUqG8Ig6EeiP-_qqZZR9Jg" kind="initial"/>
          <subvertex xmi:type="uml:State" xmi:id="_uUsjMIg6EeiP-_qqZZR9Jg" name="CONNECTING"/>
          <subvertex xmi:type="uml:State" xmi:id="_4dPM8IicEeiP-_qqZZR9Jg" name="MOVMENT_TOWARDS_BALL">
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_AYOGgIidEeiP-_qqZZR9Jg" kind="entryPoint"/>
            <connectionPoint xmi:type="uml:Pseudostate" xmi:id="_YJY0YJXVEemnlJvKCgeTXw" kind="exitPoint"/>
            <region xmi:type="uml:Region" xmi:id="_AYJ1EIidEeiP-_qqZZR9Jg" name="Region1">
              <transition xmi:type="uml:Transition" xmi:id="_EqPqcIifEeiP-_qqZZR9Jg" kind="local" source="_AYOGgIidEeiP-_qqZZR9Jg" target="_nC4DsIjwEeiP-_qqZZR9Jg"/>
              <transition xmi:type="uml:Transition" xmi:id="_QevMMIifEeiP-_qqZZR9Jg" name="" kind="external" source="_FJnY8IidEeiP-_qqZZR9Jg" target="_OR5vwJUCEemnlJvKCgeTXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ZN24cIifEeiP-_qqZZR9Jg">
                  <language>C++</language>
                  <body> std::cout&lt;&lt;&quot;[RECEIVED]: &quot;&lt;&lt; payload &lt;&lt;&quot;\n&quot;;

std::string payloadStr (payload);
int pos1 = payloadStr.find(&quot;,&quot;);
std::string PlayerNameStr = payloadStr.substr(0, pos1);

int pos2 = payloadStr.find(&quot;,&quot;,pos1+1);
std::string xStr = payloadStr.substr(pos1+1, pos2);

int size = payloadStr.size();

std::string zStr = payloadStr.substr(pos2+1, size);




ballX = std::stof(xStr);
ballZ = std::stof(zStr);

std::cout&lt;&lt;&quot;[RECEIVED][ballX]: &quot;&lt;&lt; ballX &lt;&lt;&quot;\n&quot;;
std::cout&lt;&lt;&quot;[RECEIVED][ballZ]: &quot;&lt;&lt; ballZ &lt;&lt;&quot;\n&quot;;



//====================[isBallReachable?]============================

if ((abs(ballX - playerX) &lt; 8) &amp;&amp; (abs(ballZ - playerZ) &lt; 8))
	ballReachable = true;
else
	ballReachable = false;</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_Eu_EgJUBEemnlJvKCgeTXw" port="_mMHdgJRPEem-h8JsU1axzg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_zwyoUK1YEee74Ow6RXIGBA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_JRfCEIjxEeiP-_qqZZR9Jg" name="" kind="external" source="_nC4DsIjwEeiP-_qqZZR9Jg" target="_DhKCMIjxEeiP-_qqZZR9Jg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_evMg0IjxEeiP-_qqZZR9Jg">
                  <language>C++</language>
                  <body> std::cout&lt;&lt;&quot;[RECEIVED]: &quot;&lt;&lt; payload &lt;&lt;&quot;\n&quot;;

std::string payloadStr (payload);
int pos1 = payloadStr.find(&quot;,&quot;);
std::string PlayerNameStr = payloadStr.substr(0, pos1);

int size = payloadStr.size();

int pos2 = payloadStr.find(&quot;,&quot;,pos1+1);
std::string compassStr = payloadStr.substr(pos1+1, size);


direction = std::atof(compassStr.c_str());
std::cout&lt;&lt;&quot;[RECEIVED][direction]: &quot;&lt;&lt; direction &lt;&lt;&quot;\n&quot;;</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_TBr2sJRUEem-h8JsU1axzg" port="_mMHdgJRPEem-h8JsU1axzg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_zwyoUK1YEee74Ow6RXIGBA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_KEInAIjxEeiP-_qqZZR9Jg" kind="external" source="_DhKCMIjxEeiP-_qqZZR9Jg" target="_FJnY8IidEeiP-_qqZZR9Jg">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_iBafgIjxEeiP-_qqZZR9Jg">
                  <language>C++</language>
                  <body> std::cout&lt;&lt;&quot;[RECEIVED]: &quot;&lt;&lt; payload &lt;&lt;&quot;\n&quot;;

std::string payloadStr (payload);
int pos1 = payloadStr.find(&quot;,&quot;);
std::string PlayerNameStr = payloadStr.substr(0, pos1);

int pos2 = payloadStr.find(&quot;,&quot;,pos1+1);
std::string xStr = payloadStr.substr(pos1+1, pos2);

int size = payloadStr.size();

std::string zStr = payloadStr.substr(pos2+1, size);




playerX = std::stof(xStr);
playerZ = std::stof(zStr);

 std::cout&lt;&lt;&quot;[RECEIVED][playerX]: &quot;&lt;&lt; playerX &lt;&lt;&quot;\n&quot;;
 std::cout&lt;&lt;&quot;[RECEIVED][playerZ]: &quot;&lt;&lt; playerZ &lt;&lt;&quot;\n&quot;;

</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_VzrnwJRVEem-h8JsU1axzg" port="_mMHdgJRPEem-h8JsU1axzg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_zwyoUK1YEee74Ow6RXIGBA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_AnqF8JUFEemnlJvKCgeTXw" name="NO" guard="_Y9PwwJUFEemnlJvKCgeTXw" kind="external" source="_OR5vwJUCEemnlJvKCgeTXw" target="_Bft6EIidEeiP-_qqZZR9Jg">
                <ownedRule xmi:type="uml:Constraint" xmi:id="_Y9PwwJUFEemnlJvKCgeTXw">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_Y9Rl8JUFEemnlJvKCgeTXw">
                    <language>C++</language>
                    <body>
return !ballReachable;</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_7ofyYJUGEemnlJvKCgeTXw" name="Effect" isReentrant="false">
                  <language>C++</language>
                  <body> std::cout&lt;&lt;&quot;[ballReachable]: &quot;&lt;&lt; ballReachable &lt;&lt;&quot;\n&quot;;</body>
                </effect>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_SudTQJUFEemnlJvKCgeTXw" name="YES" guard="_y_mC4JUGEemnlJvKCgeTXw" kind="external" source="_OR5vwJUCEemnlJvKCgeTXw" target="_yVZhMJXIEemnlJvKCgeTXw">
                <ownedRule xmi:type="uml:Constraint" xmi:id="_y_mC4JUGEemnlJvKCgeTXw">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_y_nRAJUGEemnlJvKCgeTXw">
                    <language>C++</language>
                    <body>return ballReachable;</body>
                  </specification>
                </ownedRule>
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_3Xf3QJUGEemnlJvKCgeTXw" name="Effect" isReentrant="false">
                  <language>C++</language>
                  <body> std::cout&lt;&lt;&quot;[ballReachable]: &quot;&lt;&lt; ballReachable &lt;&lt;&quot;\n&quot;;</body>
                </effect>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_PBaiUJUcEemnlJvKCgeTXw" name="" kind="external" source="_Bft6EIidEeiP-_qqZZR9Jg" target="_MjYMEJU8EemnlJvKCgeTXw">
                <trigger xmi:type="uml:Trigger" xmi:id="_bBxV0JUcEemnlJvKCgeTXw" port="_Qi1zAIj1EeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_R7CNQJU8EemnlJvKCgeTXw" name="" kind="external" source="_MjYMEJU8EemnlJvKCgeTXw" target="_nC4DsIjwEeiP-_qqZZR9Jg">
                <trigger xmi:type="uml:Trigger" xmi:id="_ZqOGgJU8EemnlJvKCgeTXw" port="_Qi1zAIj1EeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_R31A4JU_EemnlJvKCgeTXw" name="" kind="external" source="_DAwEQJUFEemnlJvKCgeTXw" target="_sBq8sJXxEemnlJvKCgeTXw">
                <trigger xmi:type="uml:Trigger" xmi:id="_TmCPIJU_EemnlJvKCgeTXw" port="_Qi1zAIj1EeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_E4_YMJXJEemnlJvKCgeTXw" name="" kind="external" source="_yVZhMJXIEemnlJvKCgeTXw" target="_MvipoJYJEemnlJvKCgeTXw">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_dRqWwJXKEemnlJvKCgeTXw" name="Effect" isReentrant="false">
                  <language>C++</language>
                  <body>if ((ballZ-playerZ &lt; 0) &amp;&amp; (abs(direction - 90)&lt;1))
	ballReachable = true;

else if((ballZ-playerZ > 0) &amp;&amp; (abs(direction - 270)&lt;1))
	ballReachable = true;

else if((ballX-playerX &lt; 0) &amp;&amp; (abs(direction - 180)&lt;1))
	ballReachable = true;

else if((ballX-playerX > 0) &amp;&amp; (abs(direction - 360)&lt;1))
	ballReachable = true;

else if((ballX-playerX > 0) &amp;&amp; (abs(direction - 0)&lt;1))
	ballReachable = true;

else
	ballReachable = false;

</body>
                </effect>
                <trigger xmi:type="uml:Trigger" xmi:id="_Ul-jkJXLEemnlJvKCgeTXw" port="_Qi1zAIj1EeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_ISJ18JXVEemnlJvKCgeTXw" name="YES_GET_BALL" guard="_9ehpYJXWEemnlJvKCgeTXw" kind="external" source="_ctKXAJXUEemnlJvKCgeTXw" target="_DAwEQJUFEemnlJvKCgeTXw">
                <ownedRule xmi:type="uml:Constraint" xmi:id="_9ehpYJXWEemnlJvKCgeTXw">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_9eiQcJXWEemnlJvKCgeTXw">
                    <language>C++</language>
                    <body>return ballReachable;</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_sTDRUJXVEemnlJvKCgeTXw" name="NO_STOP" guard="_8mLsIJXWEemnlJvKCgeTXw" kind="external" source="_ctKXAJXUEemnlJvKCgeTXw" target="_nC4DsIjwEeiP-_qqZZR9Jg">
                <ownedRule xmi:type="uml:Constraint" xmi:id="_8mLsIJXWEemnlJvKCgeTXw">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_8mMTMJXWEemnlJvKCgeTXw">
                    <language>C++</language>
                    <body>return !ballReachable;</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_FVpiYJXyEemnlJvKCgeTXw" guard="_PX8GsJXyEemnlJvKCgeTXw" kind="external" source="_sBq8sJXxEemnlJvKCgeTXw" target="_DAwEQJUFEemnlJvKCgeTXw">
                <ownedRule xmi:type="uml:Constraint" xmi:id="_PX8GsJXyEemnlJvKCgeTXw">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_PX8twJXyEemnlJvKCgeTXw">
                    <language>C++</language>
                    <body>return !ballPossesion;</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_Le28UJXyEemnlJvKCgeTXw" guard="_Wjs34JX0EemnlJvKCgeTXw" kind="external" source="_sBq8sJXxEemnlJvKCgeTXw" target="_YJY0YJXVEemnlJvKCgeTXw">
                <ownedRule xmi:type="uml:Constraint" xmi:id="_Wjs34JX0EemnlJvKCgeTXw">
                  <specification xmi:type="uml:OpaqueExpression" xmi:id="_Wjs34ZX0EemnlJvKCgeTXw">
                    <language>C++</language>
                    <body>return ballPossesion;</body>
                  </specification>
                </ownedRule>
              </transition>
              <transition xmi:type="uml:Transition" xmi:id="_XwG0EJYJEemnlJvKCgeTXw" kind="external" source="_MvipoJYJEemnlJvKCgeTXw" target="_ctKXAJXUEemnlJvKCgeTXw">
                <trigger xmi:type="uml:Trigger" xmi:id="_e5q3wJYJEemnlJvKCgeTXw" port="_Qi1zAIj1EeiP-_qqZZR9Jg">
                  <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_Bft6EIidEeiP-_qqZZR9Jg" name="CALC_MOVMENT_TO_BALL">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_O7a_UIifEeiP-_qqZZR9Jg" name="Entry">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;&quot;[CALC_MOVMENT_TO_BALL] \n&quot;;

int moveForward =  playerX - ballX;
int moveRight =  playerZ - ballZ;

std::cout&lt;&lt;&quot;[CALC_MOVMENT_TO_BALL][moveForward]:&quot;&lt;&lt; moveForward &lt;&lt;&quot;\n&quot;;
std::cout&lt;&lt;&quot;[CALC_MOVMENT_TO_BALL][moveRight]:&quot;&lt;&lt; moveRight &lt;&lt;&quot;\n&quot;;

//if ((270 - direction > 0))){

	if (moveForward > 0)
		tcp.send(&quot;player2,moveForward(100)&quot;);
	else if (moveForward == 0) 
		tcp.send(&quot;player2,moveForward(0)&quot;);
	else 
		tcp.send(&quot;player2,moveForward(-100)&quot;);


	if (moveRight > 0)
		tcp.send(&quot;player2,moveRight(100)&quot;);
	else if (moveRight == 0) 
		tcp.send(&quot;player2,moveRight(0)&quot;);
	else 
		tcp.send(&quot;player2,moveRight(-100)&quot;);

//}
timer.informIn(UMLRTTimespec(0, 900000000));

</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_FJnY8IidEeiP-_qqZZR9Jg" name="GET_BALL_POSITION">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_sh9f0JUAEemnlJvKCgeTXw" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body>tcp.send(&quot;ball,GPS()&quot;);
 std::cout&lt;&lt;&quot;[SEND]: ball,GPS() \n&quot;;</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_nC4DsIjwEeiP-_qqZZR9Jg" name="GET_COMPASS">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_woTF0IjwEeiP-_qqZZR9Jg" name="Entry">
                  <language>C++</language>
                  <body>tcp.send(&quot;player2,getCompass()&quot;);
 std::cout&lt;&lt;&quot;[SEND]: player2,getCompass() \n&quot;;</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_DhKCMIjxEeiP-_qqZZR9Jg" name="GET_PLAYER_POS">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_RBrn8IjxEeiP-_qqZZR9Jg" name="Entry">
                  <language>C++</language>
                  <body>tcp.send(&quot;player2,GPS()&quot;);
 std::cout&lt;&lt;&quot;[SEND]: player2,GPS() \n&quot;;</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_OR5vwJUCEemnlJvKCgeTXw" name="isBallReachable?" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_DAwEQJUFEemnlJvKCgeTXw" name="GET_BALL">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_ARpHwJUHEemnlJvKCgeTXw" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body> std::cout&lt;&lt;&quot;[GET_BALL] \n&quot;;

tcp.send(&quot;player2,setSuction(100)&quot;);

timer.informIn(UMLRTTimespec(0, 100000000));
</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_MjYMEJU8EemnlJvKCgeTXw" name="STOP">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_U2lYYJU8EemnlJvKCgeTXw" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body> std::cout&lt;&lt;&quot;[SEND] player2,stop() \n&quot;;
tcp.send(&quot;player2,stop()&quot;);
timer.informIn(UMLRTTimespec(0, 100000000));</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_yVZhMJXIEemnlJvKCgeTXw" name="SPIN_TO_BALL">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Bm4uQJXJEemnlJvKCgeTXw" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body>std::cout&lt;&lt;&quot;[SPIN_TO_BALL] \n&quot;;
long int spinTime = 0;

if ((ballZ - playerZ > 0)&amp;&amp; (abs(direction - 270)>1)){
	spinTime = abs(direction - 270)*10000000;
	tcp.send(&quot;player2,spin(100)&quot;);
	std::cout&lt;&lt;&quot;[SPIN_TO_BALL][1]\n&quot;;
}else if ((ballZ - playerZ &lt; 0) &amp;&amp; (abs(direction - 90)>1)){

	spinTime = abs(direction - 90)*10000000;
	tcp.send(&quot;player2,spin(-100)&quot;);
	std::cout&lt;&lt;&quot;[SPIN_TO_BALL][2]\n&quot;;
}else if (ballZ - playerZ == 0){

	spinTime = 100;
	std::cout&lt;&lt;&quot;[SPIN_TO_BALL][3]\n&quot;;
}

std::cout&lt;&lt;&quot;[SPIN_TO_BALL][direction]: &quot;&lt;&lt;direction &lt;&lt; &quot;, [spinTime]: &quot;&lt;&lt;spinTime&lt;&lt; &quot;\n&quot;;
timer.informIn(UMLRTTimespec(0, spinTime));</body>
                </entry>
              </subvertex>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_ctKXAJXUEemnlJvKCgeTXw" kind="choice"/>
              <subvertex xmi:type="uml:Pseudostate" xmi:id="_sBq8sJXxEemnlJvKCgeTXw" kind="choice"/>
              <subvertex xmi:type="uml:State" xmi:id="_MvipoJYJEemnlJvKCgeTXw" name="STOP_SPIN">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_WmrG0JYJEemnlJvKCgeTXw" name="Entry" isReentrant="false">
                  <language>C++</language>
                  <body> std::cout&lt;&lt;&quot;[SEND] player2,stop() \n&quot;;
tcp.send(&quot;player2,stop()&quot;);
timer.informIn(UMLRTTimespec(0, 100000000));</body>
                </entry>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_UoQP8JXVEemnlJvKCgeTXw" name="MOVMENT_TOWARDS_GOAL"/>
        </region>
      </ownedBehavior>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_qAMfIIidEeiP-_qqZZR9Jg" name="PlayerController" classifierBehavior="_M-OIQIieEeiP-_qqZZR9Jg" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_2ydQsIidEeiP-_qqZZR9Jg" name="controlProtocol" visibility="public" type="_U7rjgIidEeiP-_qqZZR9Jg" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true" isService="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_xFvwEIieEeiP-_qqZZR9Jg" name="timer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_tvCoEIigEeiP-_qqZZR9Jg" name="sock">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_y3Op4IigEeiP-_qqZZR9Jg" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_BdWqAJRkEem-h8JsU1axzg" name="tcp" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_tEiNsa1CEeeZPMea3Z4z9w"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_M-OIQIieEeiP-_qqZZR9Jg" name="ControllerStateMachine" isReentrant="false">
        <region xmi:type="uml:Region" xmi:id="_M-U18IieEeiP-_qqZZR9Jg" name="Region">
          <transition xmi:type="uml:Transition" xmi:id="_M-ZucYieEeiP-_qqZZR9Jg" name="Initial" source="_M-WEEIieEeiP-_qqZZR9Jg" target="_M-YgUIieEeiP-_qqZZR9Jg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_qTl04IigEeiP-_qqZZR9Jg">
              <language>C++</language>
              <body> /*   if ((sock = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0) {
    		log.show(&quot;Error creating socket\n&quot;);
    		exit(1);
    }
    struct sockaddr_in serv_addr;
    memset(&amp;serv_addr, '0', sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(9998);
    inet_pton(AF_INET, &quot;127.0.0.1&quot;, &amp;serv_addr.sin_addr);

	log.show(&quot;Connecting...\n&quot;);
    if (connect(sock, (struct sockaddr *)&amp;serv_addr, sizeof(serv_addr)) &lt; 0) {
    		log.show(&quot;Connection Failed\n&quot;);
    		exit(1);
    }
	log.show(&quot;Connected\n&quot;);*/</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_TSpTsIieEeiP-_qqZZR9Jg" name="" kind="external" source="_M-YgUIieEeiP-_qqZZR9Jg" target="_R1mt8IieEeiP-_qqZZR9Jg"/>
          <transition xmi:type="uml:Transition" xmi:id="_eVn48IieEeiP-_qqZZR9Jg" name="" kind="external" source="_M-YgUIieEeiP-_qqZZR9Jg" target="_VP9U8IieEeiP-_qqZZR9Jg"/>
          <transition xmi:type="uml:Transition" xmi:id="_mAkycIieEeiP-_qqZZR9Jg" name="" kind="external" source="_R1mt8IieEeiP-_qqZZR9Jg" target="_M-YgUIieEeiP-_qqZZR9Jg">
            <trigger xmi:type="uml:Trigger" xmi:id="_981-UIieEeiP-_qqZZR9Jg" port="_xFvwEIieEeiP-_qqZZR9Jg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_r02eMIieEeiP-_qqZZR9Jg" name="" kind="external" source="_VP9U8IieEeiP-_qqZZR9Jg" target="_M-YgUIieEeiP-_qqZZR9Jg">
            <trigger xmi:type="uml:Trigger" xmi:id="__YUd0IieEeiP-_qqZZR9Jg" port="_xFvwEIieEeiP-_qqZZR9Jg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_iyNU0IilEeiP-_qqZZR9Jg" name="" kind="external" source="_M-YgUIieEeiP-_qqZZR9Jg" target="_VNRwMIilEeiP-_qqZZR9Jg"/>
          <transition xmi:type="uml:Transition" xmi:id="_llOPAIilEeiP-_qqZZR9Jg" kind="external" source="_VNRwMIilEeiP-_qqZZR9Jg" target="_M-YgUIieEeiP-_qqZZR9Jg">
            <trigger xmi:type="uml:Trigger" xmi:id="_o7ZgoIilEeiP-_qqZZR9Jg" port="_xFvwEIieEeiP-_qqZZR9Jg">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_M-WEEIieEeiP-_qqZZR9Jg" kind="initial"/>
          <subvertex xmi:type="uml:State" xmi:id="_M-YgUIieEeiP-_qqZZR9Jg" name="WAITING"/>
          <subvertex xmi:type="uml:State" xmi:id="_R1mt8IieEeiP-_qqZZR9Jg" name="QUERY_GPS">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_7ZnXIIifEeiP-_qqZZR9Jg" name="Entry">
              <language>C++</language>
              <body> /*   static char buffer[256];
    sprintf(buffer, &quot;Rover,GPS()\n&quot;);
    send(sock, buffer, strlen(buffer), 0);
    recv(sock, buffer, sizeof(buffer), 0);

    // skip Rover
    strtok(buffer, &quot;,&quot;);
    float x = atof(strtok(NULL, &quot;,&quot;));
    float y = atof(strtok(NULL, &quot;;&quot;));
	
    controlProtocol.position(x,y).send();
    timer.informIn(UMLRTTimespec(0, 0));*/</body>
            </entry>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_VP9U8IieEeiP-_qqZZR9Jg" name="QUERY_COMPASS">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_uPKIAIifEeiP-_qqZZR9Jg" name="Entry">
              <language>C++</language>
              <body>  /*  static char buffer[256];
    sprintf(buffer, &quot;Rover,getCompass()\n&quot;);
    send(sock, buffer, strlen(buffer), 0);
    recv(sock, buffer, sizeof(buffer), 0);

    // skip Rover
    strtok(buffer, &quot;,&quot;);
    float degrees = atof(strtok(NULL, &quot;;&quot;));
	controlProtocol.rotation(degrees).send();
    timer.informIn(UMLRTTimespec(0, 0));*/</body>
            </entry>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_VNRwMIilEeiP-_qqZZR9Jg" name="SET_POWER">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_b-YQkIilEeiP-_qqZZR9Jg" name="Entry">
              <language>C++</language>
              <body>/*static char buffer[256];
sprintf(buffer, &quot;Rover,setLRPower(%d, %d)\n&quot;, (int) left, (int) right);
send(sock, buffer, strlen(buffer), 0);
controlProtocol.ack().send();
timer.informIn(UMLRTTimespec(0, 0));*/</body>
            </entry>
          </subvertex>
        </region>
      </ownedBehavior>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_dCrcEIgqEeiP-_qqZZR9Jg" name="ObservationProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_dCmjkIgqEeiP-_qqZZR9Jg" name="ObservationProtocol">
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_dCzX4IgqEeiP-_qqZZR9Jg" client="_dCmjkIgqEeiP-_qqZZR9Jg" supplier="_dCvtgIgqEeiP-_qqZZR9Jg" contract="_dCvtgIgqEeiP-_qqZZR9Jg"/>
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_dC76wIgqEeiP-_qqZZR9Jg" client="_dCmjkIgqEeiP-_qqZZR9Jg" supplier="_dC43cYgqEeiP-_qqZZR9Jg" contract="_dC43cYgqEeiP-_qqZZR9Jg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_dCvtgIgqEeiP-_qqZZR9Jg" name="ObservationProtocol">
        <ownedOperation xmi:type="uml:Operation" xmi:id="_GbpvUIjvEeiP-_qqZZR9Jg" name="position">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_HY2-cIjvEeiP-_qqZZR9Jg" name="x">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_ILO2kIjvEeiP-_qqZZR9Jg" name="y">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_Jtn2YIjvEeiP-_qqZZR9Jg" name="distance">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_KbuSgIjvEeiP-_qqZZR9Jg" name="distance">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_dC1NEIgqEeiP-_qqZZR9Jg" name="ObservationProtocol~">
        <ownedOperation xmi:type="uml:Operation" xmi:id="_hjx90IgsEeiP-_qqZZR9Jg" name="getGPS"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_VyfoYIjtEeiP-_qqZZR9Jg" name="getDistance"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_XWrX8IjtEeiP-_qqZZR9Jg" name="ready"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_dC4QYIgqEeiP-_qqZZR9Jg" client="_dCmjkIgqEeiP-_qqZZR9Jg" supplier="_dC1NEIgqEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_dC43cIgqEeiP-_qqZZR9Jg" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_dC43cYgqEeiP-_qqZZR9Jg" name="ObservationProtocolIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_dC8h0IgqEeiP-_qqZZR9Jg" client="_dCmjkIgqEeiP-_qqZZR9Jg" supplier="_dC43cYgqEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_hkGG4IgsEeiP-_qqZZR9Jg" operation="_hjx90IgsEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_VylH8IjtEeiP-_qqZZR9Jg" operation="_VyfoYIjtEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_XWw3gIjtEeiP-_qqZZR9Jg" operation="_XWrX8IjtEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_GbxrIIjvEeiP-_qqZZR9Jg" operation="_GbpvUIjvEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Jtt9AIjvEeiP-_qqZZR9Jg" operation="_Jtn2YIjvEeiP-_qqZZR9Jg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_U7tYsIidEeiP-_qqZZR9Jg" name="ControlProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_U7rjgIidEeiP-_qqZZR9Jg" name="ControlProtocol">
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_U7yRMIidEeiP-_qqZZR9Jg" client="_U7rjgIidEeiP-_qqZZR9Jg" supplier="_U7wcAIidEeiP-_qqZZR9Jg" contract="_U7wcAIidEeiP-_qqZZR9Jg"/>
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_U72ioIidEeiP-_qqZZR9Jg" client="_U7rjgIidEeiP-_qqZZR9Jg" supplier="_U70tcIidEeiP-_qqZZR9Jg" contract="_U70tcIidEeiP-_qqZZR9Jg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_U7wcAIidEeiP-_qqZZR9Jg" name="ControlProtocol">
        <ownedOperation xmi:type="uml:Operation" xmi:id="_dJmnMIidEeiP-_qqZZR9Jg" name="position">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_hjYq4IidEeiP-_qqZZR9Jg" name="x">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_iuUM8IidEeiP-_qqZZR9Jg" name="y">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_egNNwIidEeiP-_qqZZR9Jg" name="rotation">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_k2zjcIidEeiP-_qqZZR9Jg" name="degrees">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7W3wkBydEduyofBvg4RL2w"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_tGDRoIjxEeiP-_qqZZR9Jg" name="ack"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_U7y4QIidEeiP-_qqZZR9Jg" name="ControlProtocol~">
        <ownedOperation xmi:type="uml:Operation" xmi:id="_WjhEAIidEeiP-_qqZZR9Jg" name="getGPS"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_YQY1gIidEeiP-_qqZZR9Jg" name="getCompass"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_PV1bsIilEeiP-_qqZZR9Jg" name="setPower">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_ShMkcIilEeiP-_qqZZR9Jg" name="left">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_ThIXcIilEeiP-_qqZZR9Jg" name="right">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_U70GYIidEeiP-_qqZZR9Jg" client="_U7rjgIidEeiP-_qqZZR9Jg" supplier="_U7y4QIidEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_U70GYYidEeiP-_qqZZR9Jg" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_U70tcIidEeiP-_qqZZR9Jg" name="ControlProtocolIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_U72ioYidEeiP-_qqZZR9Jg" client="_U7rjgIidEeiP-_qqZZR9Jg" supplier="_U70tcIidEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_WjhrEIidEeiP-_qqZZR9Jg" operation="_WjhEAIidEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_YQZckIidEeiP-_qqZZR9Jg" operation="_YQY1gIidEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_dJocYIidEeiP-_qqZZR9Jg" operation="_dJmnMIidEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_egOb4IidEeiP-_qqZZR9Jg" operation="_egNNwIidEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_PV2CwIilEeiP-_qqZZR9Jg" operation="_PV1bsIilEeiP-_qqZZR9Jg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_tGIxMIjxEeiP-_qqZZR9Jg" operation="_tGDRoIjxEeiP-_qqZZR9Jg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_VuOiEJXsEemnlJvKCgeTXw" name="Referee" classifierBehavior="_RGj98JXtEemnlJvKCgeTXw" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_14z9wJXtEemnlJvKCgeTXw" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_2nGAEJXtEemnlJvKCgeTXw" name="tcp" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_tEiNsa1CEeeZPMea3Z4z9w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_37u3wJXtEemnlJvKCgeTXw" name="timer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_iSOGwJXvEemnlJvKCgeTXw" name="refereeProtocol" visibility="public" type="_ibMj8JXsEemnlJvKCgeTXw" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true" isService="true"/>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_RGj98JXtEemnlJvKCgeTXw" name="StateMachine" isReentrant="false">
        <region xmi:type="uml:Region" xmi:id="_RG244JXtEemnlJvKCgeTXw" name="Region">
          <transition xmi:type="uml:Transition" xmi:id="_RHGJcJXtEemnlJvKCgeTXw" name="Initial" source="_RG8YcJXtEemnlJvKCgeTXw" target="_RHBQ8JXtEemnlJvKCgeTXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_auZa4JXtEemnlJvKCgeTXw" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>tcp.connect(&quot;127.0.0.1&quot;,9007);</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_veQVIJXtEemnlJvKCgeTXw" name="" kind="external" source="_RHBQ8JXtEemnlJvKCgeTXw" target="_tWWNcJXtEemnlJvKCgeTXw">
            <trigger xmi:type="uml:Trigger" xmi:id="_84bbQJXtEemnlJvKCgeTXw" port="_2nGAEJXtEemnlJvKCgeTXw">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_s9iNgMT3Eei7WtNtKyCSvw"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_P65xMJXvEemnlJvKCgeTXw" name="" kind="external" source="_tWWNcJXtEemnlJvKCgeTXw" target="_L4V6sJXvEemnlJvKCgeTXw">
            <trigger xmi:type="uml:Trigger" xmi:id="_d9elAJX4EemnlJvKCgeTXw" event="_8dJeYJX2EemnlJvKCgeTXw" port="_iSOGwJXvEemnlJvKCgeTXw"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_T4C8MJXvEemnlJvKCgeTXw" name="" kind="external" source="_tWWNcJXtEemnlJvKCgeTXw" target="_SU9Y0JXvEemnlJvKCgeTXw">
            <trigger xmi:type="uml:Trigger" xmi:id="_9JY9gJXvEemnlJvKCgeTXw" event="_Co9r8JXtEemnlJvKCgeTXw" port="_iSOGwJXvEemnlJvKCgeTXw"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_WlXeEJXvEemnlJvKCgeTXw" name="" kind="external" source="_tWWNcJXtEemnlJvKCgeTXw" target="_U2ceIJXvEemnlJvKCgeTXw">
            <trigger xmi:type="uml:Trigger" xmi:id="_BRHn4JXwEemnlJvKCgeTXw" event="_2hxQoJXsEemnlJvKCgeTXw" port="_iSOGwJXvEemnlJvKCgeTXw"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_Hw6V0JXwEemnlJvKCgeTXw" name="" kind="external" source="_SU9Y0JXvEemnlJvKCgeTXw" target="_FASBQJXwEemnlJvKCgeTXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_FAAfAJXxEemnlJvKCgeTXw" name="Effect" isReentrant="false">
              <language>C++</language>
              <body> std::cout&lt;&lt;&quot;[REFEREE][[RECEIVED][SCORE]: &quot;&lt;&lt; payload &lt;&lt;&quot;\n&quot;;</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_4uV5EJXwEemnlJvKCgeTXw" port="_2nGAEJXtEemnlJvKCgeTXw">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_zwyoUK1YEee74Ow6RXIGBA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_IxykAJXwEemnlJvKCgeTXw" name="" kind="external" source="_L4V6sJXvEemnlJvKCgeTXw" target="_FASBQJXwEemnlJvKCgeTXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_LpvMEJXxEemnlJvKCgeTXw" name="Effect" isReentrant="false">
              <language>C++</language>
              <body> std::cout&lt;&lt;&quot;[REFEREE][[RECEIVED][POSSISSION]: &quot;&lt;&lt; payload &lt;&lt;&quot;\n&quot;;</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_6mLkcJXwEemnlJvKCgeTXw" port="_2nGAEJXtEemnlJvKCgeTXw">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_zwyoUK1YEee74Ow6RXIGBA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_K0Fy8JXwEemnlJvKCgeTXw" name="" kind="external" source="_U2ceIJXvEemnlJvKCgeTXw" target="_FASBQJXwEemnlJvKCgeTXw">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_M7kAUJXxEemnlJvKCgeTXw" name="Effect" isReentrant="false">
              <language>C++</language>
              <body> std::cout&lt;&lt;&quot;[REFEREE][[RECEIVED][TIMEOUT]: &quot;&lt;&lt; payload &lt;&lt;&quot;\n&quot;;</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_8HmT4JXwEemnlJvKCgeTXw" port="_2nGAEJXtEemnlJvKCgeTXw">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_zwyoUK1YEee74Ow6RXIGBA"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_L2V6IJXwEemnlJvKCgeTXw" kind="external" source="_FASBQJXwEemnlJvKCgeTXw" target="_tWWNcJXtEemnlJvKCgeTXw"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_RG8YcJXtEemnlJvKCgeTXw" kind="initial"/>
          <subvertex xmi:type="uml:State" xmi:id="_RHBQ8JXtEemnlJvKCgeTXw" name="CONNECTING"/>
          <subvertex xmi:type="uml:State" xmi:id="_tWWNcJXtEemnlJvKCgeTXw" name="IDLE"/>
          <subvertex xmi:type="uml:State" xmi:id="_L4V6sJXvEemnlJvKCgeTXw" name="GET_BALL_POSSESSION">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_haeJ8JXwEemnlJvKCgeTXw" name="Entry" isReentrant="false">
              <language>C++</language>
              <body>tcp.send(&quot;Possesion;;&quot;);
 std::cout&lt;&lt;&quot;[REFEREE][SEND]: Possesion;; \n&quot;;

//timer.informIn(UMLRTTimespec(0, 100000000));</body>
            </entry>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_SU9Y0JXvEemnlJvKCgeTXw" name="GET_SCORE">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Y_T7gJXwEemnlJvKCgeTXw" name="Entry" isReentrant="false">
              <language>C++</language>
              <body>tcp.send(&quot;scored;;;&quot;);
 std::cout&lt;&lt;&quot;[REFEREE][SEND]: scored;;; \n&quot;;

//timer.informIn(UMLRTTimespec(0, 100000000));</body>
            </entry>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_U2ceIJXvEemnlJvKCgeTXw" name="GET_TIMEOUT">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_hu2egJXwEemnlJvKCgeTXw" name="Entry" isReentrant="false">
              <language>C++</language>
              <body>tcp.send(&quot;TimeOut;;&quot;);
 std::cout&lt;&lt;&quot;[REFEREE][SEND]: TimeOut;; \n&quot;;

//timer.informIn(UMLRTTimespec(0, 100000000));</body>
            </entry>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_FASBQJXwEemnlJvKCgeTXw" name="jPoint" kind="junction"/>
        </region>
      </ownedBehavior>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_ibYKIJXsEemnlJvKCgeTXw" name="RefereeProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_ibMj8JXsEemnlJvKCgeTXw" name="RefereeProtocol">
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_ibjJQJXsEemnlJvKCgeTXw" client="_ibMj8JXsEemnlJvKCgeTXw" supplier="_ibe30JXsEemnlJvKCgeTXw" contract="_ibe30JXsEemnlJvKCgeTXw"/>
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_ibzn8JXsEemnlJvKCgeTXw" client="_ibMj8JXsEemnlJvKCgeTXw" supplier="_ibuIYJXsEemnlJvKCgeTXw" contract="_ibuIYJXsEemnlJvKCgeTXw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_ibe30JXsEemnlJvKCgeTXw" name="RefereeProtocol"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_ibnasJXsEemnlJvKCgeTXw" name="RefereeProtocol~">
        <ownedOperation xmi:type="uml:Operation" xmi:id="_2htmQJXsEemnlJvKCgeTXw" name="getTimeout"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_Co4zcJXtEemnlJvKCgeTXw" name="getScored"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_ibsTMJXsEemnlJvKCgeTXw" client="_ibMj8JXsEemnlJvKCgeTXw" supplier="_ibnasJXsEemnlJvKCgeTXw"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_ibthUJXsEemnlJvKCgeTXw" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_ibuIYJXsEemnlJvKCgeTXw" name="RefereeProtocolIO">
        <ownedOperation xmi:type="uml:Operation" xmi:id="_8dDXwJX2EemnlJvKCgeTXw" name="getBallPossesion"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_ib02EJXsEemnlJvKCgeTXw" client="_ibMj8JXsEemnlJvKCgeTXw" supplier="_ibuIYJXsEemnlJvKCgeTXw"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_2hxQoJXsEemnlJvKCgeTXw" operation="_2htmQJXsEemnlJvKCgeTXw"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_Co9r8JXtEemnlJvKCgeTXw" operation="_Co4zcJXtEemnlJvKCgeTXw"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_8dJeYJX2EemnlJvKCgeTXw" operation="_8dDXwJX2EemnlJvKCgeTXw"/>
    </packagedElement>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_FX4as4gqEeiP-_qqZZR9Jg">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_FX4atIgqEeiP-_qqZZR9Jg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://UML_RT_PROFILE/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_FX4atYgqEeiP-_qqZZR9Jg">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_FX4atogqEeiP-_qqZZR9Jg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_FX4at4gqEeiP-_qqZZR9Jg">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_FX4auIgqEeiP-_qqZZR9Jg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://UMLRT_CPP/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:Capsule xmi:id="_HUbm8IgqEeiP-_qqZZR9Jg" base_Class="_HR_-AIgqEeiP-_qqZZR9Jg"/>
  <UMLRealTime:Capsule xmi:id="_IQrMwIgqEeiP-_qqZZR9Jg" base_Class="_IQj4AIgqEeiP-_qqZZR9Jg"/>
  <UMLRealTime:Capsule xmi:id="_J_vWoIgqEeiP-_qqZZR9Jg" base_Class="_J_oo8IgqEeiP-_qqZZR9Jg"/>
  <UMLRealTime:CapsulePart xmi:id="_WIKhAIgqEeiP-_qqZZR9Jg" base_Property="_WIGPkIgqEeiP-_qqZZR9Jg"/>
  <UMLRealTime:ProtocolContainer xmi:id="_dCt4UIgqEeiP-_qqZZR9Jg" base_Package="_dCrcEIgqEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTMessageSet xmi:id="_dCyJwIgqEeiP-_qqZZR9Jg" base_Interface="_dCvtgIgqEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTMessageSet xmi:id="_dC3CQIgqEeiP-_qqZZR9Jg" base_Interface="_dC1NEIgqEeiP-_qqZZR9Jg" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_dC6soIgqEeiP-_qqZZR9Jg" base_Interface="_dC43cYgqEeiP-_qqZZR9Jg" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_dC9I4IgqEeiP-_qqZZR9Jg" base_Collaboration="_dCmjkIgqEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTPort xmi:id="_YHqBoIgsEeiP-_qqZZR9Jg" isPublish="false" isWired="true" base_Port="_YHmXQIgsEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTPort xmi:id="_TnWpwIgtEeiP-_qqZZR9Jg" isPublish="false" isWired="false" base_Port="_TnTmcIgtEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTPort xmi:id="_UUOW0IgtEeiP-_qqZZR9Jg" isPublish="false" isWired="false" base_Port="_UULTgIgtEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_aLUGAIgtEeiP-_qqZZR9Jg" base_Pseudostate="_aLRCsIgtEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTState xmi:id="_aLYXcIgtEeiP-_qqZZR9Jg" base_State="_aLWiQIgtEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_aLazsIgtEeiP-_qqZZR9Jg" base_Region="_aLOmcIgtEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_aLg6UIgtEeiP-_qqZZR9Jg" base_StateMachine="_aLDAQIgtEeiP-_qqZZR9Jg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_zmc_cIg0EeiP-_qqZZR9Jg" implementationPreface="#include &lt;sys/socket.h>&#xA;#include &lt;netinet/in.h>&#xA;#include &lt;arpa/inet.h>" base_Class="_IQj4AIgqEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTPort xmi:id="_oLfwUIg6EeiP-_qqZZR9Jg" isPublish="false" isWired="false" base_Port="_oLctAIg6EeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_uUrVEIg6EeiP-_qqZZR9Jg" base_Pseudostate="_uUqG8Ig6EeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTState xmi:id="_uUtxUIg6EeiP-_qqZZR9Jg" base_State="_uUsjMIg6EeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_uUu_cIg6EeiP-_qqZZR9Jg" base_Region="_uUoRwIg6EeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_uUyCwIg6EeiP-_qqZZR9Jg" base_StateMachine="_uUhkEIg6EeiP-_qqZZR9Jg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_cC8DQIhfEeiP-_qqZZR9Jg" headerPreface="#include &lt;string>&#xA;#include &lt;iostream>&#xA;#include &lt;stdlib.h>&#xA;#include &lt;stdio.h>&#xA;#include &lt;cstring>&#xA;" implementationPreface="#include &lt;sys/socket.h>&#xA;#include &lt;netinet/in.h>&#xA;#include &lt;arpa/inet.h>&#xA;#include &lt;math.h> " base_Class="_J_oo8IgqEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTState xmi:id="_4dRCIIicEeiP-_qqZZR9Jg" base_State="_4dPM8IicEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_AYM4YIidEeiP-_qqZZR9Jg" base_Region="_AYJ1EIidEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_AYQiwIidEeiP-_qqZZR9Jg" base_Pseudostate="_AYOGgIidEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTState xmi:id="_BfvIMIidEeiP-_qqZZR9Jg" base_State="_Bft6EIidEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTState xmi:id="_FJonEIidEeiP-_qqZZR9Jg" base_State="_FJnY8IidEeiP-_qqZZR9Jg"/>
  <UMLRealTime:ProtocolContainer xmi:id="_U7vN4IidEeiP-_qqZZR9Jg" base_Package="_U7tYsIidEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTMessageSet xmi:id="_U7xqIIidEeiP-_qqZZR9Jg" base_Interface="_U7wcAIidEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTMessageSet xmi:id="_U7zfUIidEeiP-_qqZZR9Jg" base_Interface="_U7y4QIidEeiP-_qqZZR9Jg" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_U717kIidEeiP-_qqZZR9Jg" base_Interface="_U70tcIidEeiP-_qqZZR9Jg" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_U73JsIidEeiP-_qqZZR9Jg" base_Collaboration="_U7rjgIidEeiP-_qqZZR9Jg"/>
  <UMLRealTime:CapsulePart xmi:id="_pwfPMIidEeiP-_qqZZR9Jg" base_Property="_pwcy8IidEeiP-_qqZZR9Jg"/>
  <UMLRealTime:Capsule xmi:id="_qAQwkIidEeiP-_qqZZR9Jg" base_Class="_qAMfIIidEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTPort xmi:id="_yDF-kIidEeiP-_qqZZR9Jg" isPublish="false" isWired="true" base_Port="_yDDiUIidEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTPort xmi:id="_2ygUAIidEeiP-_qqZZR9Jg" isPublish="false" isWired="true" base_Port="_2ydQsIidEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTConnector xmi:id="_8RmZ8YidEeiP-_qqZZR9Jg" base_Connector="_8Rj9sIidEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_M-X5QIieEeiP-_qqZZR9Jg" base_Pseudostate="_M-WEEIieEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTState xmi:id="_M-ZucIieEeiP-_qqZZR9Jg" base_State="_M-YgUIieEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTRegion xmi:id="_M-aVgIieEeiP-_qqZZR9Jg" base_Region="_M-U18IieEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_M-cKwIieEeiP-_qqZZR9Jg" base_StateMachine="_M-OIQIieEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTState xmi:id="_R1pKMIieEeiP-_qqZZR9Jg" base_State="_R1mt8IieEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTState xmi:id="_VP_xMIieEeiP-_qqZZR9Jg" base_State="_VP9U8IieEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTPort xmi:id="_xFyMUIieEeiP-_qqZZR9Jg" isPublish="false" isWired="false" base_Port="_xFvwEIieEeiP-_qqZZR9Jg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_2YZ8gIieEeiP-_qqZZR9Jg" headerPreface="#include &lt;string>&#xA;#include &lt;iostream>" implementationPreface="#include &lt;sys/socket.h>&#xA;#include &lt;netinet/in.h>&#xA;#include &lt;arpa/inet.h>" base_Class="_qAMfIIidEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTPort xmi:id="_y3RGIIigEeiP-_qqZZR9Jg" isPublish="false" isWired="false" base_Port="_y3Op4IigEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTState xmi:id="_VNUMcIilEeiP-_qqZZR9Jg" base_State="_VNRwMIilEeiP-_qqZZR9Jg"/>
  <UMLRealTime:CapsulePart xmi:id="_wO7D4IjtEeiP-_qqZZR9Jg" base_Property="_wO4noIjtEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTPort xmi:id="_43I24IjtEeiP-_qqZZR9Jg" isPublish="false" isWired="true" base_Port="_43GaoIjtEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTConnector xmi:id="_Bn-aYojuEeiP-_qqZZR9Jg" base_Connector="_Bn7-IIjuEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTState xmi:id="_MXLIAIjuEeiP-_qqZZR9Jg" base_State="_MXIrwIjuEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTState xmi:id="_O4J3AIjuEeiP-_qqZZR9Jg" base_State="_O4Io4IjuEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTState xmi:id="_RrdFEIjuEeiP-_qqZZR9Jg" base_State="_Rrb28IjuEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTState xmi:id="_nEa70IjwEeiP-_qqZZR9Jg" base_State="_nC4DsIjwEeiP-_qqZZR9Jg"/>
  <UMLRTStateMachines:RTState xmi:id="_DhMecIjxEeiP-_qqZZR9Jg" base_State="_DhKCMIjxEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTPort xmi:id="_Qi4PQIj1EeiP-_qqZZR9Jg" isPublish="false" isWired="false" base_Port="_Qi1zAIj1EeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTPort xmi:id="_mO2ocJRPEem-h8JsU1axzg" isPublish="false" isWired="false" base_Port="_mMHdgJRPEem-h8JsU1axzg"/>
  <RTCppProperties:CapsuleProperties xmi:id="_viXhkJRXEem-h8JsU1axzg" headerPreface="#include &lt;string>&#xA;#include &lt;iostream>&#xA;#include &lt;cstdlib>&#xA;" base_Class="_HR_-AIgqEeiP-_qqZZR9Jg"/>
  <UMLRealTime:RTPort xmi:id="_BdaUYJRkEem-h8JsU1axzg" isPublish="false" isWired="false" base_Port="_BdWqAJRkEem-h8JsU1axzg"/>
  <UMLRealTime:RTPort xmi:id="_EJLXEJRkEem-h8JsU1axzg" isPublish="false" isWired="false" base_Port="_EJI60JRkEem-h8JsU1axzg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_OSaGEJUCEemnlJvKCgeTXw" base_Pseudostate="_OR5vwJUCEemnlJvKCgeTXw"/>
  <UMLRTStateMachines:RTState xmi:id="_DAzHkJUFEemnlJvKCgeTXw" base_State="_DAwEQJUFEemnlJvKCgeTXw"/>
  <UMLRTStateMachines:RTState xmi:id="_MjbPYJU8EemnlJvKCgeTXw" base_State="_MjYMEJU8EemnlJvKCgeTXw"/>
  <UMLRTStateMachines:RTState xmi:id="_yVfAwJXIEemnlJvKCgeTXw" base_State="_yVZhMJXIEemnlJvKCgeTXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_ctMMMJXUEemnlJvKCgeTXw" base_Pseudostate="_ctKXAJXUEemnlJvKCgeTXw"/>
  <UMLRTStateMachines:RTState xmi:id="_UoYy0JXVEemnlJvKCgeTXw" base_State="_UoQP8JXVEemnlJvKCgeTXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_YJds4JXVEemnlJvKCgeTXw" base_Pseudostate="_YJY0YJXVEemnlJvKCgeTXw"/>
  <UMLRealTime:Capsule xmi:id="_VvGEwJXsEemnlJvKCgeTXw" base_Class="_VuOiEJXsEemnlJvKCgeTXw"/>
  <UMLRealTime:CapsulePart xmi:id="_cP9wwJXsEemnlJvKCgeTXw" base_Property="_cPz_wJXsEemnlJvKCgeTXw"/>
  <UMLRealTime:ProtocolContainer xmi:id="_ibcbkJXsEemnlJvKCgeTXw" base_Package="_ibYKIJXsEemnlJvKCgeTXw"/>
  <UMLRealTime:RTMessageSet xmi:id="_ibhUEJXsEemnlJvKCgeTXw" base_Interface="_ibe30JXsEemnlJvKCgeTXw"/>
  <UMLRealTime:RTMessageSet xmi:id="_ibrFEJXsEemnlJvKCgeTXw" base_Interface="_ibnasJXsEemnlJvKCgeTXw" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_ibxLsJXsEemnlJvKCgeTXw" base_Interface="_ibuIYJXsEemnlJvKCgeTXw" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_ib2EMJXsEemnlJvKCgeTXw" base_Collaboration="_ibMj8JXsEemnlJvKCgeTXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_RG-0sJXtEemnlJvKCgeTXw" base_Pseudostate="_RG8YcJXtEemnlJvKCgeTXw"/>
  <UMLRTStateMachines:RTState xmi:id="_RHDtMJXtEemnlJvKCgeTXw" base_State="_RHBQ8JXtEemnlJvKCgeTXw"/>
  <UMLRTStateMachines:RTRegion xmi:id="_RHHXkJXtEemnlJvKCgeTXw" base_Region="_RG244JXtEemnlJvKCgeTXw"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_RHWBEJXtEemnlJvKCgeTXw" base_StateMachine="_RGj98JXtEemnlJvKCgeTXw"/>
  <UMLRTStateMachines:RTState xmi:id="_tWf-cJXtEemnlJvKCgeTXw" base_State="_tWWNcJXtEemnlJvKCgeTXw"/>
  <UMLRealTime:RTPort xmi:id="_142aAJXtEemnlJvKCgeTXw" isPublish="false" isWired="false" base_Port="_14z9wJXtEemnlJvKCgeTXw"/>
  <UMLRealTime:RTPort xmi:id="_2nJDYJXtEemnlJvKCgeTXw" isPublish="false" isWired="false" base_Port="_2nGAEJXtEemnlJvKCgeTXw"/>
  <UMLRealTime:RTPort xmi:id="_37x7EJXtEemnlJvKCgeTXw" isPublish="false" isWired="false" base_Port="_37u3wJXtEemnlJvKCgeTXw"/>
  <UMLRTStateMachines:RTState xmi:id="_L4YW8JXvEemnlJvKCgeTXw" base_State="_L4V6sJXvEemnlJvKCgeTXw"/>
  <UMLRTStateMachines:RTState xmi:id="_SVAcIJXvEemnlJvKCgeTXw" base_State="_SU9Y0JXvEemnlJvKCgeTXw"/>
  <UMLRTStateMachines:RTState xmi:id="_U2hWoJXvEemnlJvKCgeTXw" base_State="_U2ceIJXvEemnlJvKCgeTXw"/>
  <UMLRealTime:RTPort xmi:id="_iSTmUJXvEemnlJvKCgeTXw" isPublish="false" isWired="true" base_Port="_iSOGwJXvEemnlJvKCgeTXw"/>
  <UMLRealTime:RTPort xmi:id="_3D6NAJXvEemnlJvKCgeTXw" isPublish="false" isWired="true" base_Port="_3D17kJXvEemnlJvKCgeTXw"/>
  <UMLRealTime:RTConnector xmi:id="_76s80JXvEemnlJvKCgeTXw" base_Connector="_76m2MJXvEemnlJvKCgeTXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_FAUdgJXwEemnlJvKCgeTXw" base_Pseudostate="_FASBQJXwEemnlJvKCgeTXw"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_sB0tsJXxEemnlJvKCgeTXw" base_Pseudostate="_sBq8sJXxEemnlJvKCgeTXw"/>
  <RTCppProperties:CapsuleProperties xmi:id="_uEqrAJX4EemnlJvKCgeTXw" headerPreface="#include &lt;string>&#xA;#include &lt;iostream>&#xA;#include &lt;stdlib.h>&#xA;#include &lt;stdio.h>&#xA;#include &lt;cstring>" base_Class="_VuOiEJXsEemnlJvKCgeTXw"/>
  <UMLRTStateMachines:RTState xmi:id="_MvoJMJYJEemnlJvKCgeTXw" base_State="_MvipoJYJEemnlJvKCgeTXw"/>
</xmi:XMI>
